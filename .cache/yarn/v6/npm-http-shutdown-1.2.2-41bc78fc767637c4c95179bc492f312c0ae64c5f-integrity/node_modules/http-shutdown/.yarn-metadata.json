{
  "manifest": {
    "name": "http-shutdown",
    "version": "1.2.2",
    "description": "Gracefully shutdown a running HTTP server.",
    "main": "index.js",
    "types": "index.d.ts",
    "scripts": {
      "test": "mocha",
      "test-travis": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot"
    },
    "keywords": [
      "http",
      "https",
      "graceful",
      "force",
      "shutdown"
    ],
    "author": {
      "name": "Dillon Buchanan"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/thedillonb/http-shutdown.git"
    },
    "license": "MIT",
    "devDependencies": {
      "@types/node": "^12.12.6",
      "chai": "^3.4.1",
      "istanbul": "^0.4.1",
      "mocha": "^2.3.4",
      "request": "^2.67.0"
    },
    "engines": {
      "iojs": ">= 1.0.0",
      "node": ">= 0.12.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-http-shutdown-1.2.2-41bc78fc767637c4c95179bc492f312c0ae64c5f-integrity/node_modules/http-shutdown/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Http-Shutdown [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url]\nShutdown a Nodejs HTTP server gracefully by doing the following:\n\n1. Close the listening socket to prevent new connections\n2. Close all idle keep-alive sockets to prevent new requests during shutdown\n3. Wait for all in-flight requests to finish before closing their sockets.\n4. Profit!\n\nOther solutions might just use `server.close` which only terminates the listening socket and waits for other sockets to close - which is incomplete since keep-alive sockets can still make requests. Or, they may use `ref()/unref()` to simply cause Nodejs to terminate if the sockets are idle - which doesn't help if you have other things to shutdown after the server shutsdown.\n\n`http-shutdown` is a complete solution. It uses idle indicators combined with an active socket list to safely, and gracefully, close all sockets. It does not use `ref()/unref()` but, instead, actively closes connections as they finish meaning that socket 'close' events still work correctly since the sockets are actually closing - you're not just `unref`ing and forgetting about them.\n\n## Installation\n\n```bash\n$ npm install http-shutdown\n```\n\n## Usage\nThere are currently two ways to use this library. The first is explicit wrapping of the `Server` object:\n\n```javascript\n// Create the http server\nvar server = require('http').createServer(function(req, res) {\n  res.end('Good job!');\n});\n\n// Wrap the server object with additional functionality.\n// This should be done immediately after server construction, or before you start listening.\n// Additional functionailiy needs to be added for http server events to properly shutdown.\nserver = require('http-shutdown')(server);\n\n// Listen on a port and start taking requests.\nserver.listen(3000);\n\n// Sometime later... shutdown the server.\nserver.shutdown(function(err) {\n\tif (err) {\n\t\treturn console.log('shutdown failed', err.message);\n\t}\n\tconsole.log('Everything is cleanly shutdown.');\n});\n```\n\nThe second is implicitly adding prototype functionality to the `Server` object:\n\n```javascript\n// .extend adds a .withShutdown prototype method to the Server object\nrequire('http-shutdown').extend();\n\nvar server = require('http').createServer(function(req, res) {\n  res.end('God job!');\n}).withShutdown(); // <-- Easy to chain. Returns the Server object\n\n// Sometime later, shutdown the server.\nserver.shutdown(function(err) {\n\tif (err) {\n\t\treturn console.log('shutdown failed', err.message);\n\t}\n  console.log('Everything is cleanly shutdown.');\n});\n```\n\n## Test\n```bash\n$ npm test\n```\n\n[npm-image]: https://img.shields.io/npm/v/http-shutdown.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/http-shutdown\n[travis-image]: https://img.shields.io/travis/thedillonb/http-shutdown.svg?style=flat-square\n[travis-url]: https://travis-ci.org/thedillonb/http-shutdown\n[coveralls-image]: https://img.shields.io/coveralls/thedillonb/http-shutdown.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/thedillonb/http-shutdown\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016 Dillon Buchanan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/http-shutdown/-/http-shutdown-1.2.2.tgz#41bc78fc767637c4c95179bc492f312c0ae64c5f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/http-shutdown/-/http-shutdown-1.2.2.tgz",
    "hash": "41bc78fc767637c4c95179bc492f312c0ae64c5f",
    "integrity": "sha512-S9wWkJ/VSY9/k4qcjG318bqJNruzE4HySUhFYknwmu6LBP97KLLfwNf+n4V1BHurvFNkSKLFnK/RsuUnRTf9Vw==",
    "registry": "npm",
    "packageName": "http-shutdown",
    "cacheIntegrity": "sha512-S9wWkJ/VSY9/k4qcjG318bqJNruzE4HySUhFYknwmu6LBP97KLLfwNf+n4V1BHurvFNkSKLFnK/RsuUnRTf9Vw== sha1-Qbx4/HZ2N8TJUXm8SS8xLArmTF8="
  },
  "registry": "npm",
  "hash": "41bc78fc767637c4c95179bc492f312c0ae64c5f"
}