{
  "manifest": {
    "name": "magicast",
    "version": "0.3.0",
    "description": "Modify a JS/TS file and write back magically just like JSON!",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/magicast.git"
    },
    "license": "MIT",
    "sideEffects": false,
    "type": "module",
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      },
      "./helpers": {
        "types": "./helpers.d.ts",
        "import": "./dist/helpers.mjs",
        "require": "./dist/helpers.cjs"
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist",
      "*.d.ts"
    ],
    "scripts": {
      "build": "unbuild",
      "prepare": "esno ./scripts/vendor.ts",
      "dev": "vitest dev",
      "dev:ui": "vitest dev --ui",
      "lint": "eslint --cache --ext .ts,.js,.mjs,.cjs . && prettier -c src test",
      "lint:fix": "eslint --cache --ext .ts,.js,.mjs,.cjs . --fix && prettier -c src test -w",
      "prepack": "pnpm run build",
      "typecheck": "tsc --noEmit",
      "release": "pnpm run test run && changelogen --release && npm publish && git push --follow-tags",
      "test": "vitest",
      "test:build": "TEST_BUILD=true vitest",
      "test:full": "pnpm run test && pnpm run build && pnpm run test:build"
    },
    "dependencies": {
      "@babel/parser": "^7.22.16",
      "@babel/types": "^7.22.19",
      "source-map-js": "^1.0.2"
    },
    "devDependencies": {
      "@types/node": "^20.6.0",
      "@vitest/coverage-v8": "^0.34.4",
      "@vitest/ui": "^0.34.4",
      "ast-types": "^0.16.1",
      "changelogen": "^0.5.5",
      "eslint": "^8.49.0",
      "eslint-config-unjs": "^0.2.1",
      "esno": "^0.17.0",
      "giget": "^1.1.2",
      "lint-staged": "^14.0.1",
      "magicast": "workspace:*",
      "prettier": "^3.0.3",
      "recast": "^0.23.4",
      "simple-git-hooks": "^2.9.0",
      "source-map": "npm:source-map-js@latest",
      "typescript": "^5.2.2",
      "unbuild": "^2.0.0",
      "vitest": "^0.34.4"
    },
    "resolutions": {
      "source-map": "npm:source-map-js@latest"
    },
    "simple-git-hooks": {
      "pre-commit": "pnpm lint-staged"
    },
    "lint-staged": {
      "*.{ts,js,mjs,cjs}": [
        "eslint --fix",
        "prettier -w"
      ]
    },
    "packageManager": "pnpm@8.7.5",
    "pnpm": {
      "overrides": {
        "array-includes": "npm:@nolyfill/array-includes@latest",
        "array.prototype.flat": "npm:@nolyfill/array.prototype.flat@latest",
        "array.prototype.flatmap": "npm:@nolyfill/array.prototype.flatmap@latest",
        "available-typed-arrays": "npm:@nolyfill/available-typed-arrays@latest",
        "define-properties": "npm:@nolyfill/define-properties@latest",
        "function-bind": "npm:@nolyfill/function-bind@latest",
        "gopd": "npm:@nolyfill/gopd@latest",
        "has": "npm:@nolyfill/has@latest",
        "has-symbols": "npm:@nolyfill/has-symbols@latest",
        "has-tostringtag": "npm:@nolyfill/has-tostringtag@latest",
        "is-arguments": "npm:@nolyfill/is-arguments@latest",
        "is-generator-function": "npm:@nolyfill/is-generator-function@latest",
        "object-is": "npm:@nolyfill/object-is@latest",
        "object.values": "npm:@nolyfill/object.values@latest",
        "which-typed-array": "npm:@nolyfill/which-typed-array@latest"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-magicast-0.3.0-ff290510757da4cb55bc15cb90c9ef34db80a7f5-integrity/node_modules/magicast/package.json",
    "readmeFilename": "README.md",
    "readme": "# üßÄ Magicast\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nProgrammatically modify JavaScript and TypeScript source codes with a simplified, elegant and familiar syntax. Built on top of the [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) parsed by [recast](https://github.com/benjamn/recast) and [babel](https://babeljs.io/).\n\n‚ùØ üßôüèº **Magical** modify a JS/TS file and write back magically just like JSON!<br>\n‚ùØ üîÄ **Exports/Import** manipulate module's imports and exports at ease<br>\n‚ùØ üíº **Function Arguments** easily manipulate arguments passed to a function call, like `defineConfig()`<br>\n‚ùØ üé® **Smart Formatting** preseves the formatting style (quotes, tabs, etc.) from the original code<br>\n‚ùØ üßë‚Äçüíª **Readable** get rid of the complexity of AST manipulation and make your code super readable<br>\n\n## Install\n\nInstall npm package:\n\n```sh\n# using yarn\nyarn add --dev magicast\n\n# using npm\nnpm install -D magicast\n\n# using pnpm\npnpm add -D magicast\n```\n\nImport utilities:\n\n```js\n// ESM / Bundler\nimport { parseModule, generateCode, builders, createNode } from \"magicast\";\n\n// CommonJS\nconst { parseModule, generateCode, builders, createNode } = require(\"magicast\");\n```\n\n## Examples\n\n**Example:** Modify a file:\n\n`config.js`:\n\n```js\nexport default {\n  foo: [\"a\"],\n};\n```\n\nCode to modify and append `b` to `foo` prop of defaultExport:\n\n```js\nimport { loadFile, writeFile } from \"magicast\";\n\nconst mod = await loadFile(\"config.js\");\n\nmod.exports.default.foo.push(\"b\");\n\nawait writeFile(mod, \"config.js\");\n```\n\nUpdated `config.js`:\n\n```js\nexport default {\n  foo: [\"a\", \"b\"],\n};\n```\n\n**Example:** Directly use AST utils:\n\n```js\nimport { parseModule, generateCode } from \"magicast\";\n\n// Parse to AST\nconst mod = parseModule(`export default { }`);\n\n// Ensure foo is an array\nmod.exports.default.foo ||= [];\n// Add a new array member\nmod.exports.default.foo.push(\"b\");\nmod.exports.default.foo.unshift(\"a\");\n\n// Generate code\nconst { code, map } = generateCode(mod);\n```\n\nGenerated code:\n\n```js\nexport default {\n  foo: [\"a\", \"b\"],\n};\n```\n\n**Example:** Get the AST directly:\n\n```js\nimport { parseModule, generateCode } from \"magicast\";\n\nconst mod = parseModule(`export default { }`);\n\nconst ast = mod.exports.default.$ast\n// do something with ast\n```\n\n**Example:** Function parameters:\n\n```js\nimport { parseModule, generateCode } from \"magicast\";\n\nconst mod = parseModule(`export default defineConfig({ foo: 'bar' })`);\n\n// Support for both bare object export and `defineConfig` wrapper\nconst options = mod.exports.default.$type === 'function-call'\n  ? mod.exports.default.$args[0]\n  : mod.exports.default;\n\nconsole.log(options.foo) // bar\n```\n\n\n**Example:** Create a function call:\n\n```js\nimport { parseModule, generateCode, builders } from \"magicast\";\n\nconst mod = parseModule(`export default {}`);\n\nconst options = mod.exports.default.list = builders.functionCall('create', [1, 2, 3])\n\nconsole.log(mod.generateCode()) // export default { list: create([1, 2, 3]) }\n```\n\n## Notes\n\nAs JavaScript is a very dynamic language, you should be aware that Magicast's convention **CAN NOT cover all possible cases**. Magicast serves as a simple and maintainable interface to update static-ish JavaScript code. When interacting with Magicast node, be aware that every option might have chance to throw an error depending on the input code. We recommend to always wrap the code in a `try/catch` block (even better to do some defensive coding), for example:\n\n```ts\nimport { loadFile, writeFile } from \"magicast\";\n\nfunction updateConfig() {\n  try {\n    const mod = await loadFile(\"config.js\");\n\n    mod.exports.default.foo.push(\"b\");\n\n    await writeFile(mod);\n  } catch (e) {\n    console.error('Unable to update config.js')\n    console.error('Please update it manually with the following instructions: ...')\n    // handle error\n  }\n}\n```\n\n## High Level Helpers\n\nWe also experiment to provide a few high level helpers to make common tasks easier. You could import them from `magicast/helpers`. They might be moved to a separate package in the future.\n\n```js\nimport {\n  deepMergeObject,\n  addNuxtModule,\n  addVitePlugin,\n  // ...\n} from \"magicast/helpers\";\n```\n\nWe recommend to check out the [source code](./src/helpers) and [test cases](./test/helpers) for more details.\n\n## Development\n\n- Clone this repository\n- Install latest LTS version of [Node.js](https://nodejs.org/en/)\n- Enable [Corepack](https://github.com/nodejs/corepack) using `corepack enable`\n- Install dependencies using `pnpm install`\n- Run interactive tests using `pnpm dev`\n\n## License\n\nMade with üíõ\n\nPublished under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n\n[npm-version-src]: https://img.shields.io/npm/v/magicast?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-version-href]: https://npmjs.com/package/magicast\n[npm-downloads-src]: https://img.shields.io/npm/dm/magicast?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-downloads-href]: https://npmjs.com/package/magicast\n[codecov-src]: https://img.shields.io/codecov/c/gh/unjs/magicast/main?style=flat&colorA=18181B&colorB=F0DB4F\n[codecov-href]: https://codecov.io/gh/unjs/magicast\n[bundle-src]: https://img.shields.io/bundlephobia/minzip/magicast?style=flat&colorA=18181B&colorB=F0DB4F\n[bundle-href]: https://bundlephobia.com/result?p=magicast\n[license-src]: https://img.shields.io/github/license/unjs/magicast.svg?style=flat&colorA=18181B&colorB=F0DB4F\n[license-href]: https://github.com/unjs/magicast/blob/main/LICENSE\n[jsdocs-src]: https://img.shields.io/badge/jsDocs.io-reference-18181B?style=flat&colorA=18181B&colorB=F0DB4F\n[jsdocs-href]: https://www.jsdocs.io/package/magicast\n",
    "licenseText": "MIT License\n\nCopyright (c) Pooya Parsa <pooya@pi0.io> and Anthony Fu <https://github.com/antfu>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/magicast/-/magicast-0.3.0.tgz#ff290510757da4cb55bc15cb90c9ef34db80a7f5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/magicast/-/magicast-0.3.0.tgz",
    "hash": "ff290510757da4cb55bc15cb90c9ef34db80a7f5",
    "integrity": "sha512-ZsEzw35h7xYoFlWHIyxU6zmH4sdwzdmY0DY4s/Lie/qKimeijz2jRw8/OV2248kt/y6FbvoTvGRKyB7y/Mpx8w==",
    "registry": "npm",
    "packageName": "magicast",
    "cacheIntegrity": "sha512-ZsEzw35h7xYoFlWHIyxU6zmH4sdwzdmY0DY4s/Lie/qKimeijz2jRw8/OV2248kt/y6FbvoTvGRKyB7y/Mpx8w== sha1-/ykFEHV9pMtVvBXLkMnvNNuAp/U="
  },
  "registry": "npm",
  "hash": "ff290510757da4cb55bc15cb90c9ef34db80a7f5"
}