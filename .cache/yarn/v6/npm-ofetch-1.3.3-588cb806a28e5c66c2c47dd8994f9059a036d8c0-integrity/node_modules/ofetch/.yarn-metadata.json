{
  "manifest": {
    "name": "ofetch",
    "version": "1.3.3",
    "description": "A better fetch API. Works on node, browser and workers.",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/ofetch.git"
    },
    "license": "MIT",
    "sideEffects": false,
    "type": "module",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "browser": "./dist/index.mjs",
        "bun": "./dist/index.mjs",
        "deno": "./dist/index.mjs",
        "edge-light": "./dist/index.mjs",
        "edge-routine": "./dist/index.mjs",
        "lagon": "./dist/index.mjs",
        "netlify": "./dist/index.mjs",
        "react-native": "./dist/index.mjs",
        "wintercg": "./dist/index.mjs",
        "worker": "./dist/index.mjs",
        "workerd": "./dist/index.mjs",
        "node": {
          "import": {
            "types": "./dist/node.d.mts",
            "default": "./dist/node.mjs"
          },
          "require": {
            "types": "./dist/node.d.cts",
            "default": "./dist/node.cjs"
          }
        },
        "import": {
          "types": "./dist/index.d.mts",
          "default": "./dist/index.mjs"
        },
        "require": {
          "types": "./dist/node.d.cts",
          "default": "./dist/node.cjs"
        },
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "./node": {
        "import": {
          "types": "./dist/node.d.mts",
          "default": "./dist/node.mjs"
        },
        "require": {
          "types": "./dist/node.d.cts",
          "default": "./dist/node.cjs"
        }
      }
    },
    "main": "./dist/node.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist",
      "node.d.ts"
    ],
    "scripts": {
      "build": "unbuild",
      "dev": "vitest",
      "lint": "eslint --ext .ts . && prettier -c src test playground",
      "lint:fix": "eslint --fix --ext .ts . && prettier -w src test playground",
      "prepack": "pnpm build",
      "play": "jiti playground/index.ts",
      "release": "pnpm test && changelogen --release && npm publish && git push --follow-tags",
      "test": "pnpm lint && vitest run --coverage"
    },
    "dependencies": {
      "destr": "^2.0.1",
      "node-fetch-native": "^1.4.0",
      "ufo": "^1.3.0"
    },
    "devDependencies": {
      "@types/node": "^20.5.6",
      "@vitest/coverage-v8": "^0.34.3",
      "changelogen": "^0.5.5",
      "eslint": "^8.47.0",
      "eslint-config-unjs": "^0.2.1",
      "fetch-blob": "^4.0.0",
      "formdata-polyfill": "^4.0.10",
      "h3": "^1.8.0",
      "jiti": "^1.19.3",
      "listhen": "^1.4.0",
      "prettier": "^3.0.2",
      "std-env": "^3.4.3",
      "typescript": "^5.2.2",
      "unbuild": "2.0.0",
      "vitest": "^0.34.3"
    },
    "packageManager": "pnpm@8.6.12",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ofetch-1.3.3-588cb806a28e5c66c2c47dd8994f9059a036d8c0-integrity/node_modules/ofetch/package.json",
    "readmeFilename": "README.md",
    "readme": "# ofetch\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nA better fetch API. Works on node, browser and workers.\n\n## üöÄ Quick Start\n\nInstall:\n\n```bash\n# npm\nnpm i ofetch\n\n# yarn\nyarn add ofetch\n```\n\nImport:\n\n```js\n// ESM / Typescript\nimport { ofetch } from \"ofetch\";\n\n// CommonJS\nconst { ofetch } = require(\"ofetch\");\n```\n\n## ‚úîÔ∏è Works with Node.js\n\nWe use [conditional exports](https://nodejs.org/api/packages.html#packages_conditional_exports) to detect Node.js\nand automatically use [unjs/node-fetch-native](https://github.com/unjs/node-fetch-native). If `globalThis.fetch` is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use [`--experimental-fetch` flag](https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch).\n\n### `keepAlive` support\n\nBy setting the `FETCH_KEEP_ALIVE` environment variable to `true`, an http/https agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to reestablish a TCP connection.\n\n**Note:** This option can potentially introduce memory leaks. Please check [node-fetch/node-fetch#1325](https://github.com/node-fetch/node-fetch/pull/1325).\n\n## ‚úîÔ∏è Parsing Response\n\n`ofetch` will smartly parse JSON and native values using [destr](https://github.com/unjs/destr), falling back to text if it fails to parse.\n\n```js\nconst { users } = await ofetch(\"/api/users\");\n```\n\nFor binary content types, `ofetch` will instead return a `Blob` object.\n\nYou can optionally provide a different parser than destr, or specify `blob`, `arrayBuffer` or `text` to force parsing the body with the respective `FetchResponse` method.\n\n```js\n// Use JSON.parse\nawait ofetch(\"/movie?lang=en\", { parseResponse: JSON.parse });\n\n// Return text as is\nawait ofetch(\"/movie?lang=en\", { parseResponse: (txt) => txt });\n\n// Get the blob version of the response\nawait ofetch(\"/api/generate-image\", { responseType: \"blob\" });\n```\n\n## ‚úîÔ∏è JSON Body\n\nIf an object or a class with a `.toJSON()` method is passed to the `body` option, `ofetch` automatically stringifies it.\n\n`ofetch` utilizes `JSON.stringify()` to convert the passed object. Classes without a `.toJSON()` method have to be converted into a string value in advance before being passed to the `body` option.\n\nFor `PUT`, `PATCH`, and `POST` request methods, when a string or object body is set, `ofetch` adds the default `content-type: \"application/json\"` and `accept: \"application/json\"` headers (which you can always override).\n\nAdditionally, `ofetch` supports binary responses with `Buffer`, `ReadableStream`, `Stream`, and [compatible body types](https://developer.mozilla.org/en-US/docs/Web/API/fetch#body). ofetch will automatically set the `duplex: \"half\"` option for streaming support!\n\n**Example:**\n\n```js\nconst { users } = await ofetch(\"/api/users\", {\n  method: \"POST\",\n  body: { some: \"json\" },\n});\n```\n\n## ‚úîÔ∏è Handling Errors\n\n`ofetch` Automatically throw errors when `response.ok` is `false` with a friendly error message and compact stack (hiding internals).\n\nParsed error body is available with `error.data`. You may also use `FetchError` type.\n\n```ts\nawait ofetch(\"https://google.com/404\");\n// FetchError: [GET] \"https://google/404\": 404 Not Found\n//     at async main (/project/playground.ts:4:3)\n```\n\nTo catch error response:\n\n```ts\nawait ofetch(\"/url\").catch((err) => err.data);\n```\n\nTo bypass status error catching you can set `ignoreResponseError` option:\n\n```ts\nawait ofetch(\"/url\", { ignoreResponseError: true });\n```\n\n## ‚úîÔ∏è Auto Retry\n\n`ofetch` Automatically retries the request if an error happens and if response status code is included in `retryStatusCodes` list:\n\n**Retry status codes:**\n\n- `408` - Request Timeout\n- `409` - Conflict\n- `425` - Too Early\n- `429` - Too Many Requests\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n- `504` - Gateway Timeout\n\nYou can specifcy amount of retry and delay between them using `retry` and `retryDelay` options and also pass a custom array of codes using `retryStatusCodes` option.\n\nDefault for `retry` is `1` retry, except for `POST`, `PUT`, `PATCH` and `DELETE` methods where `ofetch` does not retry.\n\nDefault for `retryDelay` is `0` ms.\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  retry: 3,\n  retryDelay: 500, // ms\n});\n```\n\n## ‚úîÔ∏è Timeout\n\nYou can specify `timeout` in milliseconds to automatically abort request after a timeout (default is disabled).\n\n```ts\nawait ofetch(\"http://google.com/404\", {\n  timeout: 3000, // Timeout after 3 seconds\n});\n```\n\n## ‚úîÔ∏è Type Friendly\n\nResponse can be type assisted:\n\n```ts\nconst article = await ofetch<Article>(`/api/article/${id}`);\n// Auto complete working with article.id\n```\n\n## ‚úîÔ∏è Adding `baseURL`\n\nBy using `baseURL` option, `ofetch` prepends it with respecting to trailing/leading slashes and query search params for baseURL using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/config\", { baseURL });\n```\n\n## ‚úîÔ∏è Adding Query Search Params\n\nBy using `query` option (or `params` as alias), `ofetch` adds query search params to URL by preserving query in request itself using [ufo](https://github.com/unjs/ufo):\n\n```js\nawait ofetch(\"/movie?lang=en\", { query: { id: 123 } });\n```\n\n## ‚úîÔ∏è Interceptors\n\nIt is possible to provide async interceptors to hook into lifecycle events of `ofetch` call.\n\nYou might want to use `ofetch.create` to set shared interceptors.\n\n### `onRequest({ request, options })`\n\n`onRequest` is called as soon as `ofetch` is being called, allowing to modify options or just do simple logging.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequest({ request, options }) {\n    // Log request\n    console.log(\"[fetch request]\", request, options);\n\n    // Add `?t=1640125211170` to query search params\n    options.query = options.query || {};\n    options.query.t = new Date();\n  },\n});\n```\n\n### `onRequestError({ request, options, error })`\n\n`onRequestError` will be called when fetch request fails.\n\n```js\nawait ofetch(\"/api\", {\n  async onRequestError({ request, options, error }) {\n    // Log error\n    console.log(\"[fetch request error]\", request, error);\n  },\n});\n```\n\n### `onResponse({ request, options, response })`\n\n`onResponse` will be called after `fetch` call and parsing body.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponse({ request, response, options }) {\n    // Log response\n    console.log(\"[fetch response]\", request, response.status, response.body);\n  },\n});\n```\n\n### `onResponseError({ request, options, response })`\n\n`onResponseError` is same as `onResponse` but will be called when fetch happens but `response.ok` is not `true`.\n\n```js\nawait ofetch(\"/api\", {\n  async onResponseError({ request, response, options }) {\n    // Log error\n    console.log(\n      \"[fetch response error]\",\n      request,\n      response.status,\n      response.body\n    );\n  },\n});\n```\n\n## ‚úîÔ∏è Create fetch with default options\n\nThis utility is useful if you need to use common options across several fetch calls.\n\n**Note:** Defaults will be cloned at one level and inherited. Be careful about nested options like `headers`.\n\n```js\nconst apiFetch = ofetch.create({ baseURL: \"/api\" });\n\napiFetch(\"/test\"); // Same as ofetch('/test', { baseURL: '/api' })\n```\n\n## üí° Adding headers\n\nBy using `headers` option, `ofetch` adds extra headers in addition to the request default headers:\n\n```js\nawait ofetch(\"/movies\", {\n  headers: {\n    Accept: \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n  },\n});\n```\n\n## üí° Adding HTTP(S) Agent\n\nIf you need use HTTP(S) Agent, can add `agent` option with `https-proxy-agent` (for Node.js only):\n\n```js\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nawait ofetch(\"/api\", {\n  agent: new HttpsProxyAgent(\"http://example.com\"),\n});\n```\n\n## üç£ Access to Raw Response\n\nIf you need to access raw response (for headers, etc), can use `ofetch.raw`:\n\n```js\nconst response = await ofetch.raw(\"/sushi\");\n\n// response._data\n// response.headers\n// ...\n```\n\n## Native fetch\n\nAs a shortcut, you can use `ofetch.native` that provides native `fetch` API\n\n```js\nconst json = await ofetch.native(\"/sushi\").then((r) => r.json());\n```\n\n## üì¶ Bundler Notes\n\n- All targets are exported with Module and CommonJS format and named exports\n- No export is transpiled for sake of modern syntax\n  - You probably need to transpile `ofetch`, `destr` and `ufo` packages with babel for ES5 support\n- You need to polyfill `fetch` global for supporting legacy browsers like using [unfetch](https://github.com/developit/unfetch)\n\n## ‚ùì FAQ\n\n**Why export is called `ofetch` instead of `fetch`?**\n\nUsing the same name of `fetch` can be confusing since API is different but still it is a fetch so using closest possible alternative. You can however, import `{ fetch }` from `ofetch` which is auto polyfilled for Node.js and using native otherwise.\n\n**Why not having default export?**\n\nDefault exports are always risky to be mixed with CommonJS exports.\n\nThis also guarantees we can introduce more utils without breaking the package and also encourage using `ofetch` name.\n\n**Why not transpiled?**\n\nBy keep transpiling libraries we push web backward with legacy code which is unneeded for most of the users.\n\nIf you need to support legacy users, you can optionally transpile the library in your build pipeline.\n\n## License\n\nMIT. Made with üíñ\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/ofetch?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-version-href]: https://npmjs.com/package/ofetch\n[npm-downloads-src]: https://img.shields.io/npm/dm/ofetch?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-downloads-href]: https://npmjs.com/package/ofetch\n[codecov-src]: https://img.shields.io/codecov/c/gh/unjs/ofetch/main?style=flat&colorA=18181B&colorB=F0DB4F\n[codecov-href]: https://codecov.io/gh/unjs/ofetch\n[bundle-src]: https://img.shields.io/bundlephobia/minzip/ofetch?style=flat&colorA=18181B&colorB=F0DB4F\n[bundle-href]: https://bundlephobia.com/result?p=ofetch\n[license-src]: https://img.shields.io/github/license/unjs/ofetch.svg?style=flat&colorA=18181B&colorB=F0DB4F\n[license-href]: https://github.com/unjs/ofetch/blob/main/LICENSE\n[jsdocs-src]: https://img.shields.io/badge/jsDocs.io-reference-18181B?style=flat&colorA=18181B&colorB=F0DB4F\n[jsdocs-href]: https://www.jsdocs.io/package/ofetch\n",
    "licenseText": "MIT License\n\nCopyright (c) Pooya Parsa <pooya@pi0.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ofetch/-/ofetch-1.3.3.tgz#588cb806a28e5c66c2c47dd8994f9059a036d8c0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ofetch/-/ofetch-1.3.3.tgz",
    "hash": "588cb806a28e5c66c2c47dd8994f9059a036d8c0",
    "integrity": "sha512-s1ZCMmQWXy4b5K/TW9i/DtiN8Ku+xCiHcjQ6/J/nDdssirrQNOoB165Zu8EqLMA2lln1JUth9a0aW9Ap2ctrUg==",
    "registry": "npm",
    "packageName": "ofetch",
    "cacheIntegrity": "sha512-s1ZCMmQWXy4b5K/TW9i/DtiN8Ku+xCiHcjQ6/J/nDdssirrQNOoB165Zu8EqLMA2lln1JUth9a0aW9Ap2ctrUg== sha1-WIy4BqKOXGbCxH3YmU+QWaA22MA="
  },
  "registry": "npm",
  "hash": "588cb806a28e5c66c2c47dd8994f9059a036d8c0"
}