{
  "manifest": {
    "name": "@nuxt/devalue",
    "version": "2.0.2",
    "description": "Gets the job done when JSON.stringify can't",
    "repository": {
      "type": "git",
      "url": "https://github.com/nuxt/devalue.git"
    },
    "license": "MIT",
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "require": "./dist/devalue.js",
        "import": "./dist/devalue.mjs"
      }
    },
    "main": "./dist/devalue.js",
    "module": "./dist/devalue.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "unbuild",
      "prepack": "yarn build",
      "lint": "eslint --ext .ts,.js .",
      "test": "yarn lint && jest",
      "release": "yarn test && standard-version && git push --follow-tags && npm publish"
    },
    "devDependencies": {
      "@nuxtjs/eslint-config-typescript": "^6.0.0",
      "@types/jest": "^26.0.23",
      "@types/mocha": "^8.2.2",
      "@types/node": "^15.3.0",
      "eslint": "^7.26.0",
      "jest": "^26.6.3",
      "standard-version": "^9.3.0",
      "ts-jest": "^26.5.6",
      "typescript": "^4.2.4",
      "unbuild": "^1.2.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@nuxt-devalue-2.0.2-5749f04df13bda4c863338d8dabaf370f45ef7c7-integrity/node_modules/@nuxt/devalue/package.json",
    "readmeFilename": "README.md",
    "readme": "# @nuxt/devalue\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![codecov][codecov-src]][codecov-href]\n[![package phobia][package-phobia-src]][package-phobia-href]\n[![bundle phobia][bundle-phobia-src]][bundle-phobia-href]\n\n> Forked from [devalue](https://github.com/Rich-Harris/devalue) to log errors on non-serializable properties rather than throwing `Error`.\n\nLike `JSON.stringify`, but handles\n\n* cyclical references (`obj.self = obj`)\n* repeated references (`[value, value]`)\n* `undefined`, `Infinity`, `NaN`, `-0`\n* regular expressions\n* dates\n* `Map` and `Set`\n* `.toJSON()` method for non-POJOs\n\nTry it out on [runkit.com](https://npm.runkit.com/@nuxt/devalue).\n\n## Goals:\n\n* Performance\n* Security (see [XSS mitigation](#xss-mitigation))\n* Compact output\n\n\n## Non-goals:\n\n* Human-readable output\n* Stringifying functions or arbritary non-POJOs\n\n\n## Usage\n\n```js\nimport devalue from '@nuxt/devalue';\n\nlet obj = { a: 1, b: 2 };\nobj.c = 3;\n\ndevalue(obj); // '{a:1,b:2,c:3}'\n\nobj.self = obj;\ndevalue(obj); // '(function(a){a.a=1;a.b=2;a.c=3;a.self=a;return a}({}))'\n```\n\nIf `devalue` encounters a function or a non-POJO, it will throw an error.\n\n\n## XSS mitigation\n\nSay you're server-rendering a page and want to serialize some state, which could include user input. `JSON.stringify` doesn't protect against XSS attacks:\n\n```js\nconst state = {\n  userinput: `</script><script src='https://evil.com/mwahaha.js'>`\n};\n\nconst template = `\n<script>\n  // NEVER DO THIS\n  var preloaded = ${JSON.stringify(state)};\n</script>`;\n```\n\nWhich would result in this:\n\n```html\n<script>\n  // NEVER DO THIS\n  var preloaded = {\"userinput\":\"</script><script src='https://evil.com/mwahaha.js'>\"};\n</script>\n```\n\nUsing `devalue`, we're protected against that attack:\n\n```js\nconst template = `\n<script>\n  var preloaded = ${devalue(state)};\n</script>`;\n```\n\n```html\n<script>\n  var preloaded = {userinput:\"\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript src=\\'https:\\\\u002F\\\\u002Fevil.com\\\\u002Fmwahaha.js\\'\\\\u003E\"};\n</script>\n```\n\nThis, along with the fact that `devalue` bails on functions and non-POJOs, stops attackers from executing arbitrary code. Strings generated by `devalue` can be safely deserialized with `eval` or `new Function`:\n\n```js\nconst value = (0,eval)('(' + str + ')');\n```\n\n\n## Other security considerations\n\nWhile `devalue` prevents the XSS vulnerability shown above, meaning you can use it to send data from server to client, **you should not send user data from client to server** using the same method. Since it has to be evaluated, an attacker that successfully submitted data that bypassed `devalue` would have access to your system.\n\nWhen using `eval`, ensure that you call it *indirectly* so that the evaluated code doesn't have access to the surrounding scope:\n\n```js\n{\n  const sensitiveData = 'Setec Astronomy';\n  eval('sendToEvilServer(sensitiveData)'); // pwned :(\n  (0,eval)('sendToEvilServer(sensitiveData)'); // nice try, evildoer!\n}\n```\n\nUsing `new Function(code)` is akin to using indirect eval.\n\n\n## See also\n\n* [lave](https://github.com/jed/lave) by Jed Schmidt\n* [arson](https://github.com/benjamn/arson) by Ben Newman\n* [tosource](https://github.com/marcello3d/node-tosource) by Marcello Bast√©a-Forte\n* [serialize-javascript](https://github.com/yahoo/serialize-javascript) by Eric Ferraiuolo\n\n\n## License\n\n[MIT](LICENSE)\n\n<!-- Refs -->\n[npm-version-src]: https://flat.badgen.net/npm/v/@nuxt/devalue/latest\n[npm-version-href]: https://www.npmjs.com/package/@nuxt/devalue\n\n[npm-downloads-src]: https://flat.badgen.net/npm/dm/@nuxt/devalue\n[npm-downloads-href]: https://www.npmjs.com/package/@nuxt/devalue\n\n[circleci-src]: https://flat.badgen.net/circleci/github/nuxt-contrib/devalue\n[circleci-href]: https://circleci.com/gh/nuxt-contrib/devalue\n\n[package-phobia-src]: https://flat.badgen.net/packagephobia/install/@nuxt/devalue\n[package-phobia-href]: https://packagephobia.now.sh/result?p=@nuxt/devalue\n\n[bundle-phobia-src]: https://flat.badgen.net/bundlephobia/minzip/@nuxt/devalue\n[bundle-phobia-href]: https://bundlephobia.com/result?p=@nuxt/devalue\n\n[codecov-src]: https://flat.badgen.net/codecov/c/github/nuxt-contrib/devalue/master\n[codecov-href]: https://codecov.io/gh/nuxt-contrib/devalue\n",
    "licenseText": "Copyright (c) 2018-19 [these people](https://github.com/nuxt-contrib/devalue/graphs/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@nuxt/devalue/-/devalue-2.0.2.tgz#5749f04df13bda4c863338d8dabaf370f45ef7c7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@nuxt/devalue/-/devalue-2.0.2.tgz",
    "hash": "5749f04df13bda4c863338d8dabaf370f45ef7c7",
    "integrity": "sha512-GBzP8zOc7CGWyFQS6dv1lQz8VVpz5C2yRszbXufwG/9zhStTIH50EtD87NmWbTMwXDvZLNg8GIpb1UFdH93JCA==",
    "registry": "npm",
    "packageName": "@nuxt/devalue",
    "cacheIntegrity": "sha512-GBzP8zOc7CGWyFQS6dv1lQz8VVpz5C2yRszbXufwG/9zhStTIH50EtD87NmWbTMwXDvZLNg8GIpb1UFdH93JCA== sha1-V0nwTfE72kyGMzjY2rrzcPRe98c="
  },
  "registry": "npm",
  "hash": "5749f04df13bda4c863338d8dabaf370f45ef7c7"
}