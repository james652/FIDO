{
  "manifest": {
    "name": "@cloudflare/kv-asset-handler",
    "version": "0.3.0",
    "description": "Routes requests to KV assets",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "scripts": {
      "prepack": "npm run build",
      "build": "tsc -d",
      "format": "prettier --write \"**/*.{js,ts,json,md}\"",
      "pretest": "npm run build",
      "lint:code": "prettier --check \"**/*.{js,ts,json,md}\"",
      "lint:markdown": "markdownlint \"**/*.md\" --ignore node_modules",
      "test": "ava dist/test/*.js --verbose"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/cloudflare/kv-asset-handler.git"
    },
    "keywords": [
      "kv",
      "cloudflare",
      "workers",
      "wrangler",
      "assets"
    ],
    "files": [
      "src",
      "dist",
      "LICENSE_APACHE",
      "LICENSE_MIT"
    ],
    "author": {
      "name": "wrangler@cloudflare.com"
    },
    "license": "MIT OR Apache-2.0",
    "bugs": {
      "url": "https://github.com/cloudflare/kv-asset-handler/issues"
    },
    "homepage": "https://github.com/cloudflare/kv-asset-handler#readme",
    "dependencies": {
      "mime": "^3.0.0"
    },
    "devDependencies": {
      "@ava/typescript": "^3.0.1",
      "@cloudflare/workers-types": "^4.20221111.1",
      "@types/mime": "^3.0.1",
      "@types/node": "^18.11.12",
      "ava": "^5.1.0",
      "prettier": "^2.8.1",
      "service-worker-mock": "^2.0.5",
      "typescript": "^4.9.4"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@cloudflare-kv-asset-handler-0.3.0-11f0af0749a400ddadcca16dcd6f4696d7036991-integrity/node_modules/@cloudflare/kv-asset-handler/package.json",
    "readmeFilename": "README.md",
    "readme": "# @cloudflare/kv-asset-handler\n\n[![npm](https://img.shields.io/npm/v/@cloudflare/kv-asset-handler.svg)](https://www.npmjs.com/package/@cloudflare/kv-asset-handler) &nbsp;\n[![Run npm tests](https://github.com/cloudflare/kv-asset-handler/actions/workflows/test.yml/badge.svg)](https://github.com/cloudflare/kv-asset-handler/actions/workflows/test.yml) &nbsp;\n[![Lint Markdown](https://github.com/cloudflare/kv-asset-handler/actions/workflows/lint.yml/badge.svg)](https://github.com/cloudflare/kv-asset-handler/actions/workflows/lint.yml) &nbsp;\n\n`kv-asset-handler` is an open-source library for managing the retrieval of static assets from [Workers KV](https://developers.cloudflare.com/workers/runtime-apis/kv) inside of a [Cloudflare Workers](https://workers.dev) function. `kv-asset-handler` is designed for use with [Workers Sites](https://developers.cloudflare.com/workers/platform/sites), a feature included in [Wrangler](https://github.com/cloudflare/wrangler), our command-line tool for deploying Workers projects.\n\n`kv-asset-handler` runs as part of a Cloudflare Workers function, so it allows you to customize _how_ and _when_ your static assets are loaded, as well as customize how those assets behave before they're sent to the client.\n\nMost users and sites will not need these customizations, and just want to serve their statically built applications. For that simple use-case, you can check out [Cloudflare Pages](https://pages.cloudflare.com), our batteries-included approach to deploying static sites on Cloudflare's edge network. Workers Sites was designed as a precursor to Cloudflare Pages, so check out Pages if you just want to deploy your static site without any special customizations!\n\nFor users who _do_ want to customize their assets, and want to build complex experiences on top of their static assets, `kv-asset-handler` (and the default [Workers Sites template](https://github.com/cloudflare/worker-sites-template), which is provided for use with Wrangler + Workers Sites) allows you to customize caching behavior, headers, and anything else about how your Workers function loads the static assets for your site stored in Workers KV.\n\nThe Cloudflare Workers Discord server is an active place where Workers users get help, share feedback, and collaborate on making our platform better. The `#workers` channel in particular is a great place to chat about `kv-asset-handler`, and building cool experiences for your users using these tools! If you have questions, want to share what you're working on, or give feedback, [join us in Discord and say hello](https://discord.gg/cloudflaredev)!\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [`getAssetFromKV`](#-getassetfromkv)\n  - [Example](#example)\n  * [Return](#return)\n  * [Optional Arguments](#optional-arguments)\n    - [`mapRequestToAsset`](#-maprequesttoasset)\n    - [Example](#example-1)\n    - [`cacheControl`](#-cachecontrol)\n      - [`browserTTL`](#browserttl)\n      - [`edgeTTL`](#edgettl)\n      - [`bypassCache`](#bypasscache)\n    - [`ASSET_NAMESPACE` (required for ES Modules)](#asset_namespace-required-for-es-modules)\n    - [`ASSET_MANIFEST` (required for ES Modules)](#asset_manifest-required-for-es-modules)\n    - [`defaultETag`](#defaultetag-optional)\n\n* [Helper functions](#helper-functions)\n  - [`mapRequestToAsset`](#maprequesttoasset-1)\n  - [`serveSinglePageApp`](#servesinglepageapp)\n* [Cache revalidation and etags](#cache-revalidation-and-etags)\n\n## Installation\n\nAdd this package to your `package.json` by running this in the root of your\nproject's directory:\n\n```\nnpm i @cloudflare/kv-asset-handler\n```\n\n## Usage\n\nThis package was designed to work with [Worker Sites](https://workers.cloudflare.com/sites).\n\n## `getAssetFromKV`\n\ngetAssetFromKV(Evt) => Promise<Response>\n\n`getAssetFromKV` is an async function that takes an `Evt` object (containing a `Request` and a [`waitUntil`](https://developers.cloudflare.com/workers/runtime-apis/fetch-event#waituntil)) and returns a `Response` object if the request matches an asset in KV, otherwise it will throw a `KVError`.\n\n#### Example\n\nThis example checks for the existence of a value in KV, and returns it if it's there, and returns a 404 if it is not. It also serves index.html from `/`.\n\n### Return\n\n`getAssetFromKV` returns a `Promise<Response>` with `Response` being the body of the asset requested.\n\nKnown errors to be thrown are:\n\n- MethodNotAllowedError\n- NotFoundError\n- InternalError\n\n#### ES Modules\n\n```js\nimport { getAssetFromKV, NotFoundError, MethodNotAllowedError } from '@cloudflare/kv-asset-handler'\nimport manifestJSON from '__STATIC_CONTENT_MANIFEST'\nconst assetManifest = JSON.parse(manifestJSON)\n\nexport default {\n\tasync fetch(request, env, ctx) {\n\t\tif (request.url.includes('/docs')) {\n\t\t\ttry {\n\t\t\t\treturn await getAssetFromKV(\n\t\t\t\t\t{\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\twaitUntil(promise) {\n\t\t\t\t\t\t\treturn ctx.waitUntil(promise)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tASSET_NAMESPACE: env.__STATIC_CONTENT,\n\t\t\t\t\t\tASSET_MANIFEST: assetManifest,\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t// ...\n\t\t\t\t} else if (e instanceof MethodNotAllowedError) {\n\t\t\t\t\t// ...\n\t\t\t\t} else {\n\t\t\t\t\treturn new Response('An unexpected error occurred', { status: 500 })\n\t\t\t\t}\n\t\t\t}\n\t\t} else return fetch(request)\n\t},\n}\n```\n\n#### Service Worker\n\n```js\nimport { getAssetFromKV, NotFoundError, MethodNotAllowedError } from '@cloudflare/kv-asset-handler'\n\naddEventListener('fetch', (event) => {\n\tevent.respondWith(handleEvent(event))\n})\n\nasync function handleEvent(event) {\n\tif (event.request.url.includes('/docs')) {\n\t\ttry {\n\t\t\treturn await getAssetFromKV(event)\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t// ...\n\t\t\t} else if (e instanceof MethodNotAllowedError) {\n\t\t\t\t// ...\n\t\t\t} else {\n\t\t\t\treturn new Response('An unexpected error occurred', { status: 500 })\n\t\t\t}\n\t\t}\n\t} else return fetch(event.request)\n}\n```\n\n### Optional Arguments\n\nYou can customize the behavior of `getAssetFromKV` by passing the following properties as an object into the second argument.\n\n```\ngetAssetFromKV(event, { mapRequestToAsset: ... })\n```\n\n#### `mapRequestToAsset`\n\nmapRequestToAsset(Request) => Request\n\nMaps the incoming request to the value that will be looked up in Cloudflare's KV\n\nBy default, mapRequestToAsset is set to the exported function [`mapRequestToAsset`](#maprequesttoasset-1). This works for most static site generators, but you can customize this behavior by passing your own function as `mapRequestToAsset`. The function should take a `Request` object as its only argument, and return a new `Request` object with an updated path to be looked up in the asset manifest/KV.\n\nFor SPA mapping pass in the [`serveSinglePageApp`](#servesinglepageapp) function\n\n#### Example\n\nStrip `/docs` from any incoming request before looking up an asset in Cloudflare's KV.\n\n```js\nimport { getAssetFromKV, mapRequestToAsset } from '@cloudflare/kv-asset-handler'\n...\nconst customKeyModifier = request => {\n  let url = request.url\n  //custom key mapping optional\n  url = url.replace('/docs', '').replace(/^\\/+/, '')\n  return mapRequestToAsset(new Request(url, request))\n}\nlet asset = await getAssetFromKV(event, { mapRequestToAsset: customKeyModifier })\n```\n\n#### `cacheControl`\n\ntype: object\n\n`cacheControl` allows you to configure options for both the Cloudflare Cache accessed by your Worker, and the browser cache headers sent along with your Workers' responses. The default values are as follows:\n\n```javascript\nlet cacheControl = {\n\tbrowserTTL: null, // do not set cache control ttl on responses\n\tedgeTTL: 2 * 60 * 60 * 24, // 2 days\n\tbypassCache: false, // do not bypass Cloudflare's cache\n}\n```\n\n##### `browserTTL`\n\ntype: number | null\nnullable: true\n\nSets the `Cache-Control: max-age` header on the response returned from the Worker. By default set to `null` which will not add the header at all.\n\n##### `edgeTTL`\n\ntype: number | null\nnullable: true\n\nSets the `Cache-Control: max-age` header on the response used as the edge cache key. By default set to 2 days (`2 * 60 * 60 * 24`). When null will not cache on the edge at all.\n\n##### `bypassCache`\n\ntype: boolean\n\nDetermines whether to cache requests on Cloudflare's edge cache. By default set to `false` (recommended for production builds). Useful for development when you need to eliminate the cache's effect on testing.\n\n#### `ASSET_NAMESPACE` (required for ES Modules)\n\ntype: KV Namespace Binding\n\nThe binding name to the KV Namespace populated with key/value entries of files for the Worker to serve. By default, Workers Sites uses a [binding to a Workers KV Namespace](https://developers.cloudflare.com/workers/reference/storage/api/#namespaces) named `__STATIC_CONTENT`.\n\nIt is further assumed that this namespace consists of static assets such as HTML, CSS, JavaScript, or image files, keyed off of a relative path that roughly matches the assumed URL pathname of the incoming request.\n\nIn ES Modules format, this argument is required, and can be gotten from `env`.\n\n##### ES Module\n\n```js\nreturn getAssetFromKV(\n\t{\n\t\trequest,\n\t\twaitUntil(promise) {\n\t\t\treturn ctx.waitUntil(promise)\n\t\t},\n\t},\n\t{\n\t\tASSET_NAMESPACE: env.__STATIC_CONTENT,\n\t},\n)\n```\n\n##### Service Worker\n\n```\nreturn getAssetFromKV(event, { ASSET_NAMESPACE: MY_NAMESPACE })\n```\n\n#### `ASSET_MANIFEST` (required for ES Modules)\n\ntype: text blob (JSON formatted) or object\n\nThe mapping of requested file path to the key stored on Cloudflare.\n\nWorkers Sites with Wrangler bundles up a text blob that maps request paths to content-hashed keys that are generated by Wrangler as a cache-busting measure. If this option/binding is not present, the function will fallback to using the raw pathname to look up your asset in KV. If, for whatever reason, you have rolled your own implementation of this, you can include your own by passing a stringified JSON object where the keys are expected paths, and the values are the expected keys in your KV namespace.\n\nIn ES Modules format, this argument is required, and can be imported.\n\n##### ES Module\n\n```js\nimport manifestJSON from '__STATIC_CONTENT_MANIFEST'\nlet manifest = JSON.parse(manifestJSON)\nmanifest['index.html'] = 'index.special.html'\n\nreturn getAssetFromKV(\n\t{\n\t\trequest,\n\t\twaitUntil(promise) {\n\t\t\treturn ctx.waitUntil(promise)\n\t\t},\n\t},\n\t{\n\t\tASSET_MANIFEST: manifest,\n\t\t// ...\n\t},\n)\n```\n\n##### Service Worker\n\n```\nlet assetManifest = { \"index.html\": \"index.special.html\" }\nreturn getAssetFromKV(event, { ASSET_MANIFEST: assetManifest })\n```\n\n#### `defaultMimeType` (optional)\n\ntype: string\n\nThis is the mime type that will be used for files with unrecognized or missing extensions. The default value is `'text/plain'`.\n\nIf you are serving a static site and would like to use extensionless HTML files instead of index.html files, set this to `'text/html'`.\n\n#### `defaultDocument` (optional)\n\ntype: string\n\nThis is the default document that will be concatenated for requests ends in `'/'` or without a valid mime type like `'/about'` or `'/about.me'`. The default value is `'index.html'`.\n\n#### `defaultETag` (optional)\n\ntype: `'strong' | 'weak'`\n\nThis determines the format of the response [ETag header](https://developer.mozilla.org/docs/Web/HTTP/Headers/ETag). If the resource is in the cache, the ETag will always be weakened before being returned.\nThe default value is `'strong'`.\n\n# Helper functions\n\n## `mapRequestToAsset`\n\nmapRequestToAsset(Request) => Request\n\nThe default function for mapping incoming requests to keys in Cloudflare's KV.\n\nTakes any path that ends in `/` or evaluates to an HTML file and appends `index.html` or `/index.html` for lookup in your Workers KV namespace.\n\n## `serveSinglePageApp`\n\nserveSinglePageApp(Request) => Request\n\nA custom handler for mapping requests to a single root: `index.html`. The most common use case is single-page applications - frameworks with in-app routing - such as React Router, VueJS, etc. It takes zero arguments.\n\n```js\nimport { getAssetFromKV, serveSinglePageApp } from '@cloudflare/kv-asset-handler'\n...\nlet asset = await getAssetFromKV(event, { mapRequestToAsset: serveSinglePageApp })\n```\n\n# Cache revalidation and etags\n\nAll responses served from cache (including those with `cf-cache-status: MISS`) include an `etag` response header that identifies the version of the resource. The `etag` value is identical to the path key used in the `ASSET_MANIFEST`. It is updated each time an asset changes and looks like this: `etag: <filename>.<hash of file contents>.<extension>` (ex. `etag: index.54321.html`).\n\nResources served with an `etag` allow browsers to use the `if-none-match` request header to make conditional requests for that resource in the future. This has two major benefits:\n\n- When a request's `if-none-match` value matches the `etag` of the resource in Cloudflare cache, Cloudflare will send a `304 Not Modified` response without a body, saving bandwidth.\n- Changes to a file on the server are immediately reflected in the browser - even when the cache control directive `max-age` is unexpired.\n\n#### Disable the `etag`\n\nTo turn `etags` **off**, you must bypass cache:\n\n```js\n/* Turn etags off */\nlet cacheControl = {\n\tbypassCache: true,\n}\n```\n\n#### Syntax and comparison context\n\n`kv-asset-handler` sets and evaluates etags as [strong validators](https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests#Strong_validation). To preserve `etag` integrity, the format of the value deviates from the [RFC2616 recommendation to enclose the `etag` with quotation marks](https://tools.ietf.org/html/rfc2616#section-3.11). This is intentional. Cloudflare cache applies the `W/` prefix to all `etags` that use quoted-strings -- a process that converts the `etag` to a \"weak validator\" when served to a client.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@cloudflare/kv-asset-handler/-/kv-asset-handler-0.3.0.tgz#11f0af0749a400ddadcca16dcd6f4696d7036991",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@cloudflare/kv-asset-handler/-/kv-asset-handler-0.3.0.tgz",
    "hash": "11f0af0749a400ddadcca16dcd6f4696d7036991",
    "integrity": "sha512-9CB/MKf/wdvbfkUdfrj+OkEwZ5b7rws0eogJ4293h+7b6KX5toPwym+VQKmILafNB9YiehqY0DlNrDcDhdWHSQ==",
    "registry": "npm",
    "packageName": "@cloudflare/kv-asset-handler",
    "cacheIntegrity": "sha512-9CB/MKf/wdvbfkUdfrj+OkEwZ5b7rws0eogJ4293h+7b6KX5toPwym+VQKmILafNB9YiehqY0DlNrDcDhdWHSQ== sha1-EfCvB0mkAN2tzKFtzW9GltcDaZE="
  },
  "registry": "npm",
  "hash": "11f0af0749a400ddadcca16dcd6f4696d7036991"
}