{
  "manifest": {
    "name": "@vercel/nft",
    "version": "0.23.1",
    "repository": {
      "type": "git",
      "url": "https://github.com/vercel/nft.git"
    },
    "license": "MIT",
    "main": "./out/index.js",
    "types": "./out/index.d.ts",
    "bin": {
      "nft": "out/cli.js"
    },
    "scripts": {
      "build": "tsc",
      "prepublishOnly": "tsc && rm out/utils/*.d.ts && rm out/tsconfig.tsbuildinfo",
      "test": "jest --verbose",
      "test-verbose": "tsc --sourceMap && jest --verbose --coverage --globals \"{\\\"coverage\\\":true}\""
    },
    "files": [
      "out"
    ],
    "dependencies": {
      "@mapbox/node-pre-gyp": "^1.0.5",
      "@rollup/pluginutils": "^4.0.0",
      "acorn": "^8.6.0",
      "async-sema": "^3.1.1",
      "bindings": "^1.4.0",
      "estree-walker": "2.0.2",
      "glob": "^7.1.3",
      "graceful-fs": "^4.2.9",
      "micromatch": "^4.0.2",
      "node-gyp-build": "^4.2.2",
      "resolve-from": "^5.0.0"
    },
    "devDependencies": {
      "@azure/cosmos": "^2.1.7",
      "@bugsnag/js": "^6.3.2",
      "@ffmpeg-installer/ffmpeg": "^1.0.19",
      "@google-cloud/bigquery": "^4.1.4",
      "@google-cloud/firestore": "^4.11.0",
      "@sentry/node": "^5.5.0",
      "@tensorflow/tfjs-node": "^3.12.0",
      "@tpluscode/sparql-builder": "^0.3.12",
      "@types/bindings": "^1.3.0",
      "@types/estree": "^0.0.47",
      "@types/glob": "^7.1.2",
      "@types/graceful-fs": "^4.1.5",
      "@types/micromatch": "^4.0.1",
      "@types/node": "^14.14.37",
      "analytics-node": "^3.4.0-beta.1",
      "apollo-server-express": "^2.14.2",
      "argon2": "^0.27.2",
      "auth0": "^3.0.1",
      "axios": "^0.21.2",
      "azure-storage": "^2.10.3",
      "bcrypt": "^5.0.1",
      "browserify-middleware": "^8.1.1",
      "bull": "^3.10.0",
      "bullmq": "^1.74.2",
      "camaro": "^6.1.0",
      "canvas": "^2.10.2",
      "chromeless": "^1.5.2",
      "consolidate": "^0.15.1",
      "copy": "^0.3.2",
      "cowsay": "^1.4.0",
      "es-get-iterator": "^1.1.0",
      "esbuild": "^0.14.12",
      "esm": "^3.2.25",
      "express": "^4.17.3",
      "fast-glob": "^3.1.1",
      "fetch-h2": "^2.2.0",
      "firebase": "^7",
      "firebase-admin": "^11.4.1",
      "fluent-ffmpeg": "^2.1.2",
      "geo-tz": "^7.0.1",
      "graphql": "^14.4.2",
      "highlights": "^3.1.6",
      "hot-shots": "^6.3.0",
      "ioredis": "^4.11.1",
      "isomorphic-unfetch": "^3.0.0",
      "jest": "^27.4.5",
      "jimp": "^0.6.4",
      "jugglingdb": "^2.0.1",
      "koa": "^2.7.0",
      "leveldown": "^5.6.0",
      "lighthouse": "^5.1.0",
      "loopback": "^3.26.0",
      "mailgun": "^0.5.0",
      "mariadb": "^2.0.5",
      "memcached": "^2.2.2",
      "microtime": "^3.0.0",
      "mongoose": "^5.13.20",
      "mysql": "^2.17.1",
      "npm": "^6.14.6",
      "oracledb": "^4.2.0",
      "paraphrase": "1.8.0",
      "passport": "^0.6.0",
      "passport-google-oauth": "^2.0.0",
      "passport-trakt": "^1.0.4",
      "path-platform": "^0.11.15",
      "pdf2json": "^2.0.0",
      "pdfkit": "^0.10.0",
      "pg": "^7.11.0",
      "phantomjs-prebuilt": "^2.1.16",
      "pixelmatch": "^5.2.1",
      "playwright-core": "^1.17.1",
      "polyfill-library": "3.93.0",
      "prismjs": "^1.27.0",
      "pug": "^3.0.1",
      "react": "^16.14.0",
      "react-dom": "^16.14.0",
      "redis": "^3.1.1",
      "remark-parse": "^10.0.0",
      "remark-prism": "^1.3.6",
      "rimraf": "^3.0.2",
      "rxjs": "^6.5.2",
      "saslprep": "^1.0.3",
      "semver": "^7.5.2",
      "sequelize": "^6.29.0",
      "sharp": "^0.30.5",
      "socket.io": "^2.4.0",
      "socket.io-client": "^2.2.0",
      "stripe": "^7.4.0",
      "swig": "^1.4.2",
      "tiny-json-http": "^7.1.2",
      "twilio": "^3.84.0",
      "typescript": "^4.8.4",
      "uglify-js": "^3.6.0",
      "unified": "^10.1.0",
      "vm2": "^3.9.18",
      "vue": "^2.6.10",
      "vue-server-renderer": "^2.6.10",
      "when": "^3.7.8"
    },
    "engines": {
      "node": ">=14"
    },
    "publishConfig": {
      "access": "public"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@vercel-nft-0.23.1-f17c5f9d3f3a0178ea25eb7397a14618c00529bf-integrity/node_modules/@vercel/nft/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Node File Trace\n\n[![CI Status](https://github.com/vercel/nft/actions/workflows/ci.yml/badge.svg)](https://github.com/vercel/nft/actions/workflows/ci.yml)\n\nUsed to determine exactly which files (including `node_modules`) are necessary for the application runtime.\n\nThis is similar to [@vercel/ncc](https://npmjs.com/package/@vercel/ncc) except there is no bundling performed and therefore no reliance on webpack. This achieves the same tree-shaking benefits without moving any assets or binaries.\n\n## Usage\n\n### Installation\n```bash\nnpm i @vercel/nft\n```\n\n### Usage\n\nProvide the list of source files as input:\n\n```js\nconst { nodeFileTrace } = require('@vercel/nft');\nconst files = ['./src/main.js', './src/second.js'];\nconst { fileList } = await nodeFileTrace(files);\n```\n\nThe list of files will include all `node_modules` modules and assets that may be needed by the application code.\n\n### Options\n\n#### Base\n\nThe base path for the file list - all files will be provided as relative to this base.\n\nBy default the `process.cwd()` is used:\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  base: process.cwd()\n}\n```\n\nAny files/folders above the `base` are ignored in the listing and analysis.\n\n#### Process Cwd\n\nWhen applying analysis certain functions rely on the `process.cwd()` value, such as `path.resolve('./relative')` or even a direct `process.cwd()`\ninvocation.\n\nSetting the `processCwd` option allows this analysis to be guided to the right path to ensure that assets are correctly detected.\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  processCwd: path.resolve(__dirname)\n}\n```\n\nBy default `processCwd` is the same as `base`.\n\n#### Exports & Imports\n\nBy default tracing of the [Node.js \"exports\" and \"imports\" fields](https://nodejs.org/dist/latest-v14.x/docs/api/esm.html#esm_package_entry_points) is supported, with the `\"node\"`, `\"require\"`, `\"import\"` and `\"default\"` conditions traced as defined.\n\nAlternatively the explicit list of conditions can be provided:\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  conditions: ['node', 'production']\n});\n```\n\nOnly the `\"node\"` export should be explicitly included (if needed) when specifying the exact export condition list. The `\"require\"`, `\"import\"` and `\"default\"` conditions will always be traced as defined, no matter what custom conditions are set.\n\n#### Exports Only\n\nWhen tracing exports the `\"main\"` / index field will still be traced for Node.js versions without `\"exports\"` support.\n\nThis can be disabled with the `exportsOnly` option:\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  exportsOnly: true\n});\n```\n\nAny package with `\"exports\"` will then only have its exports traced, and the main will not be included at all. This can reduce the output size when targeting [Node.js 12.17.0](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md#12.17.0) or newer.\n\n#### Paths\n\n> Status: Experimental. May change at any time.\n\nCustom resolution path definitions to use.\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  paths: {\n    'utils/': '/path/to/utils/'\n  }\n});\n```\n\nTrailing slashes map directories, exact paths map exact only.\n\n#### Hooks\n\nThe following FS functions can be hooked by passing them as options:\n\n* `readFile(path): Promise<string>`\n* `stat(path): Promise<FS.Stats>`\n* `readlink(path): Promise<string>`\n* `resolve(id: string, parent: string): Promise<string | string[]>`\n\n##### Advanced Resolving\n\nWhen providing a custom resolve hook you are responsible for returning one or more absolute paths to resolved files based on the `id` input. However it may be the case that you only want to augment or override the resolve behavior in certain cases. You can use `nft`'s underlying resolver by importing it. The builtin `resolve` function expects additional arguments that need to be forwarded from the hook\n\n* `resolve(id: string, parent: string, job: Job, isCjs: boolean): Promise<string | string[]>`\n\nHere is an example showing one id being resolved to a bespoke path while all other paths being resolved by the built-in resolver\n```js\nconst { nodeFileTrace, resolve } = require('@vercel/nft');\nconst files = ['./src/main.js', './src/second.js'];\nconst { fileList } = await nodeFileTrace(files, { resolve: async (id, parent, job, isCjs) => {\n  if (id === './src/main.js') {\n    return '/path/to/some/resolved/main/file.js'\n  } else {\n    return resolve(id, parent, job, isCjs)\n  }\n}});\n```\n\n#### TypeScript\n\nThe internal resolution supports resolving `.ts` files in traces by default.\n\nBy its nature of integrating into existing build systems, the TypeScript\ncompiler is not included in this project - rather the TypeScript transform\nlayer requires separate integration into the `readFile` hook.\n\n#### File IO Concurrency\n\nIn some large projects, the file tracing logic may process many files at the same time. In this case, if you do not limit the number of concurrent files IO, OOM problems are likely to occur.\n\nWe use a default of 1024 concurrency to balance performance and memory usage for fs operations. You can increase this value to a higher number for faster speed, but be aware of the memory issues if the concurrency is too high.\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  fileIOConcurrency: 2048,\n});\n```\n\n#### Analysis\n\nAnalysis options allow customizing how much analysis should be performed to exactly work out the dependency list.\n\nBy default as much analysis as possible is done to ensure no possibly needed files are left out of the trace.\n\nTo disable all analysis, set `analysis: false`. Alternatively, individual analysis options can be customized via:\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  // default\n  analysis: {\n    // whether to glob any analysis like __dirname + '/dir/' or require('x/' + y)\n    // that might output any file in a directory\n    emitGlobs: true,\n    // whether __filename and __dirname style\n    // expressions should be analyzed as file references\n    computeFileReferences: true,\n    // evaluate known bindings to assist with glob and file reference analysis\n    evaluatePureExpressions: true,\n  }\n});\n```\n\n#### Ignore\n\nCustom ignores can be provided to skip file inclusion (and consequently analysis of the file for references in turn as well).\n\n```js\nconst { fileList } = await nodeFileTrace(files, {\n  ignore: ['./node_modules/pkg/file.js']\n});\n```\n\nIgnore will also accept a function or globs.\n\nNote that the path provided to ignore is relative to `base`.\n\n#### Cache\n\nTo persist the file cache between builds, pass an empty `cache` object:\n\n```js\nconst cache = Object.create(null);\nconst { fileList } = await nodeFileTrace(['index.ts'], { cache });\n// later:\n{\n  const { fileList } = await nodeFileTrace(['index.ts'], { cache });\n}\n```\n\nNote that cache invalidations are not supported so the assumption is that the file system is not changed between runs.\n\n#### Reasons\n\nTo get the underlying reasons for individual files being included, a `reasons` object is also provided by the output:\n\n```js\nconst { fileList, reasons } = await nodeFileTrace(files);\n```\n\nThe `reasons` output will then be an object of the following form:\n\n```js\n{\n  [file: string]: {\n    type: 'dependency' | 'asset' | 'sharedlib',\n    ignored: true | false,\n    parents: string[]\n  }\n}\n```\n\n`reasons` also includes files that were ignored as `ignored: true`, with their `ignoreReason`.\n\nEvery file is included because it is referenced by another file. The `parents` list will contain the list of all files that caused this file to be included.\n",
    "description": "[![CI Status](https://github.com/vercel/nft/actions/workflows/ci.yml/badge.svg)](https://github.com/vercel/nft/actions/workflows/ci.yml)",
    "licenseText": "Copyright 2019 Vercel, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@vercel/nft/-/nft-0.23.1.tgz#f17c5f9d3f3a0178ea25eb7397a14618c00529bf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@vercel/nft/-/nft-0.23.1.tgz",
    "hash": "f17c5f9d3f3a0178ea25eb7397a14618c00529bf",
    "integrity": "sha512-NE0xSmGWVhgHF1OIoir71XAd0W0C1UE3nzFyhpFiMr3rVhetww7NvM1kc41trBsPG37Bh+dE5FYCTMzM/gBu0w==",
    "registry": "npm",
    "packageName": "@vercel/nft",
    "cacheIntegrity": "sha512-NE0xSmGWVhgHF1OIoir71XAd0W0C1UE3nzFyhpFiMr3rVhetww7NvM1kc41trBsPG37Bh+dE5FYCTMzM/gBu0w== sha1-8XxfnT86AXjqJetzl6FGGMAFKb8="
  },
  "registry": "npm",
  "hash": "f17c5f9d3f3a0178ea25eb7397a14618c00529bf"
}