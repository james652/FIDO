{
  "manifest": {
    "name": "napi-wasm",
    "version": "1.1.0",
    "description": "An implementation of napi for wasm",
    "main": "index.mjs",
    "exports": {
      "import": "./index.mjs",
      "require": "./index.js"
    },
    "files": [
      "index.js",
      "index.mjs"
    ],
    "scripts": {
      "prepublishOnly": "sed 's/^export //g' index.mjs > index.js && echo '\nexports.Environment = Environment;\nexports.napi = napi;' >> index.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/devongovett/napi-wasm.git"
    },
    "keywords": [
      "napi",
      "wasm",
      "node-api",
      "rust"
    ],
    "author": {
      "name": "Devon Govett",
      "email": "devongovett@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/devongovett/napi-wasm/issues"
    },
    "homepage": "https://github.com/devongovett/napi-wasm#readme",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-napi-wasm-1.1.0-bbe617823765ae9c1bc12ff5942370eae7b2ba4e-integrity/node_modules/napi-wasm/package.json",
    "readmeFilename": "README.md",
    "readme": "# napi-wasm\n\nAn implementation of the [napi](https://nodejs.org/api/n-api.html) API for WASM. Enables using some native Node modules in browsers and other environments.\n\n## Setup\n\nTo use napi-wasm, there are a few requirements:\n\n1. Configure your linker to export an indirect function table. With ldd, this is the `--export-table` flag. This enables JavaScript to call callback functions registered by WASM. It is exposed in the WebAssembly exports as `__indirect_function_table`.\n2. Export a function from your WASM build named `napi_register_module_v1` (Node's default), or `napi_register_wasm_v1` for WASM-specific builds. This is called during initialization to setup the `exports` object for your module. It receives an environment and an exports object pointer as arguments, which you can add properties to.\n3. Include a function named `napi_wasm_malloc` in your WASM build. This is called from JavaScript by napi-wasm to allocate memory in the WASM heap. It should accept a `uint32` size argument indicating the number of bytes to allocate, and return a `uint8` pointer to allocated memory.\n4. Compile for the `wasm32-unknown-unknown` target.\n\n### In Rust\n\nThe above steps should apply for any programming language, but here's an example in Rust. First, define a `napi_wasm_malloc` function so JavaScript can allocate memory in the WASM heap using the default allocator.\n\n```rust\nuse std::alloc::{alloc, Layout};\n\n#[no_mangle]\npub extern \"C\" fn napi_wasm_malloc(size: usize) -> *mut u8 {\n  let align = std::mem::align_of::<usize>();\n  if let Ok(layout) = Layout::from_size_align(size, align) {\n    unsafe {\n      if layout.size() > 0 {\n        let ptr = alloc(layout);\n        if !ptr.is_null() {\n          return ptr;\n        }\n      } else {\n        return align as *mut u8;\n      }\n    }\n  }\n\n  std::process::abort();\n}\n```\n\nNext, implement `napi_register_wasm_v1` to register your module exports. We'll use the [napi-rs](https://github.com/napi-rs/napi-rs) bindings in this example to make it a bit nicer than calling C APIs directly. Note that the napi-rs `#[module_exports]` macro currently doesn't work in WASM because Rust doesn't support ctor setup functions in WASM targets yet, so we'll need to do this manually.\n\n```rust\nuse napi::{Env, JsObject, NapiValue};\n\n#[no_mangle]\npub unsafe extern \"C\" fn napi_register_wasm_v1(raw_env: napi::sys::napi_env, raw_exports: napi::sys::napi_value) {\n  let env = Env::from_raw(raw_env);\n  let exports = JsObject::from_raw_unchecked(raw_env, raw_exports);\n\n  exports.create_named_method(\"transform\", transform);\n}\n\n#[js_function(1)]\nfn transform(ctx: CallContext) -> napi::Result<JsUnknown> {\n  // ...\n}\n```\n\nTo compile, you need to export a function table and use the correct target.\n\n```shell\n RUSTFLAGS=\"-C link-arg=--export-table\" cargo build --target wasm32-unknown-unknown\n```\n\nThis will output a file in `target/wasm32-unknown-unknown/debug/YOUR_CRATE.wasm` which you can load in a JavaScript environment.\n\nYou can also put the rust flags in a `.cargo/config.toml` file so you don't need to provide the environment variable each time you run `cargo build`.\n\n```toml\n[target.wasm32-unknown-unknown]\nrustflags = [\"-C\", \"link-arg=--export-table\"]\n```\n\n### Loading\n\nTo load a WASM file and initialize a napi environment, you'll need to import the `napi-wasm` package. You instantiate a WASM module as usual, providing `napi` as the `env` import key. This provides the napi functions for your WASM module to use.\n\nThen, pass the WASM instance to the `Environment` constructor to setup a napi environment. This will call `napi_register_wasm_v1` or `napi_register_module_v1` to setup the exports object. Then you can call functions on the exports object as you would in Node.\n\n```js\nimport { Environment, napi } from 'napi-wasm';\n\n// Construct a URL and instantiate a WebAssembly module as usual.\nconst url = new URL('path/to/lib.wasm', import.meta.url);\nconst { instance } = await WebAssembly.instantiateStreaming(fetch(url), {\n  env: napi\n});\n\n// Create an environment.\nlet env = new Environment(instance);\nlet exports = env.exports;\n\n// Use exports as usual!\nexports.transform({\n  // ...\n});\n```\n\nWhen you are done with an `Environment`, call the `destroy()` function to clean up memory.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/napi-wasm/-/napi-wasm-1.1.0.tgz#bbe617823765ae9c1bc12ff5942370eae7b2ba4e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/napi-wasm/-/napi-wasm-1.1.0.tgz",
    "hash": "bbe617823765ae9c1bc12ff5942370eae7b2ba4e",
    "integrity": "sha512-lHwIAJbmLSjF9VDRm9GoVOy9AGp3aIvkjv+Kvz9h16QR3uSVYH78PNQUnT2U4X53mhlnV2M7wrhibQ3GHicDmg==",
    "registry": "npm",
    "packageName": "napi-wasm",
    "cacheIntegrity": "sha512-lHwIAJbmLSjF9VDRm9GoVOy9AGp3aIvkjv+Kvz9h16QR3uSVYH78PNQUnT2U4X53mhlnV2M7wrhibQ3GHicDmg== sha1-u+YXgjdlrpwbwS/1lCNw6ueyuk4="
  },
  "registry": "npm",
  "hash": "bbe617823765ae9c1bc12ff5942370eae7b2ba4e"
}