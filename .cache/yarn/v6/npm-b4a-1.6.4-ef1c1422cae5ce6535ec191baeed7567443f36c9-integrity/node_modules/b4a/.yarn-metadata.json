{
  "manifest": {
    "name": "b4a",
    "version": "1.6.4",
    "description": "Bridging the gap between buffers and typed arrays",
    "main": "index.js",
    "files": [
      "browser.js",
      "index.js",
      "lib"
    ],
    "browser": {
      "./index.js": "./browser.js"
    },
    "scripts": {
      "test": "standard && brittle test/*.mjs"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/holepunchto/b4a.git"
    },
    "author": {
      "name": "Kasper Isager Dalsgar√∞",
      "email": "kasper@funktionel.co"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/holepunchto/b4a/issues"
    },
    "homepage": "https://github.com/holepunchto/b4a#readme",
    "devDependencies": {
      "brittle": "^1.3.5",
      "nanobench": "^2.1.1",
      "standard": "^16.0.3"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-b4a-1.6.4-ef1c1422cae5ce6535ec191baeed7567443f36c9-integrity/node_modules/b4a/package.json",
    "readmeFilename": "README.md",
    "readme": "# Buffer for Array\n\nBuffer for Array (B4A) provides a set of functions for bridging the gap between the Node.js `Buffer` class and the `Uint8Array` class. A browser compatibility layer is also included, making it possible to use B4A in both Node.js and browsers without having to worry about whether you're dealing with buffers or typed arrays.\n\n## Installation\n\n```sh\nnpm install b4a\n```\n\n## API\n\n#### `b4a.isBuffer(value)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferisbufferobj\n\nThis will also return `true` when passed a `Uint8Array`.\n\n#### `b4a.isEncoding(encoding)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferisencodingencoding\n\n#### `b4a.alloc(size[, fill[, encoding]])`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferallocsize-fill-encoding\n\n#### `b4a.allocUnsafe(size)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize\n\n#### `b4a.allocUnsafeSlow(size)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferallocunsafeslowsize\n\n#### `b4a.byteLength(string)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferbytelengthstring-encoding\n\n#### `b4a.compare(buf1, buf2)`\n\nSee https://nodejs.org/api/buffer.html#static-method-buffercomparebuf1-buf2\n\n#### `b4a.concat(buffers[, totalLength])`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferconcatlist-totallength\n\n#### `b4a.copy(source, target[, targetStart[, sourceStart[, sourceEnd]]])`\n\nSee https://nodejs.org/api/buffer.html#bufcopytarget-targetstart-sourcestart-sourceend\n\n#### `b4a.equals(buf1, buf2)`\n\nSee https://nodejs.org/api/buffer.html#bufequalsotherbuffer\n\n#### `b4a.fill(buffer, value[, offset[, end]][, encoding])`\n\nSee https://nodejs.org/api/buffer.html#buffillvalue-offset-end-encoding\n\n#### `b4a.from(array)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferfromarray\n\n#### `b4a.from(arrayBuffer[, byteOffset[, length]])`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferfromarraybuffer-byteoffset-length\n\n#### `b4a.from(buffer)`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferfrombuffer\n\n#### `b4a.from(string[, encoding])`\n\nSee https://nodejs.org/api/buffer.html#static-method-bufferfromstring-encoding\n\n#### `b4a.includes(buffer, value[, byteOffset][, encoding])`\n\nSee https://nodejs.org/api/buffer.html#bufincludesvalue-byteoffset-encoding\n\n#### `b4a.indexOf(buffer, value[, byteOffset][, encoding])`\n\nSee https://nodejs.org/api/buffer.html#bufindexofvalue-byteoffset-encoding\n\n#### `b4a.lastIndexOf(buffer, value[, byteOffset][, encoding])`\n\nSee https://nodejs.org/api/buffer.html#buflastindexofvalue-byteoffset-encoding\n\n#### `b4a.swap16(buffer)`\n\nSee https://nodejs.org/api/buffer.html#bufswap16\n\n#### `b4a.swap32(buffer)`\n\nSee https://nodejs.org/api/buffer.html#bufswap32\n\n#### `b4a.swap64(buffer)`\n\nSee https://nodejs.org/api/buffer.html#bufswap64\n\n#### `b4a.toBuffer(buffer)`\n\nConvert a buffer to its canonical representation. In Node.js, the canonical representation is a `Buffer`. In the browser, the canonical representation is a `Uint8Array`.\n\n#### `b4a.toString(buffer, [encoding[, start[, end]]])`\n\nSee https://nodejs.org/api/buffer.html#buftostringencoding-start-end\n\n#### `b4a.write(buffer, string[, offset[, length]][, encoding])`\n\nSee https://nodejs.org/api/buffer.html#bufwritestring-offset-length-encoding\n\n#### `b4a.writeDoubleLE(buffer, value[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufwritedoublelevalue-offset\n\n#### `b4a.writeFloatLE(buffer, value[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufwritefloatlevalue-offset\n\n#### `b4a.writeUInt32LE(buffer, value[, offset])`\n\nhttps://nodejs.org/api/buffer.html#bufwriteuint32levalue-offset\n\n#### `b4a.writeInt32LE(buffer, value[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufwriteint32levalue-offset\n\n#### `b4a.readDoubleLE(buffer[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufreaddoubleleoffset\n\n#### `b4a.readFloatLE(buffer[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufreadfloatleoffset\n\n#### `b4a.readUInt32LE(buffer[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufreaduint32leoffset\n\n#### `b4a.readInt32LE(buffer[, offset])`\n\nSee https://nodejs.org/api/buffer.html#bufreadint32leoffset\n\n## License\n\nISC\n",
    "licenseText": "ISC License\n\nCopyright (c) 2021 Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/b4a/-/b4a-1.6.4.tgz#ef1c1422cae5ce6535ec191baeed7567443f36c9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/b4a/-/b4a-1.6.4.tgz",
    "hash": "ef1c1422cae5ce6535ec191baeed7567443f36c9",
    "integrity": "sha512-fpWrvyVHEKyeEvbKZTVOeZF3VSKKWtJxFIxX/jaVPf+cLbGUSitjb49pHLqPV2BUNNZ0LcoeEGfE/YCpyDYHIw==",
    "registry": "npm",
    "packageName": "b4a",
    "cacheIntegrity": "sha512-fpWrvyVHEKyeEvbKZTVOeZF3VSKKWtJxFIxX/jaVPf+cLbGUSitjb49pHLqPV2BUNNZ0LcoeEGfE/YCpyDYHIw== sha1-7xwUIsrlzmU17Bkbru11Z0Q/Nsk="
  },
  "registry": "npm",
  "hash": "ef1c1422cae5ce6535ec191baeed7567443f36c9"
}