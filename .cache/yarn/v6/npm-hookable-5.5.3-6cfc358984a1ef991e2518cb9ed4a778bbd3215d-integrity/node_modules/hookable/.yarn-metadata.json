{
  "manifest": {
    "name": "hookable",
    "version": "5.5.3",
    "description": "Awaitable hook system",
    "keywords": [
      "hook",
      "hookable",
      "plugin",
      "tapable",
      "tappable"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/hookable.git"
    },
    "license": "MIT",
    "exports": {
      "import": "./dist/index.mjs",
      "types": "./dist/index.d.ts",
      "require": "./dist/index.cjs"
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist"
    ],
    "devDependencies": {
      "@types/node": "^18.15.11",
      "@vitest/coverage-c8": "^0.29.8",
      "changelogen": "^0.5.2",
      "eslint": "^8.37.0",
      "eslint-config-unjs": "^0.1.0",
      "expect-type": "^0.15.0",
      "prettier": "^2.8.7",
      "typescript": "^5.0.2",
      "unbuild": "^1.1.2",
      "vite": "^4.2.1",
      "vitest": "^0.29.8"
    },
    "packageManager": "pnpm@8.0.0",
    "scripts": {
      "build": "unbuild",
      "dev": "vitest",
      "lint": "eslint --cache --ext .ts,.js,.mjs,.cjs . && prettier -c src test",
      "lint:fix": "eslint --cache --ext .ts,.js,.mjs,.cjs . --fix && prettier -c src test -w",
      "prepublish": "pnpm build",
      "release": "pnpm test && pnpm build && changelogen --release --push && pnpm publish",
      "test": "pnpm lint && vitest run --coverage",
      "test:types": "tsc --noEmit"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-hookable-5.5.3-6cfc358984a1ef991e2518cb9ed4a778bbd3215d-integrity/node_modules/hookable/package.json",
    "readmeFilename": "README.md",
    "readme": "# Hookable\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n\nAwaitable hooks system.\n\n## Install\n\nUsing yarn:\n\n```bash\nyarn add hookable\n```\n\nUsing npm:\n\n```bash\nnpm install hookable\n```\n\n## Usage\n\n**Method A: Create a hookable instance:**\n\n```js\nimport { createHooks } from 'hookable'\n\n// Create a hookable instance\nconst hooks = createHooks()\n\n// Hook on 'hello'\nhooks.hook('hello', () => { console.log('Hello World' )})\n\n// Call 'hello' hook\nhooks.callHook('hello')\n```\n\n**Method B: Extend your base class from Hookable:**\n\n```js\nimport { Hookable } from 'hookable'\n\nexport default class FooLib extends Hookable {\n  constructor() {\n    // Call to parent to initialize\n    super()\n    // Initialize Hookable with custom logger\n    // super(consola)\n  }\n\n  async someFunction() {\n    // Call and wait for `hook1` hooks (if any) sequential\n    await this.callHook('hook1')\n  }\n}\n```\n\n**Inside plugins, register for any hook:**\n\n```js\nconst lib = new FooLib()\n\n// Register a handler for `hook2`\nlib.hook('hook2', async () => { /* ... */ })\n\n// Register multiply handlers at once\nlib.addHooks({\n  hook1: async () => { /* ... */ },\n  hook2: [ /* can be also an array */ ]\n})\n```\n\n**Unregistering hooks:**\n\n```js\nconst lib = new FooLib()\n\nconst hook0 = async () => { /* ... */ }\nconst hook1 = async () => { /* ... */ }\nconst hook2 = async () => { /* ... */ }\n\n// The hook() method returns an \"unregister\" function\nconst unregisterHook0 = lib.hook('hook0', hook0)\nconst unregisterHooks1and2 = lib.addHooks({ hook1, hook2 })\n\n/* ... */\n\nunregisterHook0()\nunregisterHooks1and2()\n\n// or\n\nlib.removeHooks({ hook0, hook1 })\nlib.removeHook('hook2', hook2)\n```\n\n**Triggering a hook handler once:**\n\n```js\nconst lib = new FooLib()\n\nconst unregister = lib.hook('hook0', async () => {\n  // Unregister as soon as the hook is executed\n  unregister()\n\n  /* ... */\n})\n```\n\n\n## Hookable class\n\n### `constructor()`\n\n### `hook (name, fn)`\n\nRegister a handler for a specific hook. `fn` must be a function.\n\nReturns an `unregister` function that, when called, will remove the registered handler.\n\n### `hookOnce (name, fn)`\n\nSimilar to `hook` but unregisters hook once called.\n\nReturns an `unregister` function that, when called, will remove the registered handler before first call.\n\n### `addHooks(configHooks)`\n\nFlatten and register hooks object.\n\nExample:\n\n```js\nhookable.addHooks({\n  test: {\n    before: () => {},\n    after: () => {}\n  }\n})\n\n```\n\nThis registers `test:before` and `test:after` hooks at bulk.\n\nReturns an `unregister` function that, when called, will remove all the registered handlers.\n\n### `async callHook (name, ...args)`\n\nUsed by class itself to **sequentially** call handlers of a specific hook.\n\n### `callHookWith (name, callerFn)`\n\nIf you need custom control over how hooks are called, you can provide a custom function that will receive an array of handlers of a specific hook.\n\n`callerFn` if a callback function that accepts two arguments, `hooks` and `args`:\n- `hooks`: Array of user hooks to be called\n- `args`: Array of arguments that should be passed each time calling a hook\n\n### `deprecateHook (old, name)`\n\nDeprecate hook called `old` in favor of `name` hook.\n\n### `deprecateHooks (deprecatedHooks)`\n\nDeprecate all hooks from an object (keys are old and values or newer ones).\n\n### `removeHook (name, fn)`\n\nRemove a particular hook handler, if the `fn` handler is present.\n\n### `removeHooks (configHooks)`\n\nRemove multiple hook handlers.\n\nExample:\n\n```js\nconst handler = async () => { /* ... */ }\n\nhookable.hook('test:before', handler)\nhookable.addHooks({ test: { after: handler } })\n\n// ...\n\nhookable.removeHooks({\n  test: {\n    before: handler,\n    after: handler\n  }\n})\n```\n\n### `removeAllHooks`\n\nRemove all hook handlers.\n\n### `beforeEach (syncCallback)`\n\nRegisters a (sync) callback to be called before each hook is being called.\n\n```js\nhookable.beforeEach((event) => { console.log(`${event.name} hook is being called with ${event.args}`)}`)\nhookable.hook('test', () => { console.log('running test hook') })\n\n// test hook is being called with []\n// running test hook\nawait hookable.callHook('test')\n```\n\n### `afterEach (syncCallback)`\n\nRegisters a (sync) callback to be called after each hook is being called.\n\n```js\nhookable.afterEach((event) => { console.log(`${event.name} hook called with ${event.args}`)}`)\nhookable.hook('test', () => { console.log('running test hook') })\n\n// running test hook\n// test hook called with []\nawait hookable.callHook('test')\n```\n\n### `createDebugger`\n\nAutomatically logs each hook that is called and how long it takes to run.\n\n```js\nconst debug = hookable.createDebugger(hooks, { tag: 'something' })\n\nhooks.callHook('some-hook', 'some-arg')\n// [something] some-hook: 0.21ms\n\ndebug.close()\n```\n\n## Migration\n\n### From `4.x` to `5.x`\n\n- Type checking improved. You can use `Hookable<T>` or `createHooks<T>()` to provide types interface **([c2e1e22](https://github.com/unjs/hookable/commit/c2e1e223d16e7bf87117cd8d72ad3ba211a333d8))**\n- We no longer provide an IE11 compatible umd build. Instead, you should use an ESM-aware bundler such as webpack or rollup to transpile if needed.\n- Logger param is dropped. We use `console.warn` by default for deprecated hooks.\n- Package now uses named exports. You should import `{ Hookable }` instead of  `Hookable` or use new `createHooks` util\n- `mergeHooks` util is exported standalone. You should replace `Hookable.mergeHooks` and `this.mergeHooks` with new `{ mergeHooks }` export\n- In versions < 5.0.0 when using `callHook` if an error happened by one of the hook callbacks, we was handling errors globally and call global `error` hook + `console.error` instead and resolve `callHook` promise!  This sometimes makes confusing behavior when we think code worked but it didn't. v5 introduced a breaking change that when a hook throws an error, `callHook` also rejects instead of a global `error` event. This means you should be careful to handle all errors when using `callHook` now.\n\n## Credits\n\nExtracted from [Nuxt](https://github.com/nuxt/nuxt.js) hooks system originally introduced by [SÃ©bastien Chopin](https://github.com/Atinux)\n\nThanks to [Joe Paice](https://github.com/RGBboy) for donating [hookable](https://www.npmjs.com/package/hookable) package name.\n\n## License\n\nMIT - Made with ðŸ’–\n\n<!-- Badges -->\n[npm-version-src]: https://img.shields.io/npm/v/hookable?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-version-href]: https://npmjs.com/package/hookable\n[npm-downloads-src]: https://img.shields.io/npm/dm/hookable?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-downloads-href]: https://npmjs.com/package/hookable\n[codecov-src]: https://img.shields.io/codecov/c/gh/unjs/hookable/main?style=flat&colorA=18181B&colorB=F0DB4F\n[codecov-href]: https://codecov.io/gh/unjs/h3\n[bundle-src]: https://img.shields.io/bundlephobia/minzip/hookable?style=flat&colorA=18181B&colorB=F0DB4F\n[bundle-href]: https://bundlephobia.com/result?p=hookable\n[license-src]: https://img.shields.io/github/license/unjs/hookable.svg?style=flat&colorA=18181B&colorB=F0DB4F\n[license-href]: https://github.com/unjs/hookable/blob/main/LICENSE\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Pooya Parsa <pooya@pi0.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hookable/-/hookable-5.5.3.tgz#6cfc358984a1ef991e2518cb9ed4a778bbd3215d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hookable/-/hookable-5.5.3.tgz",
    "hash": "6cfc358984a1ef991e2518cb9ed4a778bbd3215d",
    "integrity": "sha512-Yc+BQe8SvoXH1643Qez1zqLRmbA5rCL+sSmk6TVos0LWVfNIB7PGncdlId77WzLGSIB5KaWgTaNTs2lNVEI6VQ==",
    "registry": "npm",
    "packageName": "hookable",
    "cacheIntegrity": "sha512-Yc+BQe8SvoXH1643Qez1zqLRmbA5rCL+sSmk6TVos0LWVfNIB7PGncdlId77WzLGSIB5KaWgTaNTs2lNVEI6VQ== sha1-bPw1iYSh75keJRjLntSneLvTIV0="
  },
  "registry": "npm",
  "hash": "6cfc358984a1ef991e2518cb9ed4a778bbd3215d"
}