{
  "manifest": {
    "name": "ultrahtml",
    "type": "module",
    "version": "1.5.2",
    "types": "./dist/index.d.ts",
    "main": "./dist/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/natemoo-re/ultrahtml"
    },
    "bugs": {
      "url": "https://github.com/natemoo-re/ultrahtml/issues"
    },
    "homepage": "https://github.com/natemoo-re/ultrahtml#README",
    "files": [
      "selector.d.ts",
      "transform.d.ts",
      "jsx-runtime.d.ts",
      "transformers",
      "dist",
      "CHANGELOG.md"
    ],
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.js"
      },
      "./package.json": "./package.json",
      "./selector": {
        "types": "./dist/selector.d.ts",
        "import": "./dist/selector.js"
      },
      "./transformers/*": {
        "types": "./dist/transformers/*.d.ts",
        "import": "./dist/transformers/*.js"
      },
      "./jsx-runtime": {
        "types": "./dist/jsx-runtime/index.d.ts",
        "import": "./dist/jsx-runtime/index.js"
      }
    },
    "keywords": [
      "html",
      "template",
      "sanitize"
    ],
    "author": {
      "name": "Nate Moore",
      "email": "nate@natemoo.re",
      "url": "https://twitter.com/n_moore"
    },
    "license": "MIT",
    "volta": {
      "node": "18.7.0"
    },
    "packageManager": "pnpm@7.6.0",
    "devDependencies": {
      "@changesets/cli": "^2.18.1",
      "@types/stylis": "^4.0.2",
      "chalk": "^5.1.2",
      "dts-bundle-generator": "^8.0.1",
      "esbuild": "^0.14.51",
      "globby": "^13.1.2",
      "gzip-size": "^7.0.0",
      "markdown-it": "^13.0.1",
      "media-query-fns": "^2.0.0",
      "npm-run-all": "^4.1.5",
      "parsel-js": "^1.1.2",
      "prettier": "^2.5.1",
      "pretty-bytes": "^6.0.0",
      "stylis": "^4.1.2",
      "vitest": "^0.20.2"
    },
    "scripts": {
      "build": "node scripts/build.js",
      "lint": "prettier \"**/*.{js,ts,md}\"",
      "dev": "vitest",
      "test": "vitest run"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ultrahtml-1.5.2-77be18c531adc4cda198b8767eda27df9427cc7f-integrity/node_modules/ultrahtml/package.json",
    "readmeFilename": "README.md",
    "readme": "# `ultrahtml`\n\nA 1.75kB library for enhancing `html`. `ultrahtml` has zero dependencies and is compatible with any JavaScript runtime.\n\n### Features\n\n- Tiny, fault-tolerant and friendly HTML-like parser. Works with HTML, Astro, Vue, Svelte, and any other HTML-like syntax.\n- Built-in AST `walk` utility\n- Built-in `transform` utility for easy output manipulation\n- Automatic but configurable sanitization, see [Sanitization](#sanitization)\n- Handy `html` template utility\n- `querySelector` and `querySelectorAll` support using `ultrahtml/selector`\n\n#### `walk`\n\nThe `walk` function provides full control over the AST. It can be used to scan for text, elements, components, or any other validation you might want to do.\n\n> **Note** > `walk` is `async` and **must** be `await`ed. Use `walkSync` if it is guaranteed there are no `async` components in the tree.\n\n```js\nimport { parse, walk, ELEMENT_NODE } from \"ultrahtml\";\n\nconst ast = parse(`<h1>Hello world!</h1>`);\nawait walk(ast, async (node) => {\n  if (node.type === ELEMENT_NODE && node.name === \"script\") {\n    throw new Error(\"Found a script!\");\n  }\n});\n```\n\n#### `walkSync`\n\nThe `walkSync` function is identical to the `walk` function, but is synchronous. This should only be used when it is guaranteed there are no `async` components in the tree.\n\n```js\nimport { parse, walkSync, ELEMENT_NODE } from \"ultrahtml\";\n\nconst ast = parse(`<h1>Hello world!</h1>`);\nwalkSync(ast, (node) => {\n  if (node.type === ELEMENT_NODE && node.name === \"script\") {\n    throw new Error(\"Found a script!\");\n  }\n});\n```\n\n#### `render`\n\nThe `render` function allows you to serialize an AST back into a string.\n\n> **Note**\n> By default, `render` will sanitize your markup, removing any `script` tags. Pass `{ sanitize: false }` to disable this behavior.\n\n```js\nimport { parse, render } from \"ultrahtml\";\n\nconst ast = parse(`<h1>Hello world!</h1>`);\nconst output = await render(ast);\n```\n\n#### `transform`\n\nThe `transform` function provides a straight-forward way to modify any markup. Sanitize content, swap in-place elements/Components, and more using a set of built-in transformers, or write your own custom transformer.\n\n```js\nimport { transform, html } from \"ultrahtml\";\nimport swap from \"ultrahtml/transformers/swap\";\nimport sanitize from \"ultrahtml/transformers/sanitize\";\n\nconst output = await transform(`<h1>Hello world!</h1>`, [\n  swap({\n    h1: \"h2\",\n    h3: (props, children) => html`<h2 class=\"ultra\">${children}</h2>`,\n  }),\n  sanitize({ allowElements: [\"h1\", \"h2\", \"h3\"] }),\n]);\n\nconsole.log(output); // <h2>Hello world!</h2>\n```\n\n#### Sanitization\n\n`ultrahtml/transformers/sanitize` implements an extension of the [HTML Sanitizer API](https://developer.mozilla.org/en-US/docs/Web/API/Sanitizer/Sanitizer).\n\n| Option              | Type                       | Default      | Description                                                                                                                                                                                                                               |\n| ------------------- | -------------------------- | ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| allowElements       | `string[]`                 | `undefined`  | An array of strings indicating elements that the sanitizer should not remove. All elements not in the array will be dropped.                                                                                                              |\n| blockElements       | `string[]`                 | `undefined`  | An array of strings indicating elements that the sanitizer should remove, but keep their child elements.                                                                                                                                  |\n| dropElements        | `string[]`                 | `[\"script\"]` | An array of strings indicating elements (including nested elements) that the sanitizer should remove.                                                                                                                                     |\n| allowAttributes     | `Record<string, string[]>` | `undefined`  | An object where each key is the attribute name and the value is an Array of allowed tag names. Matching attributes will not be removed. All attributes that are not in the array will be dropped.                                         |\n| dropAttributes      | `Record<string, string[]>` | `undefined`  | An object where each key is the attribute name and the value is an Array of dropped tag names. Matching attributes will be removed.                                                                                                       |\n| allowComponents     | `boolean`                  | `false`      | A boolean value set to false (default) to remove components and their children. If set to true, components will be subject to built-in and custom configuration checks (and will be retained or dropped based on those checks).           |\n| allowCustomElements | `boolean`                  | `false`      | A boolean value set to false (default) to remove custom elements and their children. If set to true, custom elements will be subject to built-in and custom configuration checks (and will be retained or dropped based on those checks). |\n| allowComments       | `boolean`                  | `false`      | A boolean value set to false (default) to remove HTML comments. Set to true in order to keep comments.                                                                                                                                    |\n\n## Acknowledgements\n\n- [Jason Miller](https://twitter.com/_developit)'s [`htmlParser`](https://github.com/developit/htmlParser) provided a great, lightweight base for this parser\n- [Titus Wormer](https://twitter.com/wooorm)'s [`mdx`](https://mdxjs.com) for inspiration\n",
    "description": "A 1.75kB library for enhancing `html`. `ultrahtml` has zero dependencies and is compatible with any JavaScript runtime.",
    "licenseText": "MIT License Copyright (c) 2022 Nate Moore\n\nPermission is hereby granted, free of\ncharge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice\n(including the next paragraph) shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---\n\nPortions of this code were borrowed from https://github.com/developit/htmlParser\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jason Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ultrahtml/-/ultrahtml-1.5.2.tgz#77be18c531adc4cda198b8767eda27df9427cc7f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ultrahtml/-/ultrahtml-1.5.2.tgz",
    "hash": "77be18c531adc4cda198b8767eda27df9427cc7f",
    "integrity": "sha512-qh4mBffhlkiXwDAOxvSGxhL0QEQsTbnP9BozOK3OYPEGvPvdWzvAUaXNtUSMdNsKDtuyjEbyVUPFZ52SSLhLqw==",
    "registry": "npm",
    "packageName": "ultrahtml",
    "cacheIntegrity": "sha512-qh4mBffhlkiXwDAOxvSGxhL0QEQsTbnP9BozOK3OYPEGvPvdWzvAUaXNtUSMdNsKDtuyjEbyVUPFZ52SSLhLqw== sha1-d74YxTGtxM2hmLh2fton35QnzH8="
  },
  "registry": "npm",
  "hash": "77be18c531adc4cda198b8767eda27df9427cc7f"
}