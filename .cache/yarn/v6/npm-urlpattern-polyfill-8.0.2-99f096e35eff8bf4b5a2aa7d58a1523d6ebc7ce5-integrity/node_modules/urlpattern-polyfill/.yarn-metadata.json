{
  "manifest": {
    "name": "urlpattern-polyfill",
    "version": "8.0.2",
    "description": "Polyfill for the URLPattern API",
    "repository": {
      "type": "git",
      "url": "https://github.com/kenchris/urlpattern-polyfill"
    },
    "type": "module",
    "main": "./index.cjs",
    "module": "./index.js",
    "types": "./dist/index.d.ts",
    "exports": {
      "./urlpattern": {
        "types": "./dist/index.d.ts",
        "import": "./dist/urlpattern.js",
        "require": "./dist/urlpattern.cjs"
      },
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./index.js",
        "require": "./index.cjs"
      }
    },
    "tags": [
      "url",
      "urlpattern",
      "url-pattern",
      "browser",
      "node",
      "polyfill",
      "w3c",
      "wicg"
    ],
    "files": [
      "dist",
      "index.js",
      "index.cjs"
    ],
    "devDependencies": {
      "@ava/typescript": "^4.0.0",
      "ava": "^5.2.0",
      "esbuild": "^0.17.18",
      "rimraf": "^5.0.0",
      "typescript": "^5.0.4",
      "wireit": "^0.9.5"
    },
    "ava": {
      "files": [
        "test/**/*",
        "!test/wpt"
      ],
      "typescript": {
        "rewritePaths": {
          "src/": "dist/"
        },
        "compile": false
      }
    },
    "scripts": {
      "build:esm": "wireit",
      "build:cjs": "wireit",
      "build": "wireit",
      "sync-wpt": "wireit",
      "copyTypeFiles": "wireit",
      "prepFakeNodeModules": "wireit",
      "test": "wireit",
      "manual-test": "wireit",
      "publish-dev": "wireit",
      "publish-prod": "wireit"
    },
    "wireit": {
      "build:esm": {
        "command": "esbuild --bundle --format=esm src/url-pattern.ts --outfile=dist/urlpattern.js",
        "output": [
          "dist/urlpattern.js"
        ],
        "files": [
          "src/**/*"
        ]
      },
      "build:cjs": {
        "command": "esbuild --bundle --format=cjs src/url-pattern.ts --outfile=dist/urlpattern.cjs",
        "output": [
          "dist/urlpattern.cjs"
        ],
        "files": [
          "src/**/*"
        ]
      },
      "copyTypeFiles": {
        "command": "cp ./src/index.d.ts ./src/types.d.ts ./dist",
        "output": [
          "dist/index.d.ts",
          "dist/types.d.ts"
        ],
        "dependencies": [
          "build:esm",
          "build:cjs"
        ]
      },
      "build": {
        "dependencies": [
          "copyTypeFiles"
        ]
      },
      "prepFakeNodeModules": {
        "command": "rm -rf node_modules/urlpattern-polyfill; ln -s $(pwd) node_modules/urlpattern-polyfill"
      },
      "sync-wpt": {
        "command": "cd test && wget http://wpt.live/urlpattern/resources/urlpatterntestdata.json && wget http://wpt.live/urlpattern/resources/urlpattern-compare-test-data.json"
      },
      "test": {
        "command": "ava --timeout=60s",
        "watch": "test/**/*",
        "files": [
          "test/**/*"
        ],
        "dependencies": [
          "prepFakeNodeModules",
          "build"
        ]
      },
      "manual-test": {
        "command": "npx http-server -o /index.html -p 4203",
        "dependencies": [
          "test"
        ]
      },
      "publish-dev": {
        "command": "VERSION=${npm_package_version%-*}-dev.`git rev-parse --short HEAD` && npm version --no-git-tag-version $VERSION && npm publish --tag dev",
        "dependencies": [
          "test"
        ]
      },
      "publish-prod": {
        "command": "npm version patch && npm publish",
        "dependencies": [
          "test"
        ]
      }
    },
    "author": {},
    "license": "MIT",
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-urlpattern-polyfill-8.0.2-99f096e35eff8bf4b5a2aa7d58a1523d6ebc7ce5-integrity/node_modules/urlpattern-polyfill/package.json",
    "readmeFilename": "README.md",
    "readme": "[![run-tests](https://github.com/kenchris/urlpattern-polyfill/actions/workflows/workflow.yml/badge.svg)](https://github.com/kenchris/urlpattern-polyfill/actions/workflows/workflow.yml)\n[![npm (tag)](https://img.shields.io/npm/v/urlpattern-polyfill/latest?style=flat-square)](https://www.npmjs.com/package/urlpattern-polyfill)\n![GitHub](https://img.shields.io/github/license/kenchris/urlpattern-polyfill?style=flat-square)\n\nURLPattern polyfills\n===\n\nURLPattern is a new web API for matching URLs. Its intended to both provide a convenient API for web developers and to be usable in other web APIs that need to match URLs; e.g. service workers. The [explainer](https://github.com/wanderview/service-worker-scope-pattern-matching/blob/master/explainer.md) discusses the motivating use cases.\n\nThis is a polyfill for the [URLPattern API](https://wicg.github.io/urlpattern/) so that  the feature is available in browsers that don't support it natively. This polyfill passes\nthe same web platform test suite.\n\nHow to load the polyfill\n---\nThe polyfill works in browsers (ESM module) and in Node.js either via import (ESM module) or via require (CJS module).\n\nThe polyfill will only be loaded if the URLPattern doesn't already exist on the global object, and in that case it will add it to the global object.\n\n## loading as ESM module\n\n```javascript\n// Conditional ESM module loading (Node.js and browser)\n// @ts-ignore: Property 'UrlPattern' does not exist \nif (!globalThis.URLPattern) { \n  await import(\"urlpattern-polyfill\");\n}\n/** \n * The above is the recommended way to load the ESM module, as it only\n * loads it on demand, thus when not natively supported by the runtime or\n * already polyfilled.\n */\nimport \"urlpattern-polyfill\";\n\n/** \n * In case you want to replace an existing implementation with the polyfill:\n */\nimport {URLPattern} from \"urlpattern-polyfill\";\nglobalThis.URLPattern = URLPattern\n```\n\n## loading as CommonJs module\n\n```javascript\n// Conditional CJS module loading (Node.js)\nif (!globalThis.URLPattern) {\n   require(\"urlpattern-polyfill\");\n}\n/** \n * The above is the recommended way to load the CommonJs module, as it only\n * loads it on demand, thus when not natively supported by the runtime or\n * already polyfilled.\n */\nrequire(\"urlpattern-polyfill\");\n\n/** \n * In case you want to replace an existing implementation with the polyfill:\n */\nconst {URLPattern} = require(\"urlpattern-polyfill\");;\nglobalThis.URLPattern = URLPattern\n```\n> ## Note:\n> The line with `// @ts-ignore: Property 'UrlPattern' does not exist ` is needed in some environments because before you load the polyfill it might not be available, and the feature-check in the if statement gives an TypeScript error. The whole idea is that it loads when its not there. \n\n> ## Note:\n> No matter how you load the polyfill, when there is no implementation in your environment, it will _always_ add it to the global object.\n\nBasic example\n---\n\n```javascript\nlet p = new URLPattern({ pathname: '/foo/:name' });\n\nlet r = p.exec('https://example.com/foo/bar');\nconsole.log(r.pathname.input); // \"/foo/bar\"\nconsole.log(r.pathname.groups.name); // \"bar\"\n\nlet r2 = p.exec({ pathname: '/foo/baz' });\nconsole.log(r2.pathname.groups.name); // \"baz\"\n```\n\nExample of matching same-origin JPG or PNG requests\n---\n\n```javascript\n// Match same-origin jpg or png URLs.\n// Note: This uses a named group to make it easier to access\n//       the result later.\nconst p = new URLPattern({\n  pathname: '/*.:filetype(jpg|png)',\n  baseURL: self.location\n});\n\nfor (let url in url_list) {\n  const r = p.exec(url);\n\n  // skip non-matches\n  if (!r) {\n    continue;\n  }\n\n  if (r.pathname.groups['filetype'] === 'jpg') {\n    // process jpg\n  } else if (r.pathname.groups['filetype'] === 'png') {\n    // process png\n  }\n}\n```\n\nThe pattern in this case can be made simpler without the origin check by leaving off the baseURL.\n\n```javascript\n// Match any URL ending with 'jpg' or 'png'.\nconst p = new URLPattern({ pathname: '/*.:filetype(jpg|png)' });\n```\n\nExample of Short Form Support\n---\nWe are planning to also support a \"short form\" for initializing URLPattern objects.\nThis is supported by the polyfill but not yet by the Chromium implementation.\n\nFor example:\n\n```javascript\nconst p = new URLPattern(\"https://*.example.com/foo/*\");\n```\n\nOr:\n\n```javascript\nconst p = new URLPattern(\"foo/*\", self.location);\n```\n\nAPI reference\n===\n\nAPI overview with typeScript type annotations is found below. Associated browser Web IDL can be found [here](https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/url_pattern/).\n\n```ts\ntype URLPatternInput = URLPatternInit | string;\n\nclass URLPattern {\n  constructor(init?: URLPatternInput, baseURL?: string);\n\n  test(input?: URLPatternInput, baseURL?: string): boolean;\n\n  exec(input?: URLPatternInput, baseURL?: string): URLPatternResult | null;\n\n  readonly protocol: string;\n  readonly username: string;\n  readonly password: string;\n  readonly hostname: string;\n  readonly port: string;\n  readonly pathname: string;\n  readonly search: string;\n  readonly hash: string;\n}\n\ninterface URLPatternInit {\n  baseURL?: string;\n  username?: string;\n  password?: string;\n  protocol?: string;\n  hostname?: string;\n  port?: string;\n  pathname?: string;\n  search?: string;\n  hash?: string;\n}\n\ninterface URLPatternResult {\n  inputs: [URLPatternInput];\n  protocol: URLPatternComponentResult;\n  username: URLPatternComponentResult;\n  password: URLPatternComponentResult;\n  hostname: URLPatternComponentResult;\n  port: URLPatternComponentResult;\n  pathname: URLPatternComponentResult;\n  search: URLPatternComponentResult;\n  hash: URLPatternComponentResult;\n}\n\ninterface URLPatternComponentResult {\n  input: string;\n  groups: {\n      [key: string]: string | undefined;\n  };\n}\n\n```\n\nPattern syntax\n===\nThe pattern syntax here is based on what is used in the popular path-to-regexp library.\n\n* An understanding of a \"divider\" that separates segments of the string.  For the pathname this is typically the `\"/\"` character.\n* A regex group defined by an enclosed set of parentheses.  Inside of the parentheses a general regex may be defined.\n* A named group that matches characters until the next divider.  The named group begins with a `\":\"` character and then a name.  For example, `\"/:foo/:bar\"` has two named groups.\n* A custom regex for a named group.  In this case a set of parentheses with a regex immediately follows the named group; e.g. `\"/:foo(.*)\"` will override the default of matching to the next divider.\n* A modifier may optionally follow a regex or named group.  A modifier is a `\"?\"`, `\"*\"`, or `\"+\"` functions just as they do in regular expressions.  When a group is optional or repeated and it's preceded by a divider then the divider is also optional or repeated.  For example, `\"/foo/:bar?\"` will match `\"/foo\"`, `\"/foo/\"`, or `\"/foo/baz\"`.  Escaping the divider will make it required instead.\n* A way to greedily match characters, even across dividers, by using `\"(.*)\"` (so-called unnamed groups).\n\n\nCurrently we plan to have these known differences with path-to-regexp:\n\n* No support for custom prefixes and suffixes.\n\n\nCanonicalization\n===\n\nURLs have a canonical form that is based on ASCII, meaning that [internationalized domain names](https://en.wikipedia.org/wiki/Internationalized_domain_name) (hostnames) also have a canonical ASCII based representation, and that other components such as `hash`, `search` and `pathname` are encoded using [percent encoding](https://en.wikipedia.org/wiki/Percent-encoding).\n\nCurrently `URLPattern` does not perform any encoding or normalization of the patterns. So a developer would need to URL encode unicode characters before passing the pattern into the constructor. Similarly, the constructor does not do things like flattening pathnames such as /foo/../bar to /bar. Currently the pattern must be written to target canonical URL output manually.\n\nIt does, however, perform these operations for `test()` and `exec()` input.\n\nEncoding components can easily be done manually, but do not encoding the pattern syntax:\n\n```javascript\nencodeURIComponent(\"?q=æøå\")\n// \"%3Fq%3D%C3%A6%C3%B8%C3%A5\"\n```\n\n```javascript\nnew URL(\"https://ølerlækkernårdetermit.dk\").hostname\n// \"xn--lerlkkernrdetermit-dubo78a.dk\"\n```\n\nLearn more\n===\n\n- [Explainer](https://github.com/wanderview/service-worker-scope-pattern-matching/blob/master/explainer.md)\n- [Design Document](https://docs.google.com/document/d/17L6b3zlTHtyxQvOAvbK55gQOi5rrJLERwjt_sKXpzqc/edit#)\n\nReporting a security issue\n===\nIf you have information about a security issue or vulnerability with an Intel-maintained open source project on https://github.com/intel, please send an e-mail to secure@intel.com. Encrypt sensitive information using our PGP public key. For issues related to Intel products, please visit https://security-center.intel.com.\n",
    "licenseText": "Copyright 2020 Intel Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/urlpattern-polyfill/-/urlpattern-polyfill-8.0.2.tgz#99f096e35eff8bf4b5a2aa7d58a1523d6ebc7ce5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/urlpattern-polyfill/-/urlpattern-polyfill-8.0.2.tgz",
    "hash": "99f096e35eff8bf4b5a2aa7d58a1523d6ebc7ce5",
    "integrity": "sha512-Qp95D4TPJl1kC9SKigDcqgyM2VDVO4RiJc2d4qe5GrYm+zbIQCWWKAFaJNQ4BhdFeDGwBmAxqJBwWSJDb9T3BQ==",
    "registry": "npm",
    "packageName": "urlpattern-polyfill",
    "cacheIntegrity": "sha512-Qp95D4TPJl1kC9SKigDcqgyM2VDVO4RiJc2d4qe5GrYm+zbIQCWWKAFaJNQ4BhdFeDGwBmAxqJBwWSJDb9T3BQ== sha1-mfCW417/i/S1oqp9WKFSPW68fOU="
  },
  "registry": "npm",
  "hash": "99f096e35eff8bf4b5a2aa7d58a1523d6ebc7ce5"
}