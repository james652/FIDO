{
  "manifest": {
    "name": "giget",
    "version": "1.1.2",
    "description": "Download templates and git repositories with pleasure!",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/giget.git"
    },
    "license": "MIT",
    "sideEffects": false,
    "type": "module",
    "bin": {
      "giget": "dist/cli.mjs"
    },
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "types": "./dist/index.d.ts",
        "require": "./dist/index.cjs"
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "unbuild",
      "dev": "vitest dev",
      "giget": "jiti ./src/cli.ts",
      "lint": "eslint --ext .ts,.js,.mjs,.cjs . && prettier -c src test",
      "lint:fix": "eslint --ext .ts,.js,.mjs,.cjs . --fix && prettier -w src test",
      "prepack": "unbuild",
      "play": "pnpm giget --force-clean --verbose unjs .tmp/clone",
      "release": "pnpm test && changelogen --release && npm publish && git push --follow-tags",
      "test": "pnpm lint && vitest run --coverage"
    },
    "dependencies": {
      "colorette": "^2.0.19",
      "defu": "^6.1.2",
      "https-proxy-agent": "^5.0.1",
      "mri": "^1.2.0",
      "node-fetch-native": "^1.0.2",
      "pathe": "^1.1.0",
      "tar": "^6.1.13"
    },
    "devDependencies": {
      "@types/node": "^18.13.0",
      "@types/tar": "^6.1.4",
      "@vitest/coverage-c8": "^0.28.5",
      "changelogen": "^0.4.1",
      "eslint": "^8.34.0",
      "eslint-config-unjs": "^0.1.0",
      "jiti": "^1.17.1",
      "prettier": "^2.8.4",
      "typescript": "^4.9.5",
      "unbuild": "^1.1.2",
      "vitest": "^0.28.5"
    },
    "packageManager": "pnpm@7.27.0",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-giget-1.1.2-f99a49cb0ff85479c8c3612cdc7ca27f2066e818-integrity/node_modules/giget/package.json",
    "readmeFilename": "README.md",
    "readme": "# ✨ giget\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![Github Actions][github-actions-src]][github-actions-href]\n[![Codecov][codecov-src]][codecov-href]\n\n> Download templates and git repositories with pleasure!\n\n## Features\n\n✔ Support popular git providers (GitHub, GitLab, Bitbucket, Sourcehut) out of the box.\n\n✔ Built-in and custom [template registry](#template-registry).\n\n✔ Fast cloning using tarball gzip without depending on local `git` and `tar`.\n\n✔ Works online and offline with disk cache support.\n\n✔ Custom template provider support with programmatic usage.\n\n✔ Support extracting with a subdir.\n\n✔ Authorization support to download private templates\n\n## Usage (CLI)\n\n```bash\nnpx giget@latest <template> [<dir>] [...options]\n```\n\n### Arguments\n\n- **template**: Template name or a a URI describing provider, repository, subdir, and branch/ref. (See [Examples](#examples))\n- **dir**: A relative or absolute path where to extract the template.\n\n### Options\n\n- `--force`: Clone to existing directory even if exists.\n- `--offline`: Do not attempt to download and use cached version.\n- `--prefer-offline`: Use cache if exists otherwise try to download.\n- `--force-clean`: ⚠️ Remove any existing directory or file recusively before cloning.\n- `--shell`: ⚠️ Open a new shell with current working directory in cloned dir. (Experimental).\n- `--registry`: URL to a custom registry. (Can be overriden with `GIGET_REGISTRY` environment variable).\n- `--no-registry`: Disable registry lookup and functionality.\n- `--verbose`: Show verbose debugging info.\n- `--cwd`: Set current working directory to resolve dirs relative to it.\n- `--auth`: Custom Authorization token to use for downloading template. (Can be overriden with `GIGET_AUTH` environment variable).\n\n### Examples\n\n```sh\n# Clone nuxt starter from giget template registry\nnpx giget@latest nuxt\n\n# Clone the main branch of github.com/unjs/template to unjs-template directory\nnpx giget@latest gh:unjs/template\n\n# Clone to myProject directory\nnpx giget@latest gh:unjs/template myProject\n\n# Clone dev branch\nnpx giget@latest gh:unjs/template#dev\n\n# Clone /test directory from main branch\nnpx giget@latest gh:unjs/template/test\n\n# Clone from gitlab\nnpx giget@latest gitlab:unjs/template\n\n# Clone from bitbucket\nnpx giget@latest bitbucket:unjs/template\n\n# Clone from sourcehut\nnpx giget@latest sourcehut:pi0/unjs-template\n```\n\n## Template Registry\n\nGiget has a built-in HTTP registry system for resolving templates. This way you can support template name shortcuts and meta-data. Default registry is served from [unjs/giget/templates](./templates/).\n\nIf you want to add your template to the built-in registry, just drop a PR to add it to the [./templates](./templates) directory. Slugs are added on first-come first-served basis but this might change in the future.\n\n### Custom Registry\n\nA custom registry should provide an endpoint with dynamic path `/:template.json` that returns a JSON response with keys same as [custom providers](#custom-providers).\n\n- `name`: (required) Name of the template.\n- `tar` (required) Link to the tar download link.\n- `defaultDir`: (optional) Default cloning directory.\n- `url`: (optional) Webpage of the template.\n- `subdir`: (optional) Directory inside the tar file.\n- `headers`: (optional) Custom headers to send while downloading template.\n\nBecause of the simplicity, you can even use a GitHub repository as template registry but also you can build something more powerful by bringing your own API.\n\n## Usage (Programmatic)\n\nInstall package:\n\n```sh\n# npm\nnpm install giget\n\n# yarn\nyarn install giget\n\n# pnpm\npnpm install giget\n```\n\nImport:\n\n```js\n// ESM\nimport { downloadTemplate } from \"giget\";\n\n// CommonJS\nconst { downloadTemplate } = require(\"giget\");\n```\n\n### `downloadTemplate(source, options?)`\n\n**Example:**\n\n```js\nconst { source, dir } = await downloadTemplate(\"github:unjs/template\");\n```\n\n**Options:**\n\n- `source`: (string) Input source in format of `[provider]:repo[/subpath][#ref]`.\n- `options`: (object) Options are usually inferred from the input string. You can customize them.\n  - `dir`: (string) Destination directory to clone to. If not provided, `user-name` will be used relative to the current directory.\n  - `provider`: (string) Either `github`, `gitlab`, `bitbucket` or `sourcehut`. The default is `github`.\n  - `repo`: (string) Name of repository in format of `{username}/{reponame}`.\n  - `ref`: (string) Git ref (branch or commit or tag). The default value is `main`.\n  - `subdir`: (string) Directory of the repo to clone from. The default value is none.\n  - `force`: (boolean) Extract to the exisiting dir even if already exsists.\n  - `forceClean`: (boolean) ⚠️ Clean ups any existing directory or file before cloning.\n  - `offline`: (boolean) Do not attempt to download and use cached version.\n  - `preferOffline`: (boolean) Use cache if exists otherwise try to download.\n  - `providers`: (object) A map from provider name to custom providers. Can be used to override built-ins too.\n  - `registry`: (string or false) Set to `false` to disable registry. Set to a URL string (without trailing slash) for custom registry. (Can be overriden with `GIGET_REGISTRY` environment variable).\n  - `cwd`: (string) Current working directory to resolve dirs relative to it.\n  - `auth`: (string) Custom Authorization token to use for downloading template. (Can be overriden with `GIGET_AUTH` environment variable).\n\n**Return value:**\n\nThe return value is a promise that resolves to the resolved template.\n\n- `dir`: (string) Path to extracted dir.\n- `source`: (string) Normalized version of the input source without provider.\n- [other provider template keys]\n  - `url`: (string) URL of repostiroy that can be opened in browser. Useful for logging.\n\n## Custom Providers\n\nUsing programmatic method, you can make your own custom template providers.\n\n```ts\nimport type { TemplateProvider } from \"giget\";\n\nconst rainbow: TemplateProvider = async (input, { auth }) => {\n  return {\n    name: \"rainbow\",\n    version: input,\n    headers: { authorization: auth },\n    url: `https://rainbow.template/?variant=${input}`,\n    tar: `https://rainbow.template/dl/rainbow.${input}.tar.gz`,\n  };\n};\n\nconst { source, dir } = await downloadRepo(\"rainbow:one\", {\n  providers: { rainbow },\n});\n```\n\n### Custom Registry Providers\n\nYou can define additional [custom registry](#custom-registry) providers using `registryProvider` utility and register to `providers`.\n\n```ts\nimport { registryProvider } from \"giget\";\n\nconst themes = registryProvider(\n  \"https://raw.githubusercontent.com/unjs/giget/main/templates\"\n);\n\nconst { source, dir } = await downloadRepo(\"themes:test\", {\n  providers: { themes },\n});\n```\n\n## Related projects\n\nGiget wouldn't be possible without inspiration from former projects. In comparison, giget does not depend on any local command which increases stability and performance, supports custom template providers, auth and many more features out of the box.\n\n- https://github.com/samsonjs/gitter\n- https://github.com/tiged/tiged\n- https://github.com/Rich-Harris/degit\n\n## 💻 Development\n\n- Clone this repository\n- Enable [Corepack](https://github.com/nodejs/corepack) using `corepack enable` (use `npm i -g corepack` for Node.js < 16.10)\n- Install dependencies using `pnpm install`\n- Run interactive tests using `pnpm dev`\n\n## License\n\nMade with 💛\n\nPublished under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/giget?style=flat-square\n[npm-version-href]: https://npmjs.com/package/giget\n[npm-downloads-src]: https://img.shields.io/npm/dm/giget?style=flat-square\n[npm-downloads-href]: https://npmjs.com/package/giget\n[github-actions-src]: https://img.shields.io/github/workflow/status/unjs/giget/ci/main?style=flat-square\n[github-actions-href]: https://github.com/unjs/giget/actions?query=workflow%3Aci\n[codecov-src]: https://img.shields.io/codecov/c/gh/unjs/giget/main?style=flat-square\n[codecov-href]: https://codecov.io/gh/unjs/giget\n",
    "licenseText": "MIT License\n\nCopyright (c) Pooya Parsa <pooya@pi0.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/giget/-/giget-1.1.2.tgz#f99a49cb0ff85479c8c3612cdc7ca27f2066e818",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/giget/-/giget-1.1.2.tgz",
    "hash": "f99a49cb0ff85479c8c3612cdc7ca27f2066e818",
    "integrity": "sha512-HsLoS07HiQ5oqvObOI+Qb2tyZH4Gj5nYGfF9qQcZNrPw+uEFhdXtgJr01aO2pWadGHucajYDLxxbtQkm97ON2A==",
    "registry": "npm",
    "packageName": "giget",
    "cacheIntegrity": "sha512-HsLoS07HiQ5oqvObOI+Qb2tyZH4Gj5nYGfF9qQcZNrPw+uEFhdXtgJr01aO2pWadGHucajYDLxxbtQkm97ON2A== sha1-+ZpJyw/4VHnIw2Es3HyifyBm6Bg="
  },
  "registry": "npm",
  "hash": "f99a49cb0ff85479c8c3612cdc7ca27f2066e818"
}