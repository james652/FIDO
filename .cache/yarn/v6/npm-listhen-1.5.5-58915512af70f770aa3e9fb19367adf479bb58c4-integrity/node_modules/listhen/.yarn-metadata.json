{
  "manifest": {
    "name": "listhen",
    "version": "1.5.5",
    "description": "ðŸ‘‚ Elegant HTTP Listener",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/listhen.git"
    },
    "license": "MIT",
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      },
      "./cli": {
        "types": "./dist/cli.d.ts",
        "import": "./dist/cli.mjs",
        "require": "./dist/cli.cjs"
      }
    },
    "main": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "bin": {
      "listen": "bin/listhen.mjs",
      "listhen": "bin/listhen.mjs"
    },
    "files": [
      "dist",
      "lib",
      "bin",
      "cli.d.ts"
    ],
    "dependencies": {
      "@parcel/watcher": "^2.3.0",
      "@parcel/watcher-wasm": "2.3.0",
      "citty": "^0.1.4",
      "clipboardy": "^3.0.0",
      "consola": "^3.2.3",
      "defu": "^6.1.2",
      "get-port-please": "^3.1.1",
      "h3": "^1.8.1",
      "http-shutdown": "^1.2.2",
      "jiti": "^1.20.0",
      "mlly": "^1.4.2",
      "node-forge": "^1.3.1",
      "pathe": "^1.1.1",
      "std-env": "^3.4.3",
      "ufo": "^1.3.0",
      "untun": "^0.1.2",
      "uqr": "^0.1.2"
    },
    "devDependencies": {
      "@types/node": "^20.6.3",
      "@types/node-forge": "^1.3.5",
      "@vitest/coverage-v8": "^0.34.4",
      "changelogen": "^0.5.5",
      "eslint": "^8.49.0",
      "eslint-config-unjs": "^0.2.1",
      "ip-regex": "^5.0.0",
      "prettier": "^3.0.3",
      "typescript": "^5.2.2",
      "unbuild": "^2.0.0",
      "vitest": "^0.34.4"
    },
    "packageManager": "pnpm@8.7.4",
    "scripts": {
      "build": "unbuild",
      "dev": "vitest",
      "lint": "eslint --ext .ts . && prettier -c src test",
      "lint:fix": "eslint --fix --ext .ts . && prettier -w src test",
      "listhen": "node ./scripts/listhen.mjs",
      "play": "node ./scripts/listhen.mjs -w ./playground",
      "release": "pnpm test && pnpm build && changelogen --release && pnpm publish && git push --follow-tags",
      "test": "pnpm lint && vitest run --coverage"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-listhen-1.5.5-58915512af70f770aa3e9fb19367adf479bb58c4-integrity/node_modules/listhen/package.json",
    "readmeFilename": "README.md",
    "readme": "# ðŸ‘‚ listhen\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n[![JSDocs][jsdocs-src]][jsdocs-href]\n\nElegant HTTP listener!\n\n[ðŸ‘‰ Online Playground](https://stackblitz.com/github/unjs/listhen/tree/main/playground?startScript=dev)\n\n## Features\n\nâœ… Dev server with HMR, static, and typescript support with <a href=\"https://github.com/unjs/jiti\">unjs/jiti</a><br>\n\nâœ… Works with Node.js, express, and <a href=\"https://github.com/unjs/h3\">unjs/h3</a> out of the box <br>\n\nâœ… Show the QR code of the public URL with <a href=\"https://github.com/unjs/uqr\">unjs/uqr</a><br>\n\nâœ… Tunnel your local server to the world with <a href=\"https://github.com/unjs/untun\">unjs/untun</a><br>\n\nâœ… Assign a port or fallback to a nicer alternative with <a href=\"https://github.com/unjs/get-port-please\">unjs/get-port-please</a>\n\nâœ… Gracefully shutdown Server with <a href=\"https://github.com/thedillonb/http-shutdown\">http-shutdown</a><br>\n\nâœ… Copy the URL to the clipboard<br>\n\nâœ… HTTPS support with self-signed certificates<br>\n\nâœ… Open URL in browser<br>\n\nâœ… Detect test and production environments to auto-adjust behavior<br>\n\nâœ… Close on the exit signal<br>\n\n<div align=\"center\">\n<img width=\"100%\" src=\"./.assets/screenshot.png\">\n</div>\n\n## Quick Usage (CLI)\n\nYou can run your applications in localhost with typescript support and watch mode using `listhen` CLI:\n\nCreate `index.ts`:\n\n```ts\nexport default (req, res) => {\n  res.end(\"Hello World!\");\n};\n```\n\nor using [unjs/h3](https://github.com/unjs/h3):\n\n```ts\nimport { createApp, eventHandler } from \"h3\";\n\nexport const app = createApp();\n\napp.use(\"/\", () => \"Hello world!\");\n```\n\nor use npx to invoke `listhen` command:\n\n```sh\nnpx listhen -w ./index.ts\n```\n\n## Usage (API)\n\nInstall package:\n\n```bash\n# pnpm\npnpm i listhen\n\n# npm\nnpm i listhen\n\n# yarn\nyarn add listhen\n\n```\n\nImport into your Node.js project:\n\n```js\n// CommonJS\nconst { listen, listenAndWatch } = require(\"listhen\");\n\n// ESM\nimport { listen, listenAndWatch } from \"listhen\";\n```\n\n```ts\nconst handler = (req, res) => {\n  res.end(\"Hi!\")\n}\n\n// listener: { url, getURL, server, close, ... }\nconst listener = await listen(handler, options?)\n```\n\n## Options\n\n### `port`\n\n- Default: `process.env.PORT` or 3000 or memorized random (see [get-port-please](https://github.com/unjs/get-port-please))\n\nPort to listen.\n\n### `hostname`\n\n- Default: `process.env.HOST || '0.0.0.0'`\n\nDefault hostname to listen.\n\n### `https`\n\n- Type: Boolean | Object\n- Default: `false`\n\nListen on HTTPS with SSL enabled.\n\n#### Self-Signed Certificate\n\nBy setting `https: true`, listhen will use an auto-generated self-signed certificate.\n\nYou can set https to an object for custom options. Possible options:\n\n- `domains`: (Array) Default is `['localhost', '127.0.0.1', '::1']`.\n- `validityDays`: (Number) Default is `1`.\n\n#### User-Provided Certificate\n\nSet `https: { cert, key }` where the cert and key are paths to the SSL certificates.\nWith an encrypted private key, you also need to set `passphrase` on the `https` object.\n\nTo provide a certificate stored in a keystore set `https: { pfx }` with a path to the keystore.\nWhen the keystore is password protected also set `passphrase`.\n\nYou can also provide an inline cert and key instead of reading from the filesystem. In this case, they should start with `--`.\n\n### `showURL`\n\n- Default: `true` (force disabled on a test environment)\n\nShow a CLI message for the listening URL.\n\n### `baseURL`\n\n- Default: `/`\n\n### `open`\n\n- Default: `false` (force disabled on test and production environments)\n\nOpen the URL in the browser. Silently ignores errors.\n\n### `clipboard`\n\n- Default: `false` (force disabled on test and production environments)\n\nCopy the URL to the clipboard. Silently ignores errors.\n\n### `isTest`\n\n- Default: `process.env.NODE_ENV === 'test'`\n\nDetect if running in a test environment to disable some features.\n\n### `autoClose`\n\n- Default: `true`\n\nAutomatically close when an `exit` event, `SIGTERM`, `SIGINT` or `SIGHUP` signal is received in the process.\n\n### `publicURL`\n\n- Default: (the first public URL listening)\n\nThe public URL to show in the CLI output\n\n### `qr`\n\n- Default: `true`\n\nPrint QR Code for public address.\n\n### `public`\n\n- Default: `false` for development or when `hostname` is `localhost` and `true` for production\n\nWhen enabled, listhen tries to listen to all network interfaces. You can also enable this option using `--host` CLI flag.\n\n## License\n\nMIT. Made with ðŸ’–\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/listhen?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-version-href]: https://npmjs.com/package/listhen\n[npm-downloads-src]: https://img.shields.io/npm/dm/listhen?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-downloads-href]: https://npmjs.com/package/listhen\n[codecov-src]: https://img.shields.io/codecov/c/gh/unjs/listhen/main?style=flat&colorA=18181B&colorB=F0DB4F\n[codecov-href]: https://codecov.io/gh/unjs/listhen\n[license-src]: https://img.shields.io/github/license/unjs/listhen.svg?style=flat&colorA=18181B&colorB=F0DB4F\n[license-href]: https://github.com/unjs/listhen/blob/main/LICENSE\n[jsdocs-src]: https://img.shields.io/badge/jsDocs.io-reference-18181B?style=flat&colorA=18181B&colorB=F0DB4F\n[jsdocs-href]: https://www.jsdocs.io/package/listhen\n",
    "licenseText": "MIT License\n\nCopyright (c) Pooya Parsa <pooya@pi0.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---\n\nsrc/lib/open forked from https://github.com/sindresorhus/open\n\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n---\n\nsrc/lib/xdg-open\n\nUtility script to open a URL in the registered default application.\n\nRefer to the usage() function below for usage.\n\nCopyright 2009-2010, Fathi Boudra <fabo@freedesktop.org>\nCopyright 2009-2010, Rex Dieter <rdieter@fedoraproject.org>\nCopyright 2006, Kevin Krammer <kevin.krammer@gmx.at>\nCopyright 2006, Jeremy White <jwhite@codeweavers.com>\n\nLICENSE:\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/listhen/-/listhen-1.5.5.tgz#58915512af70f770aa3e9fb19367adf479bb58c4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/listhen/-/listhen-1.5.5.tgz",
    "hash": "58915512af70f770aa3e9fb19367adf479bb58c4",
    "integrity": "sha512-LXe8Xlyh3gnxdv4tSjTjscD1vpr/2PRpzq8YIaMJgyKzRG8wdISlWVWnGThJfHnlJ6hmLt2wq1yeeix0TEbuoA==",
    "registry": "npm",
    "packageName": "listhen",
    "cacheIntegrity": "sha512-LXe8Xlyh3gnxdv4tSjTjscD1vpr/2PRpzq8YIaMJgyKzRG8wdISlWVWnGThJfHnlJ6hmLt2wq1yeeix0TEbuoA== sha1-WJFVEq9w93CqPp+xk2et9Hm7WMQ="
  },
  "registry": "npm",
  "hash": "58915512af70f770aa3e9fb19367adf479bb58c4"
}