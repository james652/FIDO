{
  "manifest": {
    "name": "simple-git",
    "description": "Simple GIT interface for node.js",
    "version": "3.20.0",
    "author": {
      "name": "Steve King",
      "email": "steve@mydev.co"
    },
    "contributors": [
      {
        "name": "Steve King",
        "email": "steve@mydev.co"
      }
    ],
    "funding": {
      "type": "github",
      "url": "https://github.com/steveukx/git-js?sponsor=1"
    },
    "dependencies": {
      "@kwsites/file-exists": "^1.1.1",
      "@kwsites/promise-deferred": "^1.1.1",
      "debug": "^4.3.4"
    },
    "devDependencies": {
      "@kwsites/promise-result": "^1.1.0",
      "@simple-git/babel-config": "^1.0.0",
      "@types/debug": "^4.1.5",
      "@types/jest": "^29.2.2",
      "@types/node": "^16",
      "esbuild": "^0.14.10",
      "esbuild-node-externals": "^1.4.1",
      "jest": "^29.3.1",
      "ts-node": "^9.0.0",
      "typescript": "^4.1.2"
    },
    "keywords": [
      "git",
      "source control",
      "vcs"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/steveukx/git-js.git",
      "directory": "simple-git"
    },
    "main": "dist/cjs/index.js",
    "module": "dist/esm/index.js",
    "exports": {
      ".": {
        "types": "./dist/typings/index.d.ts",
        "import": "./dist/esm/index.js",
        "require": "./dist/cjs/index.js"
      },
      "./promise": {
        "require": "./promise.js"
      }
    },
    "types": "./dist/typings/index.d.ts",
    "files": [
      "promise.*",
      "dist"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-simple-git-3.20.0-ff9c3f736d6b2bf0e3510209569d206aac84833d-integrity/node_modules/simple-git/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Simple Git\n\n[![NPM version](https://img.shields.io/npm/v/simple-git.svg)](https://www.npmjs.com/package/simple-git)\n\nA lightweight interface for running `git` commands in any [node.js](https://nodejs.org) application.\n\n# Installation\n\nUse your favourite package manager:\n\n-  [npm](https://npmjs.org): `npm install simple-git`\n-  [yarn](https://yarnpkg.com/): `yarn add simple-git`\n\n# System Dependencies\n\nRequires [git](https://git-scm.com/downloads) to be installed and that it can be called using the command `git`.\n\n# Usage\n\nInclude into your JavaScript app using common js:\n\n```javascript\n// require the library, main export is a function\nconst simpleGit = require('simple-git');\nsimpleGit().clean(simpleGit.CleanOptions.FORCE);\n\n// or use named properties\nconst { simpleGit, CleanOptions } = require('simple-git');\nsimpleGit().clean(CleanOptions.FORCE);\n```\n\nInclude into your JavaScript app as an ES Module:\n\n```javascript\nimport { simpleGit, CleanOptions } from 'simple-git';\n\nsimpleGit().clean(CleanOptions.FORCE);\n```\n\nInclude in a TypeScript app using the bundled type definitions:\n\n```typescript\nimport { simpleGit, SimpleGit, CleanOptions } from 'simple-git';\n\nconst git: SimpleGit = simpleGit().clean(CleanOptions.FORCE);\n```\n\n## Configuration\n\nConfigure each `simple-git` instance with a properties object passed to the main `simpleGit` function:\n\n```typescript\nimport { simpleGit, SimpleGit, SimpleGitOptions } from 'simple-git';\n\nconst options: Partial<SimpleGitOptions> = {\n   baseDir: process.cwd(),\n   binary: 'git',\n   maxConcurrentProcesses: 6,\n   trimmed: false,\n};\n\n// when setting all options in a single object\nconst git: SimpleGit = simpleGit(options);\n\n// or split out the baseDir, supported for backward compatibility\nconst git: SimpleGit = simpleGit('/some/path', { binary: 'git' });\n```\n\nThe first argument can be either a string (representing the working directory for `git` commands to run in),\n`SimpleGitOptions` object or `undefined`, the second parameter is an optional `SimpleGitOptions` object.\n\nAll configuration properties are optional, the default values are shown in the example above.\n\n## Per-command Configuration\n\nTo prefix the commands run by `simple-git` with custom configuration not saved in the git config (ie: using the\n`-c` command) supply a `config` option to the instance builder:\n\n```typescript\n// configure the instance with a custom configuration property\nconst git: SimpleGit = simpleGit('/some/path', { config: ['http.proxy=someproxy'] });\n\n// any command executed will be prefixed with this config\n// runs: git -c http.proxy=someproxy pull\nawait git.pull();\n```\n\n## Configuring Plugins\n\n- [AbortController](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-ABORT-CONTROLLER.md)\n   Terminate pending and future tasks in a `simple-git` instance (requires node >= 16).\n\n- [Completion Detection](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-COMPLETION-DETECTION.md)\n   Customise how `simple-git` detects the end of a `git` process.\n\n- [Error Detection](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-ERRORS.md)\n   Customise the detection of errors from the underlying `git` process.\n\n- [Progress Events](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-PROGRESS-EVENTS.md)\n   Receive progress events as `git` works through long-running processes.\n\n- [Spawned Process Ownership](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-SPAWN-OPTIONS.md)\n   Configure the system `uid` / `gid` to use for spawned `git` processes.\n\n- [Timeout](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-TIMEOUT.md)\n   Automatically kill the wrapped `git` process after a rolling timeout.\n\n- [Unsafe](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md)\n   Selectively opt out of `simple-git` safety precautions - for advanced users and use cases.\n\n## Using Task Promises\n\nEach task in the API returns the `simpleGit` instance for chaining together multiple tasks, and each\nstep in the chain is also a `Promise` that can be `await` ed in an `async` function or returned in a\n`Promise` chain.\n\n```javascript\nconst git = simpleGit();\n\n// chain together tasks to await final result\nawait git.init().addRemote('origin', '...remote.git');\n\n// or await each step individually\nawait git.init();\nawait git.addRemote('origin', '...remote.git');\n```\n\n### Catching errors in async code\n\nTo catch errors in async code, either wrap the whole chain in a try/catch:\n\n```javascript\nconst git = simpleGit();\ntry {\n   await git.init();\n   await git.addRemote(name, repoUrl);\n} catch (e) {\n   /* handle all errors here */\n}\n```\n\nor catch individual steps to permit the main chain to carry on executing rather than\njumping to the final `catch` on the first error:\n\n```javascript\nconst git = simpleGit();\ntry {\n   await git.init().catch(ignoreError);\n   await git.addRemote(name, repoUrl);\n} catch (e) {\n   /* handle all errors here */\n}\n\nfunction ignoreError() {}\n```\n\n## Using Task Callbacks\n\nIn addition to returning a promise, each method can also be called with a trailing callback argument\nto handle the result of the task.\n\n```javascript\nconst git = simpleGit();\ngit.init(onInit).addRemote('origin', 'git@github.com:steveukx/git-js.git', onRemoteAdd);\n\nfunction onInit(err, initResult) {}\nfunction onRemoteAdd(err, addRemoteResult) {}\n```\n\nIf any of the steps in the chain result in an error, all pending steps will be cancelled, see the\n[parallel tasks](<(#concurrent--parallel-requests)>) section for more information on how to run tasks in parallel rather than in series .\n\n## Task Responses\n\nWhether using a trailing callback or a Promise, tasks either return the raw `string` or `Buffer` response from the\n`git` binary, or where possible a parsed interpretation of the response.\n\nFor type details of the response for each of the tasks, please see the [TypeScript definitions](https://github.com/steveukx/git-js/blob/main/simple-git/typings/simple-git.d.ts).\n\n# Upgrading from Version 2\n\nFrom v3 of `simple-git` you can now import as an ES module, Common JS module or as TypeScript with bundled type\ndefinitions. Upgrading from v2 will be seamless for any application not relying on APIs that were marked as deprecated\nin v2 (deprecation notices were logged to `stdout` as `console.warn` in v2).\n\n# API\n\n| API                                                  | What it does                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| ---------------------------------------------------- |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `.add([fileA, ...], handlerFn)`                      | adds one or more files to be under source control                                                                                                                                                                                                                                                                                                                                                                            |\n| `.addAnnotatedTag(tagName, tagMessage, handlerFn)`   | adds an annotated tag to the head of the current branch                                                                                                                                                                                                                                                                                                                                                                      |\n| `.addTag(name, handlerFn)`                           | adds a lightweight tag to the head of the current branch                                                                                                                                                                                                                                                                                                                                                                     |\n| `.catFile(options, [handlerFn])`                     | generate `cat-file` detail, `options` should be an array of strings as supported arguments to the [cat-file](https://git-scm.com/docs/git-cat-file) command                                                                                                                                                                                                                                                                  |\n| `.checkIgnore([filepath, ...], handlerFn)`           | checks if filepath excluded by .gitignore rules                                                                                                                                                                                                                                                                                                                                                                              |\n| `.clearQueue()`                                      | immediately clears the queue of pending tasks (note: any command currently in progress will still call its completion callback)                                                                                                                                                                                                                                                                                              |\n| `.commit(message, handlerFn)`                        | commits changes in the current working directory with the supplied message where the message can be either a single string or array of strings to be passed as separate arguments (the `git` command line interface converts these to be separated by double line breaks)                                                                                                                                                    |\n| `.commit(message, [fileA, ...], options, handlerFn)` | commits changes on the named files with the supplied message, when supplied, the optional options object can contain any other parameters to pass to the commit command, setting the value of the property to be a string will add `name=value` to the command string, setting any other type of value will result in just the key from the object being passed (ie: just `name`), an example of setting the author is below |\n| `.customBinary(gitPath)`                             | sets the command to use to reference git, allows for using a git binary not available on the path environment variable                                                                                                                                                                                                                                                                                                       |\n| `.env(name, value)`                                  | Set environment variables to be passed to the spawned child processes, [see usage in detail below](#environment-variables).                                                                                                                                                                                                                                                                                                  |\n| `.exec(handlerFn)`                                   | calls a simple function in the current step                                                                                                                                                                                                                                                                                                                                                                                  |\n| `.fetch([options, ] handlerFn)`                      | update the local working copy database with changes from the default remote repo and branch, when supplied the options argument can be a standard [options object](#how-to-specify-options) either an array of string commands as supported by the [git fetch](https://git-scm.com/docs/git-fetch).                                                                                                                          |\n| `.fetch(remote, branch, handlerFn)`                  | update the local working copy database with changes from a remote repo                                                                                                                                                                                                                                                                                                                                                       |\n| `.fetch(handlerFn)`                                  | update the local working copy database with changes from the default remote repo and branch                                                                                                                                                                                                                                                                                                                                  |\n| `.outputHandler(handlerFn)`                          | attaches a handler that will be called with the name of the command being run and the `stdout` and `stderr` [readable streams](https://nodejs.org/api/stream.html#stream_class_stream_readable) created by the [child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess) running that command, see [examples](https://github.com/steveukx/git-js/blob/main/examples/git-output-handler.md) |\n| `.raw(args, [handlerFn])`                            | Execute any arbitrary array of commands supported by the underlying git binary. When the git process returns a non-zero signal on exit and it printed something to `stderr`, the command will be treated as an error, otherwise treated as a success.                                                                                                                                                                        |\n| `.rebase([options,] handlerFn)`                      | Rebases the repo, `options` should be supplied as an array of string parameters supported by the [git rebase](https://git-scm.com/docs/git-rebase) command, or an object of options (see details below for option formats).                                                                                                                                                                                                  |\n| `.revert(commit , [options , [handlerFn]])`          | reverts one or more commits in the working copy. The commit can be any regular commit-ish value (hash, name or offset such as `HEAD~2`) or a range of commits (eg: `master~5..master~2`). When supplied the [options](#how-to-specify-options) argument contain any options accepted by [git-revert](https://git-scm.com/docs/git-revert).                                                                                   |\n| `.rm([fileA, ...], handlerFn)`                       | removes any number of files from source control                                                                                                                                                                                                                                                                                                                                                                              |\n| `.rmKeepLocal([fileA, ...], handlerFn)`              | removes files from source control but leaves them on disk                                                                                                                                                                                                                                                                                                                                                                    |\n| `.tag(args[], handlerFn)`                            | Runs any supported [git tag](https://git-scm.com/docs/git-tag) commands with arguments passed as an array of strings .                                                                                                                                                                                                                                                                                                       |\n| `.tags([options, ] handlerFn)`                       | list all tags, use the optional [options](#how-to-specify-options) object to set any options allows by the [git tag](https://git-scm.com/docs/git-tag) command. Tags will be sorted by semantic version number by default, for git versions 2.7 and above, use the `--sort` option to set a custom sort.                                                                                                                     |\n\n## git apply\n\n-  `.applyPatch(patch, [options])` applies a single string patch (as generated by `git diff`), optionally configured with the supplied [options](#how-to-specify-options) to set any arguments supported by the [apply](https://git-scm.com/docs/git-apply) command. Returns the unmodified string response from `stdout` of the `git` binary.\n-  `.applyPatch(patches, [options])` applies an array of string patches (as generated by `git diff`), optionally configured with the supplied [options](#how-to-specify-options) to set any arguments supported by the [apply](https://git-scm.com/docs/git-apply) command. Returns the unmodified string response from `stdout` of the `git` binary.\n\n## git branch\n\n-  `.branch([options])` uses the supplied [options](#how-to-specify-options) to run any arguments supported by the [branch](https://git-scm.com/docs/git-branch) command. Either returns a [BranchSummaryResult](https://github.com/steveukx/git-js/blob/main/simple-git/src/lib/responses/BranchSummary.ts) instance when listing branches, or a [BranchSingleDeleteResult](https://github.com/steveukx/git-js/blob/main/simple-git/typings/response.d.ts) type object when the options included `-d`, `-D` or `--delete` which cause it to delete a named branch rather than list existing branches.\n-  `.branchLocal()` gets a list of local branches as a [BranchSummaryResult](https://github.com/steveukx/git-js/blob/main/simple-git/src/lib/responses/BranchSummary.ts) instance\n-  `.deleteLocalBranch(branchName)` deletes a local branch - treats a failed attempt as an error\n-  `.deleteLocalBranch(branchName, forceDelete)` deletes a local branch, optionally explicitly setting forceDelete to true - treats a failed attempt as an error\n-  `.deleteLocalBranches(branchNames)` deletes multiple local branches\n-  `.deleteLocalBranches(branchNames, forceDelete)` deletes multiple local branches, optionally explicitly setting forceDelete to true\n\n## git clean\n\n-  `.clean(mode)` clean the working tree. Mode should be \"n\" - dry run or \"f\" - force\n-  `.clean(cleanSwitches [,options])` set `cleanSwitches` to a string containing any number of the supported single character options, optionally with a standard [options](#how-to-specify-options) object\n\n## git checkout\n\n-  `.checkout(checkoutWhat , [options])` - checks out the supplied tag, revision or branch when supplied as a string,\n   additional arguments supported by [git checkout](https://git-scm.com/docs/git-checkout) can be supplied as an\n   [options](#how-to-specify-options) object/array.\n\n-  `.checkout(options)` - check out a tag or revision using the supplied [options](#how-to-specify-options)\n\n-  `.checkoutBranch(branchName, startPoint)` - checks out a new branch from the supplied start point.\n\n-  `.checkoutLocalBranch(branchName)` - checks out a new local branch\n\n## git clone\n\n-  `.clone(repoPath, [localPath, [options]])` clone a remote repo at `repoPath` to a local directory at `localPath`, optionally with a standard [options](#how-to-specify-options) object of additional arguments to include between `git clone` and the trailing `repo local` arguments\n-  `.clone(repoPath, [options])` clone a remote repo at `repoPath` to a directory in the current working directory with the same name as the repo\n\n-  `mirror(repoPath, [localPath, [options]])` behaves the same as the `.clone` interface with the [`--mirror` flag](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---mirror) enabled.\n\n## git config\n\n-  `.addConfig(key, value, append = false, scope = 'local')` add a local configuration property, when `append` is set to\n   `true` the configuration setting is appended to rather than overwritten in the local config. Use the `scope` argument\n   to pick where to save the new configuration setting (use the exported `GitConfigScope` enum, or equivalent string\n   values - `worktree | local | global | system`).\n-  `.getConfig(key)` get the value(s) for a named key as a [ConfigGetResult](https://github.com/steveukx/git-js/blob/main/simple-git/typings/response.d.ts)\n-  `.getConfig(key, scope)` get the value(s) for a named key as a [ConfigGetResult](https://github.com/steveukx/git-js/blob/main/simple-git/typings/response.d.ts) but limit the\n   scope of the properties searched to a single specified scope (use the exported `GitConfigScope` enum, or equivalent\n   string values - `worktree | local | global | system`)\n\n-  `.listConfig()` reads the current configuration and returns a [ConfigListSummary](https://github.com/steveukx/git-js/blob/main/simple-git/src/lib/responses/ConfigList.ts)\n-  `.listConfig(scope: GitConfigScope)` as with `listConfig` but returns only those items in a specified scope (note that configuration values are overlaid on top of each other to build the config `git` will actually use - to resolve the configuration you are using use `(await listConfig()).all` without the scope argument)\n\n## git diff\n\n-  `.diff([ options ])` get the diff of the current repo compared to the last commit, optionally including\n   any number of other arguments supported by [git diff](https://git-scm.com/docs/git-diff) supplied as an\n   [options](#how-to-specify-options) object/array. Returns the raw `diff` output as a string.\n\n-  `.diffSummary([ options ])` creates a [DiffResult](https://github.com/steveukx/git-js/blob/main/simple-git/src/lib/responses/DiffSummary.ts)\n   to summarise the diff for files in the repo. Uses the `--stat` format by default which can be overridden\n   by passing in any of the log format commands (eg: `--numstat` or `--name-stat`) as part of the optional\n   [options](#how-to-specify-options) object/array.\n\n## git grep [examples](https://github.com/steveukx/git-js/blob/main/examples/git-grep.md)\n\n-  `.grep(searchTerm)` searches for a single search term across all files in the working tree, optionally passing a standard [options](#how-to-specify-options) object of additional arguments\n-  `.grep(grepQueryBuilder(...))` use the `grepQueryBuilder` to create a complex query to search for, optionally passing a standard [options](#how-to-specify-options) object of additional arguments\n\n## git hash-object\n\n-  `.hashObject(filePath, write = false)` computes the object ID value for the contents of the named file (which can be\n   outside of the work tree), optionally writing the resulting value to the object database.\n\n## git init\n\n-  `.init(bare , [options])` initialize a repository using the boolean `bare` parameter to intialise a bare repository.\n   Any number of other arguments supported by [git init](https://git-scm.com/docs/git-init) can be supplied as an\n   [options](#how-to-specify-options) object/array.\n\n-  `.init([options])` initialize a repository using any arguments supported by\n   [git init](https://git-scm.com/docs/git-init) supplied as an [options](#how-to-specify-options) object/array.\n\n## git log\n\n-  `.log([options])` list commits between `options.from` and `options.to` tags or branch (if not specified will\n   show all history). Use the `options` object to set any [options](#how-to-specify-options) supported by the\n   [git log](https://git-scm.com/docs/git-log) command or any of the following:\n\n   -  `options.file` - the path to a file in your repository to only consider this path.\n   -  `options.format` - custom log format object, keys are the property names used on the returned object, values are the format string from [pretty formats](https://git-scm.com/docs/pretty-formats#Documentation/pretty-formats.txt)\n   -  `options.from` - sets the oldest commit in the range to return, use along with `options.to` to set a bounded range\n   -  `options.mailMap` - defaults to true, enables the use of [mail map](https://git-scm.com/docs/gitmailmap) in returned values for email and name from the default format\n   -  `options.maxCount` - equivalent to setting the `--max-count` option\n   -  `options.multiLine` - enables multiline body values in the default format (disabled by default)\n   -  `options.splitter` - the character sequence to use as a delimiter between fields in the log, should be a value that doesn't appear in any log message (defaults to `ò`)\n   -  `options.strictDate` - switches the authored date value from an ISO 8601-like format to be strict ISO 8601 format\n   -  `options.symmetric` - defaults to true, enables [symmetric revision range](https://git-scm.com/docs/gitrevisions#_dotted_range_notations) rather than a two-dot range\n   -  `options.to` - sets the newset commit in the range to return, use along with `options.from` to set a bounded range\n\n## git merge\n\n-  `.merge(options)` runs a merge using any configuration [options](#how-to-specify-options) supported\n   by [git merge](https://git-scm.com/docs/git-merge).\n   Conflicts during the merge result in an error response, the response is an instance of\n   [MergeSummary](https://github.com/steveukx/git-js/blob/main/simple-git/src/lib/responses/MergeSummary.ts) whether it was an error or success.\n   When successful, the MergeSummary has all detail from a the [PullSummary](https://github.com/steveukx/git-js/blob/main/simple-git/src/lib/responses/PullSummary.ts)\n   along with summary detail for the merge.\n   When the merge failed, the MergeSummary contains summary detail for why the merge failed and which files\n   prevented the merge.\n\n-  `.mergeFromTo(remote, branch , [options])` - merge from the specified branch into the currently checked out branch,\n   similar to `.merge` but with the `remote` and `branch` supplied as strings separately to any additional\n   [options](#how-to-specify-options).\n\n## git mv\n\n-  `.mv(from, to)` rename or move a single file at `from` to `to`\n\n-  `.mv(from, to)` move all files in the `from` array to the `to` directory\n\n## git pull\n\n-  `.pull([options])` pulls all updates from the default tracked remote, any arguments supported by\n   [git pull](https://git-scm.com/docs/git-pull) can be supplied as an [options](#how-to-specify-options) object/array.\n\n-  `.pull(remote, branch, [options])` pulls all updates from the specified remote branch (eg 'origin'/'master') along\n   with any custom [options](#how-to-specify-options) object/array\n\n## git push\n\n-  `.push([options])` pushes to a named remote/branch using any supported [options](#how-to-specify-options)\n   from the [git push](https://git-scm.com/docs/git-push) command. Note that `simple-git` enforces the use of\n   `--verbose --porcelain` options in order to parse the response. You don't need to supply these options.\n\n-  `.push(remote, branch, [options])` pushes to a named remote/branch, supports additional\n   [options](#how-to-specify-options) from the [git push](https://git-scm.com/docs/git-push) command.\n\n-  `.pushTags(remote, [options])` pushes local tags to a named remote (equivalent to using `.push([remote, '--tags'])`)\n\n## git remote\n\n-  `.addRemote(name, repo, [options])` adds a new named remote to be tracked as `name` at the path `repo`, optionally with any supported [options](#how-to-specify-options) for the [git add](https://git-scm.com/docs/git-remote#Documentation/git-remote.txt-emaddem) call.\n-  `.getRemotes([verbose])` gets a list of the named remotes, supply the optional `verbose` option as `true` to include the URLs and purpose of each ref\n-  `.listRemote([options])` lists remote repositories - there are so many optional arguments in the underlying `git ls-remote` call, just supply any you want to use as the optional [options](#how-to-specify-options) eg: `git.listRemote(['--heads', '--tags'], console.log)`\n-  `.remote([options])` runs a `git remote` command with any number of [options](#how-to-specify-options)\n-  `.removeRemote(name)` removes the named remote\n\n## git reset\n\n-  `.reset(resetMode, [resetOptions])` resets the repository, sets the reset mode to one of the supported types (use a constant from\n   the exported `ResetMode` enum, or a string equivalent: `mixed`, `soft`, `hard`, `merge`, `keep`). Any number of other arguments\n   supported by [git reset](https://git-scm.com/docs/git-reset) can be supplied as an [options](#how-to-specify-options) object/array.\n\n-  `.reset(resetOptions)` resets the repository with the supplied [options](#how-to-specify-options)\n\n-  `.reset()` resets the repository in `soft` mode.\n\n## git rev-parse / repo properties\n\n-  `.revparse([options])` sends the supplied [options](#how-to-specify-options) to [git rev-parse](https://git-scm.com/docs/git-rev-parse) and returns the string response from `git`.\n\n-  `.checkIsRepo()` gets whether the current working directory is a descendent of a git repository.\n-  `.checkIsRepo('bare')` gets whether the current working directory is within a bare git repo (see either [git clone --bare](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---bare) or [git init --bare](https://git-scm.com/docs/git-init#Documentation/git-init.txt---bare)).\n-  `.checkIsRepo('root')` gets whether the current working directory is the root directory for a repo (sub-directories will return false).\n\n## git show\n\n- `.show(options)` show various types of objects for example the file content at a certain commit. `options` is the single value string or any [options](#how-to-specify-options) supported by the [git show](https://git-scm.com/docs/git-show) command.\n- `.showBuffer(options)` same as the `.show` API, but returns the Buffer content directly to allow for showing binary file content.\n\n## git status\n\n-  `.status([options])` gets the status of the current repo, resulting in a [StatusResult](https://github.com/steveukx/git-js/blob/main/simple-git/typings/response.d.ts). Additional arguments\n   supported by [git status](https://git-scm.com/docs/git-status) can be supplied as an [options](#how-to-specify-options) object/array.\n\n## git submodule\n\n-  `.subModule(options)` Run a `git submodule` command with on or more arguments passed in as an [options](#how-to-specify-options) array or object\n-  `.submoduleAdd(repo, path)` Adds a new sub module\n-  `.submoduleInit([options]` Initialises sub modules, the optional [options](#how-to-specify-options) argument can be used to pass extra options to the `git submodule init` command.\n-  `.submoduleUpdate(subModuleName, [options])` Updates sub modules, can be called with a sub module name and [options](#how-to-specify-options), just the options or with no arguments\n\n## git stash\n\n- `.stash([ options ])` Stash the working directory, optional first argument can be an array of string arguments or [options](#how-to-specify-options) object to pass to the [git stash](https://git-scm.com/docs/git-stash) command.\n\n- `.stashList([ options ])` Retrieves the stash list, optional first argument can be an object in the same format as used in [git log](#git-log).\n\n## git version [examples](https://github.com/steveukx/git-js/blob/main/examples/git-version.md)\n\n- `.version()` retrieve the major, minor and patch for the currently installed `git`. Use the `.installed` property of the result to determine whether `git` is accessible on the path.\n\n## changing the working directory [examples](https://github.com/steveukx/git-js/blob/main/examples/git-change-working-directory.md)\n\n-  `.cwd(workingDirectory)` Sets the working directory for all future commands - note, this will change the working for the root instance, any chain created from the root will also be changed.\n-  `.cwd({ path, root = false })` Sets the working directory for all future commands either in the current chain of commands (where `root` is omitted or set to `false`) or in the main instance (where `root` is `true`).\n\n## How to Specify Options\n\nWhere the task accepts custom options (eg: `pull` or `commit`), these can be supplied as an object, the keys of which\nwill all be merged as trailing arguments in the command string, or as a simple array of strings.\n\n### Options as an Object\n\nWhen the value of the property in the options object is a `string`, that name value\npair will be included in the command string as `name=value`. For example:\n\n```javascript\n// results in 'git pull origin master --no-rebase'\ngit.pull('origin', 'master', { '--no-rebase': null });\n\n// results in 'git pull origin master --rebase=true'\ngit.pull('origin', 'master', { '--rebase': 'true' });\n```\n\n### Options as an Array\n\nOptions can also be supplied as an array of strings to be merged into the task's commands\nin the same way as when an object is used:\n\n```javascript\n// results in 'git pull origin master --no-rebase'\ngit.pull('origin', 'master', ['--no-rebase']);\n```\n\n# Release History\n\nMajor release 3.x changes the packaging of the library, making it consumable as a CommonJS module, ES module as well as\nwith TypeScript (see [usage](#usage) above). The library is now published as a single file, so please ensure your\napplication hasn't been making use of non-documented APIs by importing from a sub-directory path.\n\nSee also:\n\n- [release notes v3](https://github.com/steveukx/git-js/blob/main/simple-git/CHANGELOG.md)\n- [release notes v2](https://github.com/steveukx/git-js/blob/main/docs/RELEASE-NOTES-V2.md)\n\n# Concurrent / Parallel Requests\n\nWhen the methods of `simple-git` are chained together, they create an execution chain that will run in series, useful\nfor when the tasks themselves are order-dependent, eg:\n\n```typescript\nsimpleGit().init().addRemote('origin', 'https://some-repo.git').fetch();\n```\n\nEach task requires that the one before it has been run successfully before it is called, any errors in a\nstep of the chain should prevent later steps from being attempted.\n\nWhen the methods of `simple-git` are called on the root instance (ie: `git = simpleGit()`) rather than chained\noff another task, it starts a new chain and will not be affected failures in tasks already being run. Useful\nfor when the tasks are independent of each other, eg:\n\n```typescript\nconst git = simpleGit();\nconst results = await Promise.all([\n   git.raw('rev-parse', '--show-cdup').catch(swallow),\n   git.raw('rev-parse', '--show-prefix').catch(swallow),\n]);\nfunction swallow(err) {\n   return null;\n}\n```\n\nEach `simple-git` instance limits the number of spawned child processes that can be run simultaneously and\nmanages the queue of pending tasks for you. Configure this value by passing an options object to the\n`simpleGit` function, eg:\n\n```typescript\nconst git = simpleGit({ maxConcurrentProcesses: 10 });\n```\n\nTreating tasks called on the root instance as the start of separate chains is a change to the behaviour of\n`simple-git` and was added in version `2.11.0`.\n\n# Complex Requests\n\nWhen no suitable wrapper exists in the interface for creating a request, run the command directly\nusing `git.raw([...], handler)`. The array of commands are passed directly to the `git` binary:\n\n```javascript\nconst path = '/path/to/repo';\nconst commands = ['config', '--global', 'advice.pushNonFastForward', 'false'];\n\n// using an array of commands and node-style callback\nsimpleGit(path).raw(commands, (err, result) => {\n   // err is null unless this command failed\n   // result is the raw output of this command\n});\n\n// using a var-args of strings and awaiting rather than using the callback\nconst result = await simpleGit(path).raw(...commands);\n\n// automatically trim trailing white-space in responses\nconst result = await simpleGit(path, { trimmed: true }).raw(...commands);\n```\n\n# Authentication\n\nThe easiest way to supply a username / password to the remote host is to include it in the URL, for example:\n\n```javascript\nconst USER = 'something';\nconst PASS = 'somewhere';\nconst REPO = 'github.com/username/private-repo';\n\nconst remote = `https://${USER}:${PASS}@${REPO}`;\n\nsimpleGit()\n   .clone(remote)\n   .then(() => console.log('finished'))\n   .catch((err) => console.error('failed: ', err));\n```\n\nBe sure to not enable debug logging when using this mechanism for authentication\nto ensure passwords aren't logged to stdout.\n\n# Environment Variables\n\nPass one or more environment variables to the child processes spawned by `simple-git` with the `.env` method which\nsupports passing either an object of name=value pairs or setting a single variable at a time:\n\n```javascript\nconst GIT_SSH_COMMAND = 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no';\n\nsimpleGit()\n   .env('GIT_SSH_COMMAND', GIT_SSH_COMMAND)\n   .status((err, status) => {\n      /*  */\n   });\n\nsimpleGit()\n   .env({ ...process.env, GIT_SSH_COMMAND })\n   .status()\n   .then((status) => {})\n   .catch((err) => {});\n```\n\nNote - when passing environment variables into the child process, these will replace the standard `process.env`\nvariables, the example above creates a new object based on `process.env` but with the `GIT_SSH_COMMAND` property added.\n\n# Exception Handling\n\nWhen the `git` process exits with a non-zero status (or in some cases like `merge` the git process exits with a\nsuccessful zero code but there are conflicts in the merge) the task will reject with a `GitError` when there is no\navailable parser to handle the error or a\n`GitResponseError` for when there is.\n\nSee the `err` property of the callback:\n\n```javascript\ngit.merge((err, mergeSummary) => {\n   if (err.git) {\n      mergeSummary = err.git; // the failed mergeSummary\n   }\n});\n```\n\nCatch errors with try/catch in async code:\n\n```javascript\ntry {\n   const mergeSummary = await git.merge();\n   console.log(`Merged ${mergeSummary.merges.length} files`);\n} catch (err) {\n   // err.message - the string summary of the error\n   // err.stack - some stack trace detail\n   // err.git - where a parser was able to run, this is the parsed content\n\n   console.error(`Merge resulted in ${err.git.conflicts.length} conflicts`);\n}\n```\n\nCatch errors with a `.catch` on the promise:\n\n```javascript\nconst mergeSummary = await git.merge().catch((err) => {\n   if (err.git) {\n      return err.git;\n   } // the unsuccessful mergeSummary\n   throw err; // some other error, so throw\n});\n\nif (mergeSummary.failed) {\n   console.error(`Merge resulted in ${mergeSummary.conflicts.length} conflicts`);\n}\n```\n\nWith typed errors available in TypeScript\n\n```typescript\nimport { simpleGit, MergeSummary, GitResponseError } from 'simple-git';\ntry {\n   const mergeSummary = await simpleGit().merge();\n   console.log(`Merged ${mergeSummary.merges.length} files`);\n} catch (err) {\n   // err.message - the string summary of the error\n   // err.stack - some stack trace detail\n   // err.git - where a parser was able to run, this is the parsed content\n   const mergeSummary: MergeSummary = (err as GitResponseError<MergeSummary>).git;\n   const conflicts = mergeSummary?.conflicts || [];\n\n   console.error(`Merge resulted in ${conflicts.length} conflicts`);\n}\n```\n\n# Troubleshooting / FAQ\n\n### Enable logging\n\nSee the [debug logging guide](https://github.com/steveukx/git-js/blob/main/docs/DEBUG-LOGGING-GUIDE.md) for logging examples and how to\nmake use of the [debug](https://www.npmjs.com/package/debug) library's programmatic interface\nin your application.\n\n### Enable Verbose Logging\n\nSee the [debug logging guide](https://github.com/steveukx/git-js/blob/main/docs/DEBUG-LOGGING-GUIDE.md#verbose-logging-options) for\nthe full list of verbose logging options to use with the\n[debug](https://www.npmjs.com/package/debug) library.\n\n### Every command returns ENOENT error message\n\nThere are a few potential reasons:\n\n-  `git` isn't available as a binary for the user running the main `node` process, custom paths to the binary can be used\n   with the `.customBinary(...)` API option.\n\n-  the working directory passed in to the main `simple-git` function isn't accessible, check it is read/write accessible\n   by the user running the `node` process. This library uses\n   [@kwsites/file-exists](https://www.npmjs.com/package/@kwsites/file-exists) to validate the working directory exists,\n   to output its logs add `@kwsites/file-exists` to your `DEBUG` environment variable. eg:\n\n   `DEBUG=@kwsites/file-exists,simple-git node ./your-app.js`\n\n### Log format fails\n\nThe properties of `git log` are fetched using the `--pretty=format` argument which supports different tokens depending\non the version of `git` - for example the `%D` token used to show the refs was added in git `2.2.3`, for any version\nbefore that please ensure you are supplying your own format object with properties supported by the version of git you\nare using.\n\nFor more details of the supported tokens, please see the\n[official `git log` documentation](https://git-scm.com/docs/git-log#_pretty_formats)\n\n### Log response properties are out of order\n\nThe properties of `git.log` are fetched using the character sequence `ò` as a delimiter. If your commit messages\nuse this sequence, supply a custom `splitter` in the options, for example: `git.log({ splitter: '💻' })`\n\n### Pull / Diff / Merge summary responses don't recognise any files\n\n-  Enable verbose logs with the environment variable `DEBUG=simple-git:task:*,simple-git:output:*`\n-  Check the output (for example: `simple-git:output:diff:1 [stdOut] 1 file changed, 1 insertion(+)`)\n-  Check the `stdOut` output is the same as you would expect to see when running the command directly in terminal\n-  Check the language used in the response is english locale\n\nIn some cases `git` will show progress messages or additional detail on error states in the output for\n`stdErr` that will help debug your issue, these messages are also included in the verbose log.\n\n### Legacy Node Versions\n\nFrom `v3.x`, `simple-git` will drop support for `node.js` version 10 or below, to use in a lower version of node will\nresult in errors such as:\n\n-  `Object.fromEntries is not a function`\n-  `Object.entries is not a function`\n-  `message.flatMap is not a function`\n\nTo resolve these issues, either upgrade to a newer version of node.js or ensure you are using the necessary polyfills\nfrom `core-js` - see [Legacy Node Versions](https://github.com/steveukx/git-js/blob/main/docs/LEGACY_NODE_VERSIONS.md).\n\n# Examples\n\n### using a pathspec to limit the scope of the task\n\nIf the `simple-git` API doesn't explicitly limit the scope of the task being run (ie: `git.add()` requires the files to\nbe added, but `git.status()` will run against the entire repo), add a `pathspec` to the command using trailing options:\n\n```typescript\nimport { simpleGit, pathspec } from \"simple-git\";\n\nconst git = simpleGit();\nconst wholeRepoStatus = await git.status();\nconst subDirStatusUsingOptArray = await git.status([pathspec('sub-dir')]);\nconst subDirStatusUsingOptObject = await git.status({ 'sub-dir': pathspec('sub-dir') });\n```\n\n### async await\n\n```javascript\nasync function status(workingDir) {\n   let statusSummary = null;\n   try {\n      statusSummary = await simpleGit(workingDir).status();\n   } catch (e) {\n      // handle the error\n   }\n\n   return statusSummary;\n}\n\n// using the async function\nstatus(__dirname + '/some-repo').then((status) => console.log(status));\n```\n\n### Initialise a git repo if necessary\n\n```javascript\nconst git = simpleGit(__dirname);\n\ngit.checkIsRepo()\n   .then((isRepo) => !isRepo && initialiseRepo(git))\n   .then(() => git.fetch());\n\nfunction initialiseRepo(git) {\n   return git.init().then(() => git.addRemote('origin', 'https://some.git.repo'));\n}\n```\n\n### Update repo and get a list of tags\n\n```javascript\nsimpleGit(__dirname + '/some-repo')\n   .pull()\n   .tags((err, tags) => console.log('Latest available tag: %s', tags.latest));\n\n// update repo and when there are changes, restart the app\nsimpleGit().pull((err, update) => {\n   if (update && update.summary.changes) {\n      require('child_process').exec('npm restart');\n   }\n});\n```\n\n### Starting a new repo\n\n```javascript\nsimpleGit()\n   .init()\n   .add('./*')\n   .commit('first commit!')\n   .addRemote('origin', 'https://github.com/user/repo.git')\n   .push('origin', 'master');\n```\n\n### push with `-u`\n\n```javascript\nsimpleGit()\n   .add('./*')\n   .commit('first commit!')\n   .addRemote('origin', 'some-repo-url')\n   .push(['-u', 'origin', 'master'], () => console.log('done'));\n```\n\n### Piping to the console for long-running tasks\n\nSee [progress events](https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-PROGRESS-EVENTS.md) for more details on\nlogging progress updates.\n\n```javascript\nconst git = simpleGit({\n   progress({ method, stage, progress }) {\n      console.log(`git.${method} ${stage} stage ${progress}% complete`);\n   },\n});\ngit.checkout('https://github.com/user/repo.git');\n```\n\n### Update repo and print messages when there are changes, restart the app\n\n```javascript\n// when using a chain\nsimpleGit()\n   .exec(() => console.log('Starting pull...'))\n   .pull((err, update) => {\n      if (update && update.summary.changes) {\n         require('child_process').exec('npm restart');\n      }\n   })\n   .exec(() => console.log('pull done.'));\n\n// when using async and optional chaining\nconst git = simpleGit();\nconsole.log('Starting pull...');\nif ((await git.pull())?.summary.changes) {\n   require('child_process').exec('npm restart');\n}\nconsole.log('pull done.');\n```\n\n### Get a full commits list, and then only between 0.11.0 and 0.12.0 tags\n\n```javascript\nconsole.log(await simpleGit().log());\nconsole.log(await simpleGit().log('0.11.0', '0.12.0'));\n```\n\n### Set the local configuration for author, then author for an individual commit\n\n```javascript\nsimpleGit()\n   .addConfig('user.name', 'Some One')\n   .addConfig('user.email', 'some@one.com')\n   .commit('committed as \"Some One\"', 'file-one')\n   .commit('committed as \"Another Person\"', 'file-two', {\n      '--author': '\"Another Person <another@person.com>\"',\n   });\n```\n\n### Get remote repositories\n\n```javascript\nsimpleGit().listRemote(['--get-url'], (err, data) => {\n   if (!err) {\n      console.log('Remote url for repository at ' + __dirname + ':');\n      console.log(data);\n   }\n});\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/simple-git/-/simple-git-3.20.0.tgz#ff9c3f736d6b2bf0e3510209569d206aac84833d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/simple-git/-/simple-git-3.20.0.tgz",
    "hash": "ff9c3f736d6b2bf0e3510209569d206aac84833d",
    "integrity": "sha512-ozK8tl2hvLts8ijTs18iFruE+RoqmC/mqZhjs/+V7gS5W68JpJ3+FCTmLVqmR59MaUQ52MfGQuWsIqfsTbbJ0Q==",
    "registry": "npm",
    "packageName": "simple-git",
    "cacheIntegrity": "sha512-ozK8tl2hvLts8ijTs18iFruE+RoqmC/mqZhjs/+V7gS5W68JpJ3+FCTmLVqmR59MaUQ52MfGQuWsIqfsTbbJ0Q== sha1-/5w/c21rK/DjUQIJVp0gaqyEgz0="
  },
  "registry": "npm",
  "hash": "ff9c3f736d6b2bf0e3510209569d206aac84833d"
}