{
  "manifest": {
    "name": "async-sema",
    "version": "3.1.1",
    "description": "Semaphore using `async` and `await`",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/vercel/async-sema.git"
    },
    "author": {
      "name": "Olli Vanhoja"
    },
    "keywords": [
      "semaphore",
      "async",
      "await"
    ],
    "homepage": "https://github.com/vercel/async-sema",
    "bugs": {
      "url": "https://github.com/vercel/async-sema/issues"
    },
    "license": "MIT",
    "files": [
      "lib"
    ],
    "main": "lib/index.js",
    "scripts": {
      "build": "tsc",
      "lint:staged": "lint-staged",
      "prepublishOnly": "yarn build",
      "prettier": "prettier --write --single-quote './{src,test}/**/*.ts'",
      "test": "jest"
    },
    "devDependencies": {
      "@types/jest": "27.0.1",
      "@types/node": "16.6.1",
      "jest": "27.0.6",
      "lint-staged": "11.1.2",
      "pre-commit": "1.2.2",
      "prettier": "2.3.2",
      "ts-jest": "27.0.4",
      "typescript": "4.3.5"
    },
    "pre-commit": "lint:staged",
    "lint-staged": {
      "*.{js,ts}": [
        "prettier --write --single-quote",
        "git add"
      ]
    },
    "jest": {
      "preset": "ts-jest",
      "verbose": false,
      "testURL": "http://localhost/"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-async-sema-3.1.1-e527c08758a0f8f6f9f15f799a173ff3c40ea808-integrity/node_modules/async-sema/package.json",
    "readmeFilename": "readme.md",
    "readme": "# async-sema\n\nThis is a semaphore implementation for use with `async` and `await`. The\nimplementation follows the traditional definition of a semaphore rather than the\ndefinition of an asynchronous semaphore seen in some js community examples.\nWhere as the latter one generally allows every defined task to proceed\nimmediately and synchronizes at the end, async-sema allows only a selected\nnumber of tasks to proceed at once while the rest will remain waiting.\n\nAsync-sema manages the semaphore count as a list of tokens instead of a single\nvariable containing the number of available resources. This enables an\ninteresting application of managing the actual resources with the semaphore\nobject itself. To make it practical the constructor for Sema includes an option\nfor providing an init function for the semaphore tokens. Use of a custom token\ninitializer is demonstrated in `examples/pooling.js`.\n\n## Usage\n\nFirstly, add the package to your project's `dependencies`:\n\n```bash\nnpm install --save async-sema\n```\n\nor\n\n```bash\nyarn add async-sema\n```\n\nThen start using it like shown in the following example. Check more\nuse case examples [here](./examples).\n\n## Example\n\n```js\nconst { Sema } = require('async-sema');\nconst s = new Sema(\n  4, // Allow 4 concurrent async calls\n  {\n    capacity: 100 // Prealloc space for 100 tokens\n  }\n);\n\nasync function fetchData(x) {\n  await s.acquire()\n  try {\n    console.log(s.nrWaiting() + ' calls to fetch are waiting')\n    // ... do some async stuff with x\n  } finally {\n    s.release();\n  }\n}\n\nconst data = await Promise.all(array.map(fetchData));\n```\n\nThe package also offers a simple rate limiter utilizing the semaphore\nimplementation.\n\n```js\nconst { RateLimit } = require('async-sema');\n\nasync function f() {\n  const lim = RateLimit(5); // rps\n\n  for (let i = 0; i < n; i++) {\n    await lim();\n    // ... do something async\n  }\n}\n```\n\n## API\n\n### Sema\n\n#### Constructor(nr, { initFn, pauseFn, resumeFn, capacity })\n\nCreates a semaphore object. The first argument is mandatory and the second\nargument is optional.\n\n- `nr` The maximum number of callers allowed to acquire the semaphore\n  concurrently.\n- `initFn` Function that is used to initialize the tokens used to manage\n  the semaphore. The default is `() => '1'`.\n- `pauseFn` An optional fuction that is called to opportunistically request\n  pausing the the incoming stream of data, instead of piling up waiting\n  promises and possibly running out of memory.\n  See [examples/pausing.js](./examples/pausing.js).\n- `resumeFn` An optional function that is called when there is room again\n  to accept new waiters on the semaphore. This function must be declared\n  if a `pauseFn` is declared.\n- `capacity` Sets the size of the preallocated waiting list inside the\n  semaphore. This is typically used by high performance where the developer\n  can make a rough estimate of the number of concurrent users of a semaphore.\n\n#### async drain()\n\nDrains the semaphore and returns all the initialized tokens in an array.\nDraining is an ideal way to ensure there are no pending async tasks, for\nexample before a process will terminate.\n\n#### nrWaiting()\n\nReturns the number of callers waiting on the semaphore, i.e. the number of\npending promises.\n\n#### tryAcquire()\n\nAttempt to acquire a token from the semaphore, if one is available immediately.\nOtherwise, return `undefined`.\n\n#### async acquire()\n\nAcquire a token from the semaphore, thus decrement the number of available\nexecution slots. If `initFn` is not used then the return value of the function\ncan be discarded.\n\n#### release(token)\n\nRelease the semaphore, thus increment the number of free execution slots. If\n`initFn` is used then the `token` returned by `acquire()` should be given as\nan argument when calling this function.\n\n### RateLimit(rps, { timeUnit, uniformDistribution })\n\nCreates a rate limiter function that blocks with a promise whenever the rate\nlimit is hit and resolves the promise once the call rate is within the limit\nset by `rps`. The second argument is optional.\n\nThe `timeUnit` is an optional argument setting the width of the rate limiting\nwindow in milliseconds. The default `timeUnit` is `1000 ms`, therefore making\nthe `rps` argument act as requests per second limit.\n\nThe `uniformDistribution` argument enforces a discrete uniform distribution over\ntime, instead of the default that allows hitting the function `rps` time and\nthen pausing for `timeWindow` milliseconds. Setting the `uniformDistribution`\noption is mainly useful in a situation where the flow of rate limit function\ncalls is continuous and and occuring faster than `timeUnit` (e.g. reading a\nfile) and not enabling it would cause the maximum number of calls to resolve\nimmediately (thus exhaust the limit immediately) and therefore the next bunch\ncalls would need to wait for `timeWindow` milliseconds. However if the flow is\nsparse then this option may make the\ncode run slower with no advantages.\n\n## Contributing\n\n1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2. Move into the directory of the clone: `cd async-sema`\n3. Link it to the global module directory of Node.js: `npm link`\n\nInside the project where you want to test your clone of the package, you can now either use `npm link async-sema` to link the clone to the local dependencies.\n\n## Author\n\nOlli Vanhoja ([@OVanhoja](https://twitter.com/OVanhoja))\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2021 Vercel, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/async-sema/-/async-sema-3.1.1.tgz#e527c08758a0f8f6f9f15f799a173ff3c40ea808",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/async-sema/-/async-sema-3.1.1.tgz",
    "hash": "e527c08758a0f8f6f9f15f799a173ff3c40ea808",
    "integrity": "sha512-tLRNUXati5MFePdAk8dw7Qt7DpxPB60ofAgn8WRhW6a2rcimZnYBP9oxHiv0OHy+Wz7kPMG+t4LGdt31+4EmGg==",
    "registry": "npm",
    "packageName": "async-sema",
    "cacheIntegrity": "sha512-tLRNUXati5MFePdAk8dw7Qt7DpxPB60ofAgn8WRhW6a2rcimZnYBP9oxHiv0OHy+Wz7kPMG+t4LGdt31+4EmGg== sha1-5SfAh1ig+Pb58V95mhc/88QOqAg="
  },
  "registry": "npm",
  "hash": "e527c08758a0f8f6f9f15f799a173ff3c40ea808"
}