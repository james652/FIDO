{
  "manifest": {
    "name": "c12",
    "version": "1.4.2",
    "description": "Smart Config Loader",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/c12.git"
    },
    "license": "MIT",
    "sideEffects": false,
    "type": "module",
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs",
        "types": "./dist/index.d.ts"
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "unbuild",
      "dev": "vitest dev",
      "lint": "eslint --ext .ts,.js,.mjs,.cjs . && prettier -c src test",
      "lint:fix": "eslint --ext .ts,.js,.mjs,.cjs . --fix && prettier -w src test",
      "prepack": "unbuild",
      "release": "changelogen --release && npm publish && git push --follow-tags",
      "test": "pnpm lint && vitest run --coverage && pnpm test:types",
      "test:types": "tsc --noEmit"
    },
    "dependencies": {
      "chokidar": "^3.5.3",
      "defu": "^6.1.2",
      "dotenv": "^16.3.1",
      "giget": "^1.1.2",
      "jiti": "^1.18.2",
      "mlly": "^1.4.0",
      "ohash": "^1.1.2",
      "pathe": "^1.1.1",
      "perfect-debounce": "^1.0.0",
      "pkg-types": "^1.0.3",
      "rc9": "^2.1.1"
    },
    "devDependencies": {
      "@vitest/coverage-v8": "^0.32.2",
      "changelogen": "^0.5.3",
      "eslint": "^8.43.0",
      "eslint-config-unjs": "^0.2.1",
      "expect-type": "^0.16.0",
      "prettier": "^2.8.8",
      "typescript": "^5.1.3",
      "unbuild": "^1.2.1",
      "vitest": "^0.32.2"
    },
    "packageManager": "pnpm@8.6.3",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-c12-1.4.2-9011d73fdc98b88ab4471106e34b0a4b20eb56d2-integrity/node_modules/c12/package.json",
    "readmeFilename": "README.md",
    "readme": "# ⚙️ c12\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![Codecov][codecov-src]][codecov-href]\n[![License][license-src]][license-href]\n\nSmart Configuration Loader.\n\n## Features\n\n- JSON, CJS, Typescript, and ESM config loader with [unjs/jiti](https://github.com/unjs/jiti)\n- RC config support with [unjs/rc9](https://github.com/unjs/rc9)\n- Multiple sources merged with [unjs/defu](https://github.com/unjs/defu)\n- `.env` support with [dotenv](https://www.npmjs.com/package/dotenv)\n- Reads config from the nearest `package.json` file\n- [Extends configurations](https://github.com/unjs/c12#extending-configuration) from multiple local or git sources\n- Overwrite with [environment-specific configuration](#environment-specific-configuration)\n- Config watcher with auto-reload and HMR support\n\n## Usage\n\nInstall package:\n\n```sh\n# npm\nnpm install c12\n\n# yarn\nyarn add c12\n\n# pnpm\npnpm install c12\n```\n\nImport:\n\n```js\n// ESM\nimport { loadConfig, watchConfig } from \"c12\";\n\n// CommonJS\nconst { loadConfig, watchConfig } = require(\"c12\");\n```\n\nLoad configuration:\n\n```js\n// Get loaded config\nconst { config } = await loadConfig({});\n\n// Get resolved config and extended layers\nconst { config, configFile, layers } = await loadConfig({});\n```\n\n## Loading priority\n\nc12 merged config sources with [unjs/defu](https://github.com/unjs/defu) by below order:\n\n1. Config overrides passed by options\n2. Config file in CWD\n3. RC file in CWD\n4. Global RC file in the user's home directory\n5. Config from `package.json`\n6. Default config passed by options\n7. Extended config layers\n\n## Options\n\n### `cwd`\n\nResolve configuration from this working directory. The default is `process.cwd()`\n\n### `name`\n\nConfiguration base name. The default is `config`.\n\n### `configFile`\n\nConfiguration file name without extension. Default is generated from `name` (f.e., if `name` is `foo`, the config file will be => `foo.config`).\n\nSet to `false` to avoid loading the config file.\n\n### `rcFile`\n\nRC Config file name. Default is generated from `name` (name=foo => `.foorc`).\n\nSet to `false` to disable loading RC config.\n\n### `globalRC`\n\nLoad RC config from the workspace directory and the user's home directory. Only enabled when `rcFile` is provided. Set to `false` to disable this functionality.\n\n### `dotenv`\n\nLoads `.env` file if enabled. It is disabled by default.\n\n### `packageJson`\n\nLoads config from nearest `package.json` file. It is disabled by default.\n\nIf `true` value is passed, c12 uses `name` field from `package.json`.\n\nYou can also pass either a string or an array of strings as a value to use those fields.\n\n### `defaults`\n\nSpecify default configuration. It has the **lowest** priority and is applied **after extending** config.\n\n### `defaultConfig`\n\nSpecify default configuration. It is applied **before** extending config.\n\n### `overrides`\n\nSpecify override configuration. It has the **highest** priority and is applied **before extending** config.\n\n### `jiti`\n\nCustom [unjs/jiti](https://github.com/unjs/jiti) instance used to import configuration files.\n\n### `jitiOptions`\n\nCustom [unjs/jiti](https://github.com/unjs/jiti) options to import configuration files.\n\n### `envName`\n\nEnvironment name used for [environment specific configuration](#environment-specific-configuration).\n\nThe default is `process.env.NODE_ENV`. You can set `envName` to `false` or an empty string to disable the feature.\n\n## Extending configuration\n\nIf resolved config contains a `extends` key, it will be used to extend the configuration.\n\nExtending can be nested and each layer can extend from one base or more.\n\nThe final config is merged result of extended options and user options with [unjs/defu](https://github.com/unjs/defu).\n\nEach item in extends is a string that can be either an absolute or relative path to the current config file pointing to a config file for extending or the directory containing the config file.\nIf it starts with either `github:`, `gitlab:`, `bitbucket:`, or `https:`, c12 automatically clones it.\n\nFor custom merging strategies, you can directly access each layer with `layers` property.\n\n**Example:**\n\n```js\n// config.ts\nexport default {\n  colors: {\n    primary: \"user_primary\",\n  },\n  extends: [\"./theme\"],\n};\n```\n\n```js\n// config.dev.ts\nexport default {\n  dev: true,\n};\n```\n\n```js\n// theme/config.ts\nexport default {\n  extends: \"../base\",\n  colors: {\n    primary: \"theme_primary\",\n    secondary: \"theme_secondary\",\n  },\n};\n```\n\n```js\n// base/config.ts\nexport default {\n  colors: {\n    primary: 'base_primary'\n    text: 'base_text'\n  }\n}\n```\n\nThe loaded configuration would look like this:\n\n```js\n{\n  dev: true,\n  colors: {\n    primary: 'user_primary',\n    secondary: 'theme_secondary',\n    text: 'base_text'\n  }\n}\n```\n\nLayers:\n\n```js\n[\n { config: /* theme config */, configFile: /* path/to/theme/config.ts */, cwd: /* path/to/theme */ },\n { config: /* base  config */, configFile: /* path/to/base/config.ts  */, cwd: /* path/to/base */ },\n { config: /* dev   config */, configFile: /* path/to/config.dev.ts  */, cwd: /* path/ */ },\n]\n```\n\n## Environment-specific configuration\n\nUsers can define environment-specific configuration using these config keys:\n\n- `$test: {...}`\n- `$development: {...}`\n- `$production: {...}`\n- `$env: { [env]: {...} }`\n\nc12 tries to match [`envName`](#envname) and override environment config if specified.\n\n**Note:** Environment will be applied when extending each configuration layer. This way layers can provide environment-specific configuration.\n\n**Example:**\n\n```js\n{\n  // Default configuration\n  logLevel: 'info',\n\n  // Environment overrides\n  $test: { logLevel: 'silent' },\n  $development: { logLevel: 'warning' },\n  $production: { logLevel: 'error' },\n  $env: {\n    staging: { logLevel: 'debug' }\n  }\n}\n```\n\n## Watching Configuration\n\nyou can use `watchConfig` instead of `loadConfig` to load config and watch for changes, add and removals in all expected configuration paths and auto reload with new config.\n\n### Lifecycle hooks\n\n- `onWatch`: This function is always called when config is updated, added, or removed before attempting to reload the config.\n- `acceptHMR`: By implementing this function, you can compare old and new functions and return `true` if a full reload is not needed.\n- `onUpdate`: This function is always called after the new config is updated. If `acceptHMR` returns true, it will be skipped.\n\n```ts\nimport { watchConfig } from \"c12\";\n\nconst config = watchConfig({\n  cwd: \".\",\n  // chokidarOptions: {}, // Default is { ignoreInitial: true }\n  // debounce: 200 // Default is 100. You can set it to false to disable debounced watcher\n  onWatch: (event) => {\n    console.log(\"[watcher]\", event.type, event.path);\n  },\n  acceptHMR({ oldConfig, newConfig, getDiff }) {\n    const diff = getDiff();\n    if (diff.length === 0) {\n      console.log(\"No config changed detected!\");\n      return true; // No changes!\n    }\n  },\n  onUpdate({ oldConfig, newConfig, getDiff }) {\n    const diff = getDiff();\n    console.log(\"Config updated:\\n\" + diff.map((i) => i.toJSON()).join(\"\\n\"));\n  },\n});\n\nconsole.log(\"watching config files:\", config.watchingFiles);\nconsole.log(\"initial config\", config.config);\n\n// Stop watcher when not needed anymore\n// await config.unwatch();\n```\n\n## 💻 Development\n\n- Clone this repository\n- Enable [Corepack](https://github.com/nodejs/corepack) using `corepack enable` (use `npm i -g corepack` for Node.js < 16.10)\n- Install dependencies using `pnpm install`\n- Run interactive tests using `pnpm dev`\n\n## License\n\nMade with 💛 Published under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/c12?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-version-href]: https://npmjs.com/package/c12\n[npm-downloads-src]: https://img.shields.io/npm/dm/c12?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-downloads-href]: https://npmjs.com/package/c12\n[codecov-src]: https://img.shields.io/codecov/c/gh/unjs/c12/main?style=flat&colorA=18181B&colorB=F0DB4F\n[codecov-href]: https://codecov.io/gh/unjs/c12\n[license-src]: https://img.shields.io/github/license/unjs/c12.svg?style=flat&colorA=18181B&colorB=F0DB4F\n[license-href]: https://github.com/unjs/c12/blob/main/LICENSE\n",
    "licenseText": "MIT License\n\nCopyright (c) Pooya Parsa <pooya@pi0.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/c12/-/c12-1.4.2.tgz#9011d73fdc98b88ab4471106e34b0a4b20eb56d2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/c12/-/c12-1.4.2.tgz",
    "hash": "9011d73fdc98b88ab4471106e34b0a4b20eb56d2",
    "integrity": "sha512-3IP/MuamSVRVw8W8+CHWAz9gKN4gd+voF2zm/Ln6D25C2RhytEZ1ABbC8MjKr4BR9rhoV1JQ7jJA158LDiTkLg==",
    "registry": "npm",
    "packageName": "c12",
    "cacheIntegrity": "sha512-3IP/MuamSVRVw8W8+CHWAz9gKN4gd+voF2zm/Ln6D25C2RhytEZ1ABbC8MjKr4BR9rhoV1JQ7jJA158LDiTkLg== sha1-kBHXP9yYuIq0RxEG40sKSyDrVtI="
  },
  "registry": "npm",
  "hash": "9011d73fdc98b88ab4471106e34b0a4b20eb56d2"
}