{
  "manifest": {
    "version": "1.0.0-next.23",
    "name": "@polka/url",
    "repository": {
      "type": "git",
      "url": "https://github.com/lukeed/polka.git"
    },
    "description": "Super fast, memoized `req.url` parser",
    "module": "build.mjs",
    "types": "index.d.ts",
    "main": "build.js",
    "license": "MIT",
    "exports": {
      ".": {
        "types": "./index.d.ts",
        "import": "./build.mjs",
        "require": "./build.js"
      },
      "./package.json": "./package.json"
    },
    "files": [
      "*.d.ts",
      "build.*"
    ],
    "author": {
      "name": "Luke Edwards",
      "email": "luke@lukeed.com",
      "url": "https://lukeed.com"
    },
    "publishConfig": {
      "access": "public"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@polka-url-1.0.0-next.23-498e41218ab3b6a1419c735e5c6ae2c5ed609b6c-integrity/node_modules/@polka/url/package.json",
    "readmeFilename": "readme.md",
    "readme": "# @polka/url [![npm](https://badgen.now.sh/npm/v/@polka/url)](https://npmjs.org/package/@polka/url)\n\n> Super fast, memoized `req.url` parser; _not_ limited to [Polka][polka]!\n\nParses the `url` from a [`IncomingMessage`](https://nodejs.org/api/http.html#http_class_http_incomingmessage) request. The returned object will always only contain the following keys: `search`, `query`, `pathname`, and `raw`.\n\n> **Note:** This library does not process `protocol`, `hostname`, `port`, etc.<br>This is because the incoming `req.url` value only begins with the path information.\n\nParsed requests will be mutated with a `_parsedUrl` key, containing the returned output. This is used for future memoization, avoiding the need to fully parse the same `url` value multiple times.\n\n## Install\n\n```\n$ npm install --save @polka/url\n```\n\n## Usage\n\n```js\nconst parse = require('@polka/url');\n\nlet req = {\n  url: '/foo/bar?fizz=buzz'\n};\nlet output = parse(req);\n//=> {\n//=>   pathname: '/foo/bar',\n//=>   raw: '/foo/bar?fizz=buzz',\n//=>   search: '?fizz=buzz',\n//=>   query: {\n//=>     fizz: 'buzz'\n//=>   },\n//=> }\n\n// Attaches result for future memoization\nassert.deepEqual(output, req._parsedUrl); //=> true\n```\n\n## API\n\n### url(req)\nReturns: `Object` or `undefined`\n\n> **Important:** The `req` must have a `url` key, otherwise `undefined` will be returned.<br>If no input is provided at all, a `TypeError` will be thrown.\n\n#### req\nType: `IncomingMessage` or `{ url: string }`\n\nThe incoming HTTP request (`req`) or a plain `Object` with a `url` key.\n\n> **Note:** In Node.js servers, the [`req.url`](https://nodejs.org/api/http.html#http_message_url) begins with a pathname & does not include a `hash`.\n\n\n## Benchmarks\n\nCheck out the [`bench`](/bench) directory for in-depth benchmark results and comparisons.\n\n\n## Support\n\nAny issues or questions can be sent to the [Polka][polka] repository.<br>However, please specify that your inquiry is about `@polka/url` specifically.\n\n\n## License\n\nMIT Â© [Luke Edwards](https://lukeed.com)\n\n[polka]: https://github.com/lukeed/polka\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@polka/url/-/url-1.0.0-next.23.tgz#498e41218ab3b6a1419c735e5c6ae2c5ed609b6c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@polka/url/-/url-1.0.0-next.23.tgz",
    "hash": "498e41218ab3b6a1419c735e5c6ae2c5ed609b6c",
    "integrity": "sha512-C16M+IYz0rgRhWZdCmK+h58JMv8vijAA61gmz2rspCSwKwzBebpdcsiUmwrtJRdphuY30i6BSLEOP8ppbNLyLg==",
    "registry": "npm",
    "packageName": "@polka/url",
    "cacheIntegrity": "sha512-C16M+IYz0rgRhWZdCmK+h58JMv8vijAA61gmz2rspCSwKwzBebpdcsiUmwrtJRdphuY30i6BSLEOP8ppbNLyLg== sha1-SY5BIYqztqFBnHNeXGrixe1gm2w="
  },
  "registry": "npm",
  "hash": "498e41218ab3b6a1419c735e5c6ae2c5ed609b6c"
}