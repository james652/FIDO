{
  "manifest": {
    "name": "vite-node",
    "version": "0.33.0",
    "description": "Vite as Node.js runtime",
    "author": {
      "name": "Anthony Fu",
      "email": "anthonyfu117@hotmail.com"
    },
    "license": "MIT",
    "funding": "https://opencollective.com/vitest",
    "homepage": "https://github.com/vitest-dev/vitest/blob/main/packages/vite-node#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/vitest-dev/vitest.git",
      "directory": "packages/vite-node"
    },
    "bugs": {
      "url": "https://github.com/vitest-dev/vitest/issues"
    },
    "sideEffects": false,
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "require": "./dist/index.cjs",
        "import": "./dist/index.mjs"
      },
      "./client": {
        "types": "./dist/client.d.ts",
        "require": "./dist/client.cjs",
        "import": "./dist/client.mjs"
      },
      "./server": {
        "types": "./dist/server.d.ts",
        "require": "./dist/server.cjs",
        "import": "./dist/server.mjs"
      },
      "./utils": {
        "types": "./dist/utils.d.ts",
        "require": "./dist/utils.cjs",
        "import": "./dist/utils.mjs"
      },
      "./hmr": {
        "types": "./dist/hmr.d.ts",
        "require": "./dist/hmr.cjs",
        "import": "./dist/hmr.mjs"
      },
      "./source-map": {
        "types": "./dist/source-map.d.ts",
        "require": "./dist/source-map.cjs",
        "import": "./dist/source-map.mjs"
      }
    },
    "main": "./dist/index.mjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "./dist/*",
          "./dist/index.d.ts"
        ]
      }
    },
    "bin": {
      "vite-node": "vite-node.mjs"
    },
    "files": [
      "dist",
      "*.d.ts",
      "*.mjs"
    ],
    "engines": {
      "node": ">=v14.18.0"
    },
    "dependencies": {
      "cac": "^6.7.14",
      "debug": "^4.3.4",
      "mlly": "^1.4.0",
      "pathe": "^1.1.1",
      "picocolors": "^1.0.0",
      "vite": "^3.0.0 || ^4.0.0"
    },
    "devDependencies": {
      "@jridgewell/trace-mapping": "^0.3.18",
      "@types/debug": "^4.1.8",
      "rollup": "^2.79.1"
    },
    "scripts": {
      "build": "rimraf dist && rollup -c",
      "dev": "rollup -c --watch --watch.include 'src/**' -m inline",
      "typecheck": "tsc --noEmit"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-vite-node-0.33.0-c6a3a527e0b8090da7436241bc875760ae0eef28-integrity/node_modules/vite-node/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n<img src=\"https://github.com/vitest-dev/vitest/blob/main/packages/vite-node/assets/vite-node.svg?raw=true\" height=\"120\">\n</p>\n\n<h1 align=\"center\">\nvite-node\n</h1>\n<p align=\"center\">\nVite as Node runtime.<br>The engine powers <a href=\"https://github.com/vitest-dev/vitest\">Vitest</a> and <a href=\"https://github.com/nuxt/framework\">Nuxt 3 Dev SSR</a>.\n<p>\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/vitest\"><img src=\"https://img.shields.io/npm/v/vite-node?color=FCC72B&label=\"></a>\n<p>\n\n## Features\n\n- On-demand evaluation\n- Vite's pipeline, plugins, resolve, aliasing\n- Out-of-box ESM & TypeScript support\n- Respect `vite.config.ts`\n- Hot module replacement (HMR)\n- Separate server/client architecture\n- Top-level `await`\n- Shims for `__dirname` and `__filename` in ESM\n- Access to native node modules like `fs`, `path`, etc.\n\n## CLI Usage\n\nRun JS/TS file on Node.js using Vite's resolvers and transformers.\n\n```bash\nnpx vite-node index.ts\n```\n\nOptions:\n\n```bash\nnpx vite-node -h\n```\n\n### Options via CLI\n\n[All `ViteNodeServer` options](https://github.com/vitest-dev/vitest/blob/main/packages/vite-node/src/types.ts#L70-L89) are supported by the CLI. They may be defined through the dot syntax, as shown below:\n\n```bash\nnpx vite-node --options.deps.inline=\"module-name\" --options.deps.external=\"/module-regexp/\" index.ts\n```\n\nNote that for options supporting RegExps, strings passed to the CLI must start _and_ end with a `/`;\n\n### Hashbang\n\nIf you prefer to write scripts that don't need to be passed into Vite Node, you can declare it in the [hashbang](https://bash.cyberciti.biz/guide/Shebang).\n\nSimply add `#!/usr/bin/env vite-node --script` at the top of your file:\n\n_file.ts_\n```ts\n#!/usr/bin/env vite-node --script\n\nconsole.log('argv:', process.argv.slice(2))\n```\n\nAnd make the file executable:\n```sh\nchmod +x ./file.ts\n```\n\nNow, you can run the file without passing it into Vite Node:\n```sh\n$ ./file.ts hello\nargv: [ 'hello' ]\n```\n\nNote that when using the `--script` option, Vite Node forwards every argument and option to the script to execute, even the one supported by Vite Node itself.\n\n## Programmatic Usage\n\nIn Vite Node, the server and runner (client) are separated, so you can integrate them in different contexts (workers, cross-process, or remote) if needed. The demo below shows a simple example of having both (server and runner) running in the same context\n\n```ts\nimport { createServer } from 'vite'\nimport { ViteNodeServer } from 'vite-node/server'\nimport { ViteNodeRunner } from 'vite-node/client'\nimport { installSourcemapsSupport } from 'vite-node/source-map'\n\n// create vite server\nconst server = await createServer({\n  optimizeDeps: {\n    // It's recommended to disable deps optimization\n    disabled: true,\n  },\n})\n// this is need to initialize the plugins\nawait server.pluginContainer.buildStart({})\n\n// create vite-node server\nconst node = new ViteNodeServer(server)\n\n// fixes stacktraces in Errors\ninstallSourcemapsSupport({\n  getSourceMap: source => node.getSourceMap(source),\n})\n\n// create vite-node runner\nconst runner = new ViteNodeRunner({\n  root: server.config.root,\n  base: server.config.base,\n  // when having the server and runner in a different context,\n  // you will need to handle the communication between them\n  // and pass to this function\n  fetchModule(id) {\n    return node.fetchModule(id)\n  },\n  resolveId(id, importer) {\n    return node.resolveId(id, importer)\n  },\n})\n\n// execute the file\nawait runner.executeFile('./example.ts')\n\n// close the vite server\nawait server.close()\n```\n\n## Debugging\n\n### Debug Transformation\n\nSometimes you might want to inspect the transformed code to investigate issues. You can set environment variable `VITE_NODE_DEBUG_DUMP=true` to let vite-node write the transformed result of each module under `.vite-node/dump`.\n\nIf you want to debug by modifying the dumped code, you can change the value of `VITE_NODE_DEBUG_DUMP` to `load` and search for the dumpped files and use them for executing.\n\n```bash\nVITE_NODE_DEBUG_DUMP=load vite-node example.ts\n```\n\nOr programmatically:\n\n```js\nimport { ViteNodeServer } from 'vite-node/server'\n\nconst server = new ViteNodeServer(viteServer, {\n  debug: {\n    dumpModules: true,\n    loadDumppedModules: true,\n  }\n})\n```\n\n### Debug Execution\n\nIf the process get stuck, it might because there is a unresolvable circular dependencies, you can set `VITE_NODE_DEBUG_RUNNER=true` to vite-node warn about it.\n\n```bash\nVITE_NODE_DEBUG_RUNNER=true vite-node example.ts\n```\n\nOr programmatically:\n\n```js\nimport { ViteNodeRunner } from 'vite-node/client'\n\nconst runner = new ViteNodeRunner({\n  debug: true\n})\n```\n\n## Credits\n\nBased on [@pi0](https://github.com/pi0)'s brilliant idea of having a Vite server as the on-demand transforming service for [Nuxt's Vite SSR](https://github.com/nuxt/vite/pull/201).\n\nThanks [@brillout](https://github.com/brillout) for kindly sharing this package name.\n\n## Sponsors\n\n<p align=\"center\">\n  <a href=\"https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg\">\n    <img src='https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg'/>\n  </a>\n</p>\n\n## License\n\n[MIT](./LICENSE) License Â© 2021 [Anthony Fu](https://github.com/antfu)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021-Present Anthony Fu <https://github.com/antfu>\nCopyright (c) 2021-Present Matias Capeletto <https://github.com/patak-dev>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vite-node/-/vite-node-0.33.0.tgz#c6a3a527e0b8090da7436241bc875760ae0eef28",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vite-node/-/vite-node-0.33.0.tgz",
    "hash": "c6a3a527e0b8090da7436241bc875760ae0eef28",
    "integrity": "sha512-19FpHYbwWWxDr73ruNahC+vtEdza52kA90Qb3La98yZ0xULqV8A5JLNPUff0f5zID4984tW7l3DH2przTJUZSw==",
    "registry": "npm",
    "packageName": "vite-node",
    "cacheIntegrity": "sha512-19FpHYbwWWxDr73ruNahC+vtEdza52kA90Qb3La98yZ0xULqV8A5JLNPUff0f5zID4984tW7l3DH2przTJUZSw== sha1-xqOlJ+C4CQ2nQ2JBvIdXYK4O7yg="
  },
  "registry": "npm",
  "hash": "c6a3a527e0b8090da7436241bc875760ae0eef28"
}