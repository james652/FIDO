{
  "manifest": {
    "name": "ioredis",
    "version": "5.3.2",
    "description": "A robust, performance-focused and full-featured Redis client for Node.js.",
    "main": "./built/index.js",
    "types": "./built/index.d.ts",
    "files": [
      "built/"
    ],
    "scripts": {
      "test:tsd": "npm run build && tsd",
      "test:js": "TS_NODE_TRANSPILE_ONLY=true NODE_ENV=test mocha \"test/helpers/*.ts\" \"test/unit/**/*.ts\" \"test/functional/**/*.ts\"",
      "test:cov": "nyc npm run test:js",
      "test:js:cluster": "TS_NODE_TRANSPILE_ONLY=true NODE_ENV=test mocha \"test/cluster/**/*.ts\"",
      "test": "npm run test:js && npm run test:tsd",
      "lint": "eslint --ext .js,.ts ./lib",
      "docs": "npx typedoc --logLevel Error --excludeExternals --excludeProtected --excludePrivate --readme none lib/index.ts",
      "format": "prettier --write \"{,!(node_modules)/**/}*.{js,ts}\"",
      "format-check": "prettier --check \"{,!(node_modules)/**/}*.{js,ts}\"",
      "build": "rm -rf built && tsc",
      "prepublishOnly": "npm run build",
      "semantic-release": "semantic-release"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/luin/ioredis.git"
    },
    "keywords": [
      "redis",
      "cluster",
      "sentinel",
      "pipelining"
    ],
    "tsd": {
      "directory": "test/typing"
    },
    "author": {
      "name": "Zihua Li",
      "email": "i@zihua.li",
      "url": "http://zihua.li"
    },
    "license": "MIT",
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/ioredis"
    },
    "dependencies": {
      "@ioredis/commands": "^1.1.1",
      "cluster-key-slot": "^1.1.0",
      "debug": "^4.3.4",
      "denque": "^2.1.0",
      "lodash.defaults": "^4.2.0",
      "lodash.isarguments": "^3.1.0",
      "redis-errors": "^1.2.0",
      "redis-parser": "^3.0.0",
      "standard-as-callback": "^2.1.0"
    },
    "devDependencies": {
      "@ioredis/interface-generator": "^1.3.0",
      "@semantic-release/changelog": "^6.0.1",
      "@semantic-release/commit-analyzer": "^9.0.2",
      "@semantic-release/git": "^10.0.1",
      "@types/chai": "^4.3.0",
      "@types/chai-as-promised": "^7.1.5",
      "@types/debug": "^4.1.5",
      "@types/lodash.defaults": "^4.2.7",
      "@types/lodash.isarguments": "^3.1.7",
      "@types/mocha": "^9.1.0",
      "@types/node": "^14.18.12",
      "@types/redis-errors": "^1.2.1",
      "@types/sinon": "^10.0.11",
      "@typescript-eslint/eslint-plugin": "^5.48.1",
      "@typescript-eslint/parser": "^5.48.1",
      "chai": "^4.3.6",
      "chai-as-promised": "^7.1.1",
      "eslint": "^8.31.0",
      "eslint-config-prettier": "^8.6.0",
      "mocha": "^9.2.1",
      "nyc": "^15.1.0",
      "prettier": "^2.6.1",
      "semantic-release": "^19.0.2",
      "server-destroy": "^1.0.1",
      "sinon": "^13.0.1",
      "ts-node": "^10.4.0",
      "tsd": "^0.19.1",
      "typedoc": "^0.22.18",
      "typescript": "^4.6.3",
      "uuid": "^9.0.0"
    },
    "nyc": {
      "reporter": [
        "lcov"
      ]
    },
    "engines": {
      "node": ">=12.22.0"
    },
    "mocha": {
      "exit": true,
      "timeout": 8000,
      "recursive": true,
      "require": "ts-node/register"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ioredis-5.3.2-9139f596f62fc9c72d873353ac5395bcf05709f7-integrity/node_modules/ioredis/package.json",
    "readmeFilename": "README.md",
    "readme": "[![ioredis](https://cdn.jsdelivr.net/gh/luin/ioredis@b5e8c74/logo.svg)](https://github.com/luin/ioredis)\n\n[![Build Status](https://github.com/luin/ioredis/actions/workflows/release.yml/badge.svg?branch=main)](https://github.com/luin/ioredis/actions/workflows/release.yml?query=branch%3Amain)\n[![Coverage Status](https://coveralls.io/repos/github/luin/ioredis/badge.svg?branch=main)](https://coveralls.io/github/luin/ioredis?branch=main)\n[![Join the chat at https://gitter.im/luin/ioredis](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/luin/ioredis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\nA robust, performance-focused and full-featured [Redis](http://redis.io) client for [Node.js](https://nodejs.org).\n\nSupports Redis >= 2.6.12 and the latest version of [Dragonfly](https://dragonflydb.io/). Completely compatible with Redis 7.x.\n\n# Features\n\nioredis is a robust, full-featured Redis client that is\nused in the world's biggest online commerce company [Alibaba](http://www.alibaba.com/) and many other awesome companies.\n\n0. Full-featured. It supports [Cluster](http://redis.io/topics/cluster-tutorial), [Sentinel](https://redis.io/docs/reference/sentinel-clients), [Streams](https://redis.io/topics/streams-intro), [Pipelining](http://redis.io/topics/pipelining), and of course [Lua scripting](http://redis.io/commands/eval), [Redis Functions](https://redis.io/topics/functions-intro), [Pub/Sub](http://redis.io/topics/pubsub) (with the support of binary messages).\n1. High performance üöÄ.\n2. Delightful API üòÑ. It works with Node callbacks and Native promises.\n3. Transformation of command arguments and replies.\n4. Transparent key prefixing.\n5. Abstraction for Lua scripting, allowing you to [define custom commands](https://github.com/luin/ioredis#lua-scripting).\n6. Supports [binary data](https://github.com/luin/ioredis#handle-binary-data).\n7. Supports [TLS](https://github.com/luin/ioredis#tls-options) üîí.\n8. Supports offline queue and ready checking.\n9. Supports ES6 types, such as `Map` and `Set`.\n10. Supports GEO commands üìç.\n11. Supports Redis ACL.\n12. Sophisticated error handling strategy.\n13. Supports NAT mapping.\n14. Supports autopipelining.\n\n**100% written in TypeScript and official declarations are provided:**\n\n<img width=\"837\" src=\"resources/ts-screenshot.png\" alt=\"TypeScript Screenshot\" />\n\n# Versions\n\n| Version        | Branch | Node.js Version | Redis Version   |\n| -------------- | ------ | --------------- | --------------- |\n| 5.x.x (latest) | main   | >= 12           | 2.6.12 ~ latest |\n| 4.x.x          | v4     | >= 6            | 2.6.12 ~ 7      |\n\nRefer to [CHANGELOG.md](CHANGELOG.md) for features and bug fixes introduced in v5.\n\nüöÄ [Upgrading from v4 to v5](https://github.com/luin/ioredis/wiki/Upgrading-from-v4-to-v5)\n\n# Links\n\n- [API Documentation](https://luin.github.io/ioredis/) ([Redis](https://luin.github.io/ioredis/classes/Redis.html), [Cluster](https://luin.github.io/ioredis/classes/Cluster.html))\n- [Changelog](CHANGELOG.md)\n- [Migrating from node_redis](https://github.com/luin/ioredis/wiki/Migrating-from-node_redis)\n\n<hr>\n\n# Sponsors\n\n### Upstash: Serverless Database for Redis\n\n<a href=\"https://upstash.com/?utm_source=ioredis\"><img align=\"right\" width=\"320\" src=\"resources/upstash.png\" alt=\"Upstash\"></a>\n\nUpstash is a Serverless Database with Redis/REST API and durable storage. It is the perfect database for your applications thanks to its per request pricing and low latency data.\n\n[Start for free in 30 seconds!](https://upstash.com/?utm_source=ioredis)\n\n<br clear=\"both\"/>\n\n### Medis: Redis GUI for macOS\n\n<a href=\"https://getmedis.com/\"><img align=\"right\" width=\"404\" src=\"resources/medis.png\" alt=\"Download on the App Store\"></a>\n\nLooking for a Redis GUI for macOS, Windows and Linux? Here's [Medis](https://getmedis.com/)!\n\nMedis is an open-sourced, beautiful, easy-to-use Redis GUI management application.\n\nMedis starts with all the basic features you need:\n\n- Keys viewing/editing\n- SSH Tunnel for connecting with remote servers\n- Terminal for executing custom commands\n- And other awesome features...\n\n[Medis 1 is open sourced on GitHub](https://github.com/luin/medis)\n\n<br clear=\"both\"/>\n\n<hr>\n\n# Quick Start\n\n## Install\n\n```shell\nnpm install ioredis\n```\n\nIn a TypeScript project, you may want to add TypeScript declarations for Node.js:\n\n```shell\nnpm install --save-dev @types/node\n```\n\n## Basic Usage\n\n```javascript\n// Import ioredis.\n// You can also use `import { Redis } from \"ioredis\"`\n// if your project is a TypeScript project,\n// Note that `import Redis from \"ioredis\"` is still supported,\n// but will be deprecated in the next major version.\nconst Redis = require(\"ioredis\");\n\n// Create a Redis instance.\n// By default, it will connect to localhost:6379.\n// We are going to cover how to specify connection options soon.\nconst redis = new Redis();\n\nredis.set(\"mykey\", \"value\"); // Returns a promise which resolves to \"OK\" when the command succeeds.\n\n// ioredis supports the node.js callback style\nredis.get(\"mykey\", (err, result) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(result); // Prints \"value\"\n  }\n});\n\n// Or ioredis returns a promise if the last argument isn't a function\nredis.get(\"mykey\").then((result) => {\n  console.log(result); // Prints \"value\"\n});\n\nredis.zadd(\"sortedSet\", 1, \"one\", 2, \"dos\", 4, \"quatro\", 3, \"three\");\nredis.zrange(\"sortedSet\", 0, 2, \"WITHSCORES\").then((elements) => {\n  // [\"one\", \"1\", \"dos\", \"2\", \"three\", \"3\"] as if the command was `redis> ZRANGE sortedSet 0 2 WITHSCORES`\n  console.log(elements);\n});\n\n// All arguments are passed directly to the redis server,\n// so technically ioredis supports all Redis commands.\n// The format is: redis[SOME_REDIS_COMMAND_IN_LOWERCASE](ARGUMENTS_ARE_JOINED_INTO_COMMAND_STRING)\n// so the following statement is equivalent to the CLI: `redis> SET mykey hello EX 10`\nredis.set(\"mykey\", \"hello\", \"EX\", 10);\n```\n\nSee the `examples/` folder for more examples. For example:\n\n- [TTL](examples/ttl.js)\n- [Strings](examples/string.js)\n- [Hashes](examples/hash.js)\n- [Lists](examples/list.js)\n- [Sets](examples/set.js)\n- [Sorted Sets](examples/zset.js)\n- [Streams](examples/stream.js)\n- [Redis Modules](examples/module.js) e.g. RedisJSON\n\nAll Redis commands are supported. See [the documentation](https://luin.github.io/ioredis/classes/Redis.html) for details.\n\n## Connect to Redis\n\nWhen a new `Redis` instance is created,\na connection to Redis will be created at the same time.\nYou can specify which Redis to connect to by:\n\n```javascript\nnew Redis(); // Connect to 127.0.0.1:6379\nnew Redis(6380); // 127.0.0.1:6380\nnew Redis(6379, \"192.168.1.1\"); // 192.168.1.1:6379\nnew Redis(\"/tmp/redis.sock\");\nnew Redis({\n  port: 6379, // Redis port\n  host: \"127.0.0.1\", // Redis host\n  username: \"default\", // needs Redis >= 6\n  password: \"my-top-secret\",\n  db: 0, // Defaults to 0\n});\n```\n\nYou can also specify connection options as a [`redis://` URL](http://www.iana.org/assignments/uri-schemes/prov/redis) or [`rediss://` URL](https://www.iana.org/assignments/uri-schemes/prov/rediss) when using [TLS encryption](#tls-options):\n\n```javascript\n// Connect to 127.0.0.1:6380, db 4, using password \"authpassword\":\nnew Redis(\"redis://:authpassword@127.0.0.1:6380/4\");\n\n// Username can also be passed via URI.\nnew Redis(\"redis://username:authpassword@127.0.0.1:6380/4\");\n```\n\nSee [API Documentation](https://luin.github.io/ioredis/index.html#RedisOptions) for all available options.\n\n## Pub/Sub\n\nRedis provides several commands for developers to implement the [Publish‚Äìsubscribe pattern](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern). There are two roles in this pattern: publisher and subscriber. Publishers are not programmed to send their messages to specific subscribers. Rather, published messages are characterized into channels, without knowledge of what (if any) subscribers there may be.\n\nBy leveraging Node.js's built-in events module, ioredis makes pub/sub very straightforward to use. Below is a simple example that consists of two files, one is publisher.js that publishes messages to a channel, the other is subscriber.js that listens for messages on specific channels.\n\n```javascript\n// publisher.js\n\nconst Redis = require(\"ioredis\");\nconst redis = new Redis();\n\nsetInterval(() => {\n  const message = { foo: Math.random() };\n  // Publish to my-channel-1 or my-channel-2 randomly.\n  const channel = `my-channel-${1 + Math.round(Math.random())}`;\n\n  // Message can be either a string or a buffer\n  redis.publish(channel, JSON.stringify(message));\n  console.log(\"Published %s to %s\", message, channel);\n}, 1000);\n```\n\n```javascript\n// subscriber.js\n\nconst Redis = require(\"ioredis\");\nconst redis = new Redis();\n\nredis.subscribe(\"my-channel-1\", \"my-channel-2\", (err, count) => {\n  if (err) {\n    // Just like other commands, subscribe() can fail for some reasons,\n    // ex network issues.\n    console.error(\"Failed to subscribe: %s\", err.message);\n  } else {\n    // `count` represents the number of channels this client are currently subscribed to.\n    console.log(\n      `Subscribed successfully! This client is currently subscribed to ${count} channels.`\n    );\n  }\n});\n\nredis.on(\"message\", (channel, message) => {\n  console.log(`Received ${message} from ${channel}`);\n});\n\n// There's also an event called 'messageBuffer', which is the same as 'message' except\n// it returns buffers instead of strings.\n// It's useful when the messages are binary data.\nredis.on(\"messageBuffer\", (channel, message) => {\n  // Both `channel` and `message` are buffers.\n  console.log(channel, message);\n});\n```\n\nIt's worth noticing that a connection (aka a `Redis` instance) can't play both roles at the same time. More specifically, when a client issues `subscribe()` or `psubscribe()`, it enters the \"subscriber\" mode. From that point, only commands that modify the subscription set are valid. Namely, they are: `subscribe`, `psubscribe`, `unsubscribe`, `punsubscribe`, `ping`, and `quit`. When the subscription set is empty (via `unsubscribe`/`punsubscribe`), the connection is put back into the regular mode.\n\nIf you want to do pub/sub in the same file/process, you should create a separate connection:\n\n```javascript\nconst Redis = require(\"ioredis\");\nconst sub = new Redis();\nconst pub = new Redis();\n\nsub.subscribe(/* ... */); // From now, `sub` enters the subscriber mode.\nsub.on(\"message\" /* ... */);\n\nsetInterval(() => {\n  // `pub` can be used to publish messages, or send other regular commands (e.g. `hgetall`)\n  // because it's not in the subscriber mode.\n  pub.publish(/* ... */);\n}, 1000);\n```\n\n`PSUBSCRIBE` is also supported in a similar way when you want to subscribe all channels whose name matches a pattern:\n\n```javascript\nredis.psubscribe(\"pat?ern\", (err, count) => {});\n\n// Event names are \"pmessage\"/\"pmessageBuffer\" instead of \"message/messageBuffer\".\nredis.on(\"pmessage\", (pattern, channel, message) => {});\nredis.on(\"pmessageBuffer\", (pattern, channel, message) => {});\n```\n\n## Streams\n\nRedis v5 introduces a new data type called streams. It doubles as a communication channel for building streaming architectures and as a log-like data structure for persisting data. With ioredis, the usage can be pretty straightforward. Say we have a producer publishes messages to a stream with `redis.xadd(\"mystream\", \"*\", \"randomValue\", Math.random())` (You may find the [official documentation of Streams](https://redis.io/topics/streams-intro) as a starter to understand the parameters used), to consume the messages, we'll have a consumer with the following code:\n\n```javascript\nconst Redis = require(\"ioredis\");\nconst redis = new Redis();\n\nconst processMessage = (message) => {\n  console.log(\"Id: %s. Data: %O\", message[0], message[1]);\n};\n\nasync function listenForMessage(lastId = \"$\") {\n  // `results` is an array, each element of which corresponds to a key.\n  // Because we only listen to one key (mystream) here, `results` only contains\n  // a single element. See more: https://redis.io/commands/xread#return-value\n  const results = await redis.xread(\"block\", 0, \"STREAMS\", \"mystream\", lastId);\n  const [key, messages] = results[0]; // `key` equals to \"mystream\"\n\n  messages.forEach(processMessage);\n\n  // Pass the last id of the results to the next round.\n  await listenForMessage(messages[messages.length - 1][0]);\n}\n\nlistenForMessage();\n```\n\n## Handle Binary Data\n\nBinary data support is out of the box. Pass buffers to send binary data:\n\n```javascript\nredis.set(\"foo\", Buffer.from([0x62, 0x75, 0x66]));\n```\n\nEvery command that returns a [bulk string](https://redis.io/docs/reference/protocol-spec/#resp-bulk-strings)\nhas a variant command with a `Buffer` suffix. The variant command returns a buffer instead of a UTF-8 string:\n\n```javascript\nconst result = await redis.getBuffer(\"foo\");\n// result is `<Buffer 62 75 66>`\n```\n\nIt's worth noticing that you don't need the `Buffer` suffix variant in order to **send** binary data. That means\nin most case you should just use `redis.set()` instead of `redis.setBuffer()` unless you want to get the old value\nwith the `GET` parameter:\n\n```javascript\nconst result = await redis.setBuffer(\"foo\", \"new value\", \"GET\");\n// result is `<Buffer 62 75 66>` as `GET` indicates returning the old value.\n```\n\n## Pipelining\n\nIf you want to send a batch of commands (e.g. > 5), you can use pipelining to queue\nthe commands in memory and then send them to Redis all at once. This way the performance improves by 50%~300% (See [benchmark section](#benchmarks)).\n\n`redis.pipeline()` creates a `Pipeline` instance. You can call any Redis\ncommands on it just like the `Redis` instance. The commands are queued in memory\nand flushed to Redis by calling the `exec` method:\n\n```javascript\nconst pipeline = redis.pipeline();\npipeline.set(\"foo\", \"bar\");\npipeline.del(\"cc\");\npipeline.exec((err, results) => {\n  // `err` is always null, and `results` is an array of responses\n  // corresponding to the sequence of queued commands.\n  // Each response follows the format `[err, result]`.\n});\n\n// You can even chain the commands:\nredis\n  .pipeline()\n  .set(\"foo\", \"bar\")\n  .del(\"cc\")\n  .exec((err, results) => {});\n\n// `exec` also returns a Promise:\nconst promise = redis.pipeline().set(\"foo\", \"bar\").get(\"foo\").exec();\npromise.then((result) => {\n  // result === [[null, 'OK'], [null, 'bar']]\n});\n```\n\nEach chained command can also have a callback, which will be invoked when the command\ngets a reply:\n\n```javascript\nredis\n  .pipeline()\n  .set(\"foo\", \"bar\")\n  .get(\"foo\", (err, result) => {\n    // result === 'bar'\n  })\n  .exec((err, result) => {\n    // result[1][1] === 'bar'\n  });\n```\n\nIn addition to adding commands to the `pipeline` queue individually, you can also pass an array of commands and arguments to the constructor:\n\n```javascript\nredis\n  .pipeline([\n    [\"set\", \"foo\", \"bar\"],\n    [\"get\", \"foo\"],\n  ])\n  .exec(() => {\n    /* ... */\n  });\n```\n\n`#length` property shows how many commands in the pipeline:\n\n```javascript\nconst length = redis.pipeline().set(\"foo\", \"bar\").get(\"foo\").length;\n// length === 2\n```\n\n## Transaction\n\nMost of the time, the transaction commands `multi` & `exec` are used together with pipeline.\nTherefore, when `multi` is called, a `Pipeline` instance is created automatically by default,\nso you can use `multi` just like `pipeline`:\n\n```javascript\nredis\n  .multi()\n  .set(\"foo\", \"bar\")\n  .get(\"foo\")\n  .exec((err, results) => {\n    // results === [[null, 'OK'], [null, 'bar']]\n  });\n```\n\nIf there's a syntax error in the transaction's command chain (e.g. wrong number of arguments, wrong command name, etc),\nthen none of the commands would be executed, and an error is returned:\n\n```javascript\nredis\n  .multi()\n  .set(\"foo\")\n  .set(\"foo\", \"new value\")\n  .exec((err, results) => {\n    // err:\n    //  { [ReplyError: EXECABORT Transaction discarded because of previous errors.]\n    //    name: 'ReplyError',\n    //    message: 'EXECABORT Transaction discarded because of previous errors.',\n    //    command: { name: 'exec', args: [] },\n    //    previousErrors:\n    //     [ { [ReplyError: ERR wrong number of arguments for 'set' command]\n    //         name: 'ReplyError',\n    //         message: 'ERR wrong number of arguments for \\'set\\' command',\n    //         command: [Object] } ] }\n  });\n```\n\nIn terms of the interface, `multi` differs from `pipeline` in that when specifying a callback\nto each chained command, the queueing state is passed to the callback instead of the result of the command:\n\n```javascript\nredis\n  .multi()\n  .set(\"foo\", \"bar\", (err, result) => {\n    // result === 'QUEUED'\n  })\n  .exec(/* ... */);\n```\n\nIf you want to use transaction without pipeline, pass `{ pipeline: false }` to `multi`,\nand every command will be sent to Redis immediately without waiting for an `exec` invocation:\n\n```javascript\nredis.multi({ pipeline: false });\nredis.set(\"foo\", \"bar\");\nredis.get(\"foo\");\nredis.exec((err, result) => {\n  // result === [[null, 'OK'], [null, 'bar']]\n});\n```\n\nThe constructor of `multi` also accepts a batch of commands:\n\n```javascript\nredis\n  .multi([\n    [\"set\", \"foo\", \"bar\"],\n    [\"get\", \"foo\"],\n  ])\n  .exec(() => {\n    /* ... */\n  });\n```\n\nInline transactions are supported by pipeline, which means you can group a subset of commands\nin the pipeline into a transaction:\n\n```javascript\nredis\n  .pipeline()\n  .get(\"foo\")\n  .multi()\n  .set(\"foo\", \"bar\")\n  .get(\"foo\")\n  .exec()\n  .get(\"foo\")\n  .exec();\n```\n\n## Lua Scripting\n\nioredis supports all of the scripting commands such as `EVAL`, `EVALSHA` and `SCRIPT`.\nHowever, it's tedious to use in real world scenarios since developers have to take\ncare of script caching and to detect when to use `EVAL` and when to use `EVALSHA`.\nioredis exposes a `defineCommand` method to make scripting much easier to use:\n\n```javascript\nconst redis = new Redis();\n\n// This will define a command myecho:\nredis.defineCommand(\"myecho\", {\n  numberOfKeys: 2,\n  lua: \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\",\n});\n\n// Now `myecho` can be used just like any other ordinary command,\n// and ioredis will try to use `EVALSHA` internally when possible for better performance.\nredis.myecho(\"k1\", \"k2\", \"a1\", \"a2\", (err, result) => {\n  // result === ['k1', 'k2', 'a1', 'a2']\n});\n\n// `myechoBuffer` is also defined automatically to return buffers instead of strings:\nredis.myechoBuffer(\"k1\", \"k2\", \"a1\", \"a2\", (err, result) => {\n  // result[0] equals to Buffer.from('k1');\n});\n\n// And of course it works with pipeline:\nredis.pipeline().set(\"foo\", \"bar\").myecho(\"k1\", \"k2\", \"a1\", \"a2\").exec();\n```\n\n### Dynamic Keys\n\nIf the number of keys can't be determined when defining a command, you can\nomit the `numberOfKeys` property and pass the number of keys as the first argument\nwhen you call the command:\n\n```javascript\nredis.defineCommand(\"echoDynamicKeyNumber\", {\n  lua: \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\",\n});\n\n// Now you have to pass the number of keys as the first argument every time\n// you invoke the `echoDynamicKeyNumber` command:\nredis.echoDynamicKeyNumber(2, \"k1\", \"k2\", \"a1\", \"a2\", (err, result) => {\n  // result === ['k1', 'k2', 'a1', 'a2']\n});\n```\n\n### As Constructor Options\n\nBesides `defineCommand()`, you can also define custom commands with the `scripts` constructor option:\n\n```javascript\nconst redis = new Redis({\n  scripts: {\n    myecho: {\n      numberOfKeys: 2,\n      lua: \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\",\n    },\n  },\n});\n```\n\n### TypeScript Usages\n\nYou can refer to [the example](examples/typescript/scripts.ts) for how to declare your custom commands.\n\n## Transparent Key Prefixing\n\nThis feature allows you to specify a string that will automatically be prepended\nto all the keys in a command, which makes it easier to manage your key\nnamespaces.\n\n**Warning** This feature won't apply to commands like [KEYS](http://redis.io/commands/KEYS) and [SCAN](http://redis.io/commands/scan) that take patterns rather than actual keys([#239](https://github.com/luin/ioredis/issues/239)),\nand this feature also won't apply to the replies of commands even if they are key names ([#325](https://github.com/luin/ioredis/issues/325)).\n\n```javascript\nconst fooRedis = new Redis({ keyPrefix: \"foo:\" });\nfooRedis.set(\"bar\", \"baz\"); // Actually sends SET foo:bar baz\n\nfooRedis.defineCommand(\"myecho\", {\n  numberOfKeys: 2,\n  lua: \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\",\n});\n\n// Works well with pipelining/transaction\nfooRedis\n  .pipeline()\n  // Sends SORT foo:list BY foo:weight_*->fieldname\n  .sort(\"list\", \"BY\", \"weight_*->fieldname\")\n  // Supports custom commands\n  // Sends EVALSHA xxx foo:k1 foo:k2 a1 a2\n  .myecho(\"k1\", \"k2\", \"a1\", \"a2\")\n  .exec();\n```\n\n## Transforming Arguments & Replies\n\nMost Redis commands take one or more Strings as arguments,\nand replies are sent back as a single String or an Array of Strings. However, sometimes\nyou may want something different. For instance, it would be more convenient if the `HGETALL`\ncommand returns a hash (e.g. `{ key: val1, key2: v2 }`) rather than an array of key values (e.g. `[key1, val1, key2, val2]`).\n\nioredis has a flexible system for transforming arguments and replies. There are two types\nof transformers, argument transformer and reply transformer:\n\n```javascript\nconst Redis = require(\"ioredis\");\n\n// Here's the built-in argument transformer converting\n// hmset('key', { k1: 'v1', k2: 'v2' })\n// or\n// hmset('key', new Map([['k1', 'v1'], ['k2', 'v2']]))\n// into\n// hmset('key', 'k1', 'v1', 'k2', 'v2')\nRedis.Command.setArgumentTransformer(\"hmset\", (args) => {\n  if (args.length === 2) {\n    if (args[1] instanceof Map) {\n      // utils is a internal module of ioredis\n      return [args[0], ...utils.convertMapToArray(args[1])];\n    }\n    if (typeof args[1] === \"object\" && args[1] !== null) {\n      return [args[0], ...utils.convertObjectToArray(args[1])];\n    }\n  }\n  return args;\n});\n\n// Here's the built-in reply transformer converting the HGETALL reply\n// ['k1', 'v1', 'k2', 'v2']\n// into\n// { k1: 'v1', 'k2': 'v2' }\nRedis.Command.setReplyTransformer(\"hgetall\", (result) => {\n  if (Array.isArray(result)) {\n    const obj = {};\n    for (let i = 0; i < result.length; i += 2) {\n      obj[result[i]] = result[i + 1];\n    }\n    return obj;\n  }\n  return result;\n});\n```\n\nThere are three built-in transformers, two argument transformers for `hmset` & `mset` and\na reply transformer for `hgetall`. Transformers for `hmset` and `hgetall` were mentioned\nabove, and the transformer for `mset` is similar to the one for `hmset`:\n\n```javascript\nredis.mset({ k1: \"v1\", k2: \"v2\" });\nredis.get(\"k1\", (err, result) => {\n  // result === 'v1';\n});\n\nredis.mset(\n  new Map([\n    [\"k3\", \"v3\"],\n    [\"k4\", \"v4\"],\n  ])\n);\nredis.get(\"k3\", (err, result) => {\n  // result === 'v3';\n});\n```\n\nAnother useful example of a reply transformer is one that changes `hgetall` to return array of arrays instead of objects which avoids an unwanted conversation of hash keys to strings when dealing with binary hash keys:\n\n```javascript\nRedis.Command.setReplyTransformer(\"hgetall\", (result) => {\n  const arr = [];\n  for (let i = 0; i < result.length; i += 2) {\n    arr.push([result[i], result[i + 1]]);\n  }\n  return arr;\n});\nredis.hset(\"h1\", Buffer.from([0x01]), Buffer.from([0x02]));\nredis.hset(\"h1\", Buffer.from([0x03]), Buffer.from([0x04]));\nredis.hgetallBuffer(\"h1\", (err, result) => {\n  // result === [ [ <Buffer 01>, <Buffer 02> ], [ <Buffer 03>, <Buffer 04> ] ];\n});\n```\n\n## Monitor\n\nRedis supports the MONITOR command,\nwhich lets you see all commands received by the Redis server across all client connections,\nincluding from other client libraries and other computers.\n\nThe `monitor` method returns a monitor instance.\nAfter you send the MONITOR command, no other commands are valid on that connection. ioredis will emit a monitor event for every new monitor message that comes across.\nThe callback for the monitor event takes a timestamp from the Redis server and an array of command arguments.\n\nHere is a simple example:\n\n```javascript\nredis.monitor((err, monitor) => {\n  monitor.on(\"monitor\", (time, args, source, database) => {});\n});\n```\n\nHere is another example illustrating an `async` function and `monitor.disconnect()`:\n\n```javascript\nasync () => {\n  const monitor = await redis.monitor();\n  monitor.on(\"monitor\", console.log);\n  // Any other tasks\n  monitor.disconnect();\n};\n```\n\n## Streamify Scanning\n\nRedis 2.8 added the `SCAN` command to incrementally iterate through the keys in the database. It's different from `KEYS` in that\n`SCAN` only returns a small number of elements each call, so it can be used in production without the downside\nof blocking the server for a long time. However, it requires recording the cursor on the client side each time\nthe `SCAN` command is called in order to iterate through all the keys correctly. Since it's a relatively common use case, ioredis\nprovides a streaming interface for the `SCAN` command to make things much easier. A readable stream can be created by calling `scanStream`:\n\n```javascript\nconst redis = new Redis();\n// Create a readable stream (object mode)\nconst stream = redis.scanStream();\nstream.on(\"data\", (resultKeys) => {\n  // `resultKeys` is an array of strings representing key names.\n  // Note that resultKeys may contain 0 keys, and that it will sometimes\n  // contain duplicates due to SCAN's implementation in Redis.\n  for (let i = 0; i < resultKeys.length; i++) {\n    console.log(resultKeys[i]);\n  }\n});\nstream.on(\"end\", () => {\n  console.log(\"all keys have been visited\");\n});\n```\n\n`scanStream` accepts an option, with which you can specify the `MATCH` pattern, the `TYPE` filter, and the `COUNT` argument:\n\n```javascript\nconst stream = redis.scanStream({\n  // only returns keys following the pattern of `user:*`\n  match: \"user:*\",\n  // only return objects that match a given type,\n  // (requires Redis >= 6.0)\n  type: \"zset\",\n  // returns approximately 100 elements per call\n  count: 100,\n});\n```\n\nJust like other commands, `scanStream` has a binary version `scanBufferStream`, which returns an array of buffers. It's useful when\nthe key names are not utf8 strings.\n\nThere are also `hscanStream`, `zscanStream` and `sscanStream` to iterate through elements in a hash, zset and set. The interface of each is\nsimilar to `scanStream` except the first argument is the key name:\n\n```javascript\nconst stream = redis.hscanStream(\"myhash\", {\n  match: \"age:??\",\n});\n```\n\nYou can learn more from the [Redis documentation](http://redis.io/commands/scan).\n\n**Useful Tips**\nIt's pretty common that doing an async task in the `data` handler. We'd like the scanning process to be paused until the async task to be finished. `Stream#pause()` and `Stream#resume()` do the trick. For example if we want to migrate data in Redis to MySQL:\n\n```javascript\nconst stream = redis.scanStream();\nstream.on(\"data\", (resultKeys) => {\n  // Pause the stream from scanning more keys until we've migrated the current keys.\n  stream.pause();\n\n  Promise.all(resultKeys.map(migrateKeyToMySQL)).then(() => {\n    // Resume the stream here.\n    stream.resume();\n  });\n});\n\nstream.on(\"end\", () => {\n  console.log(\"done migration\");\n});\n```\n\n## Auto-reconnect\n\nBy default, ioredis will try to reconnect when the connection to Redis is lost\nexcept when the connection is closed manually by `redis.disconnect()` or `redis.quit()`.\n\nIt's very flexible to control how long to wait to reconnect after disconnection\nusing the `retryStrategy` option:\n\n```javascript\nconst redis = new Redis({\n  // This is the default value of `retryStrategy`\n  retryStrategy(times) {\n    const delay = Math.min(times * 50, 2000);\n    return delay;\n  },\n});\n```\n\n`retryStrategy` is a function that will be called when the connection is lost.\nThe argument `times` means this is the nth reconnection being made and\nthe return value represents how long (in ms) to wait to reconnect. When the\nreturn value isn't a number, ioredis will stop trying to reconnect, and the connection\nwill be lost forever if the user doesn't call `redis.connect()` manually.\n\nWhen reconnected, the client will auto subscribe to channels that the previous connection subscribed to.\nThis behavior can be disabled by setting the `autoResubscribe` option to `false`.\n\nAnd if the previous connection has some unfulfilled commands (most likely blocking commands such as `brpop` and `blpop`),\nthe client will resend them when reconnected. This behavior can be disabled by setting the `autoResendUnfulfilledCommands` option to `false`.\n\nBy default, all pending commands will be flushed with an error every 20 retry attempts. That makes sure commands won't wait forever when the connection is down. You can change this behavior by setting `maxRetriesPerRequest`:\n\n```javascript\nconst redis = new Redis({\n  maxRetriesPerRequest: 1,\n});\n```\n\nSet maxRetriesPerRequest to `null` to disable this behavior, and every command will wait forever until the connection is alive again (which is the default behavior before ioredis v4).\n\n### Reconnect on Error\n\nBesides auto-reconnect when the connection is closed, ioredis supports reconnecting on certain Redis errors using the `reconnectOnError` option. Here's an example that will reconnect when receiving `READONLY` error:\n\n```javascript\nconst redis = new Redis({\n  reconnectOnError(err) {\n    const targetError = \"READONLY\";\n    if (err.message.includes(targetError)) {\n      // Only reconnect when the error contains \"READONLY\"\n      return true; // or `return 1;`\n    }\n  },\n});\n```\n\nThis feature is useful when using Amazon ElastiCache instances with Auto-failover disabled. On these instances, test your `reconnectOnError` handler by manually promoting the replica node to the primary role using the AWS console. The following writes fail with the error `READONLY`. Using `reconnectOnError`, we can force the connection to reconnect on this error in order to connect to the new master. Furthermore, if the `reconnectOnError` returns `2`, ioredis will resend the failed command after reconnecting.\n\nOn ElastiCache instances with Auto-failover enabled, `reconnectOnError` does not execute. Instead of returning a Redis error, AWS closes all connections to the master endpoint until the new primary node is ready. ioredis reconnects via `retryStrategy` instead of `reconnectOnError` after about a minute. On ElastiCache instances with Auto-failover enabled, test failover events with the `Failover primary` option in the AWS console.\n\n## Connection Events\n\nThe Redis instance will emit some events about the state of the connection to the Redis server.\n\n| Event        | Description                                                                                                                                                                                                                                     |\n| :----------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| connect      | emits when a connection is established to the Redis server.                                                                                                                                                                                     |\n| ready        | If `enableReadyCheck` is `true`, client will emit `ready` when the server reports that it is ready to receive commands (e.g. finish loading data from disk).<br>Otherwise, `ready` will be emitted immediately right after the `connect` event. |\n| error        | emits when an error occurs while connecting.<br>However, ioredis emits all `error` events silently (only emits when there's at least one listener) so that your application won't crash if you're not listening to the `error` event.           |\n| close        | emits when an established Redis server connection has closed.                                                                                                                                                                                   |\n| reconnecting | emits after `close` when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting.                                                                                                                        |\n| end          | emits after `close` when no more reconnections will be made, or the connection is failed to establish.                                                                                                                                          |\n| wait         | emits when `lazyConnect` is set and will wait for the first command to be called before connecting.                                                                                                                                             |\n\nYou can also check out the `Redis#status` property to get the current connection status.\n\nBesides the above connection events, there are several other custom events:\n\n| Event  | Description                                                         |\n| :----- | :------------------------------------------------------------------ |\n| select | emits when the database changed. The argument is the new db number. |\n\n## Offline Queue\n\nWhen a command can't be processed by Redis (being sent before the `ready` event), by default, it's added to the offline queue and will be\nexecuted when it can be processed. You can disable this feature by setting the `enableOfflineQueue`\noption to `false`:\n\n```javascript\nconst redis = new Redis({ enableOfflineQueue: false });\n```\n\n## TLS Options\n\nRedis doesn't support TLS natively, however if the redis server you want to connect to is hosted behind a TLS proxy (e.g. [stunnel](https://www.stunnel.org/)) or is offered by a PaaS service that supports TLS connection (e.g. [Redis.com](https://redis.com/)), you can set the `tls` option:\n\n```javascript\nconst redis = new Redis({\n  host: \"localhost\",\n  tls: {\n    // Refer to `tls.connect()` section in\n    // https://nodejs.org/api/tls.html\n    // for all supported options\n    ca: fs.readFileSync(\"cert.pem\"),\n  },\n});\n```\n\nAlternatively, specify the connection through a [`rediss://` URL](https://www.iana.org/assignments/uri-schemes/prov/rediss).\n\n```javascript\nconst redis = new Redis(\"rediss://redis.my-service.com\");\n```\n\nIf you do not want to use a connection string, you can also specify an empty `tls: {}` object:\n\n```javascript\nconst redis = new Redis({\n  host: 'redis.my-service.com',\n  tls: {}\n});\n```\n\n### TLS Profiles\n\n> **Warning**\n> TLS profiles described in this section are going to be deprecated in the next major version. Please provide TLS options explicitly.\n\nTo make it easier to configure we provide a few pre-configured TLS profiles that can be specified by setting the `tls` option to the profile's name or specifying a `tls.profile` option in case you need to customize some values of the profile.\n\nProfiles:\n\n- `RedisCloudFixed`: Contains the CA for [Redis.com](https://redis.com/) Cloud fixed subscriptions\n- `RedisCloudFlexible`: Contains the CA for [Redis.com](https://redis.com/) Cloud flexible subscriptions\n\n```javascript\nconst redis = new Redis({\n  host: \"localhost\",\n  tls: \"RedisCloudFixed\",\n});\n\nconst redisWithClientCertificate = new Redis({\n  host: \"localhost\",\n  tls: {\n    profile: \"RedisCloudFixed\",\n    key: \"123\",\n  },\n});\n```\n\n<hr>\n\n## Sentinel\n\nioredis supports Sentinel out of the box. It works transparently as all features that work when\nyou connect to a single node also work when you connect to a sentinel group. Make sure to run Redis >= 2.8.12 if you want to use this feature. Sentinels have a default port of 26379.\n\nTo connect using Sentinel, use:\n\n```javascript\nconst redis = new Redis({\n  sentinels: [\n    { host: \"localhost\", port: 26379 },\n    { host: \"localhost\", port: 26380 },\n  ],\n  name: \"mymaster\",\n});\n\nredis.set(\"foo\", \"bar\");\n```\n\nThe arguments passed to the constructor are different from the ones you use to connect to a single node, where:\n\n- `name` identifies a group of Redis instances composed of a master and one or more slaves (`mymaster` in the example);\n- `sentinelPassword` (optional) password for Sentinel instances.\n- `sentinels` are a list of sentinels to connect to. The list does not need to enumerate all your sentinel instances, but a few so that if one is down the client will try the next one.\n- `role` (optional) with a value of `slave` will return a random slave from the Sentinel group.\n- `preferredSlaves` (optional) can be used to prefer a particular slave or set of slaves based on priority. It accepts a function or array.\n- `enableTLSForSentinelMode` (optional) set to true if connecting to sentinel instances that are encrypted\n\nioredis **guarantees** that the node you connected to is always a master even after a failover. When a failover happens, instead of trying to reconnect to the failed node (which will be demoted to slave when it's available again), ioredis will ask sentinels for the new master node and connect to it. All commands sent during the failover are queued and will be executed when the new connection is established so that none of the commands will be lost.\n\nIt's possible to connect to a slave instead of a master by specifying the option `role` with the value of `slave` and ioredis will try to connect to a random slave of the specified master, with the guarantee that the connected node is always a slave. If the current node is promoted to master due to a failover, ioredis will disconnect from it and ask the sentinels for another slave node to connect to.\n\nIf you specify the option `preferredSlaves` along with `role: 'slave'` ioredis will attempt to use this value when selecting the slave from the pool of available slaves. The value of `preferredSlaves` should either be a function that accepts an array of available slaves and returns a single result, or an array of slave values priorities by the lowest `prio` value first with a default value of `1`.\n\n```javascript\n// available slaves format\nconst availableSlaves = [{ ip: \"127.0.0.1\", port: \"31231\", flags: \"slave\" }];\n\n// preferredSlaves array format\nlet preferredSlaves = [\n  { ip: \"127.0.0.1\", port: \"31231\", prio: 1 },\n  { ip: \"127.0.0.1\", port: \"31232\", prio: 2 },\n];\n\n// preferredSlaves function format\npreferredSlaves = function (availableSlaves) {\n  for (let i = 0; i < availableSlaves.length; i++) {\n    const slave = availableSlaves[i];\n    if (slave.ip === \"127.0.0.1\") {\n      if (slave.port === \"31234\") {\n        return slave;\n      }\n    }\n  }\n  // if no preferred slaves are available a random one is used\n  return false;\n};\n\nconst redis = new Redis({\n  sentinels: [\n    { host: \"127.0.0.1\", port: 26379 },\n    { host: \"127.0.0.1\", port: 26380 },\n  ],\n  name: \"mymaster\",\n  role: \"slave\",\n  preferredSlaves: preferredSlaves,\n});\n```\n\nBesides the `retryStrategy` option, there's also a `sentinelRetryStrategy` in Sentinel mode which will be invoked when all the sentinel nodes are unreachable during connecting. If `sentinelRetryStrategy` returns a valid delay time, ioredis will try to reconnect from scratch. The default value of `sentinelRetryStrategy` is:\n\n```javascript\nfunction (times) {\n  const delay = Math.min(times * 10, 1000);\n  return delay;\n}\n```\n\n## Cluster\n\nRedis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes.\nYou can connect to a Redis Cluster like this:\n\n```javascript\nconst Redis = require(\"ioredis\");\n\nconst cluster = new Redis.Cluster([\n  {\n    port: 6380,\n    host: \"127.0.0.1\",\n  },\n  {\n    port: 6381,\n    host: \"127.0.0.1\",\n  },\n]);\n\ncluster.set(\"foo\", \"bar\");\ncluster.get(\"foo\", (err, res) => {\n  // res === 'bar'\n});\n```\n\n`Cluster` constructor accepts two arguments, where:\n\n0.  The first argument is a list of nodes of the cluster you want to connect to.\n    Just like Sentinel, the list does not need to enumerate all your cluster nodes,\n    but a few so that if one is unreachable the client will try the next one, and the client will discover other nodes automatically when at least one node is connected.\n1.  The second argument is the options, where:\n\n    - `clusterRetryStrategy`: When none of the startup nodes are reachable, `clusterRetryStrategy` will be invoked. When a number is returned,\n      ioredis will try to reconnect to the startup nodes from scratch after the specified delay (in ms). Otherwise, an error of \"None of startup nodes is available\" will be returned.\n      The default value of this option is:\n\n      ```javascript\n      function (times) {\n        const delay = Math.min(100 + times * 2, 2000);\n        return delay;\n      }\n      ```\n\n      It's possible to modify the `startupNodes` property in order to switch to another set of nodes here:\n\n      ```javascript\n      function (times) {\n        this.startupNodes = [{ port: 6790, host: '127.0.0.1' }];\n        return Math.min(100 + times * 2, 2000);\n      }\n      ```\n\n    - `dnsLookup`: Alternative DNS lookup function (`dns.lookup()` is used by default). It may be useful to override this in special cases, such as when AWS ElastiCache used with TLS enabled.\n    - `enableOfflineQueue`: Similar to the `enableOfflineQueue` option of `Redis` class.\n    - `enableReadyCheck`: When enabled, \"ready\" event will only be emitted when `CLUSTER INFO` command\n      reporting the cluster is ready for handling commands. Otherwise, it will be emitted immediately after \"connect\" is emitted.\n    - `scaleReads`: Config where to send the read queries. See below for more details.\n    - `maxRedirections`: When a cluster related error (e.g. `MOVED`, `ASK` and `CLUSTERDOWN` etc.) is received, the client will redirect the\n      command to another node. This option limits the max redirections allowed when sending a command. The default value is `16`.\n    - `retryDelayOnFailover`: If the target node is disconnected when sending a command,\n      ioredis will retry after the specified delay. The default value is `100`. You should make sure `retryDelayOnFailover * maxRedirections > cluster-node-timeout`\n      to insure that no command will fail during a failover.\n    - `retryDelayOnClusterDown`: When a cluster is down, all commands will be rejected with the error of `CLUSTERDOWN`. If this option is a number (by default, it is `100`), the client\n      will resend the commands after the specified time (in ms).\n    - `retryDelayOnTryAgain`: If this option is a number (by default, it is `100`), the client\n      will resend the commands rejected with `TRYAGAIN` error after the specified time (in ms).\n    - `retryDelayOnMoved`: By default, this value is `0` (in ms), which means when a `MOVED` error is received, the client will resend\n      the command instantly to the node returned together with the `MOVED` error. However, sometimes it takes time for a cluster to become\n      state stabilized after a failover, so adding a delay before resending can prevent a ping pong effect.\n    - `redisOptions`: Default options passed to the constructor of `Redis` when connecting to a node.\n    - `slotsRefreshTimeout`: Milliseconds before a timeout occurs while refreshing slots from the cluster (default `1000`).\n    - `slotsRefreshInterval`: Milliseconds between every automatic slots refresh (by default, it is disabled).\n\n### Read-Write Splitting\n\nA typical redis cluster contains three or more masters and several slaves for each master. It's possible to scale out redis cluster by sending read queries to slaves and write queries to masters by setting the `scaleReads` option.\n\n`scaleReads` is \"master\" by default, which means ioredis will never send any queries to slaves. There are other three available options:\n\n1. \"all\": Send write queries to masters and read queries to masters or slaves randomly.\n2. \"slave\": Send write queries to masters and read queries to slaves.\n3. a custom `function(nodes, command): node`: Will choose the custom function to select to which node to send read queries (write queries keep being sent to master). The first node in `nodes` is always the master serving the relevant slots. If the function returns an array of nodes, a random node of that list will be selected.\n\nFor example:\n\n```javascript\nconst cluster = new Redis.Cluster(\n  [\n    /* nodes */\n  ],\n  {\n    scaleReads: \"slave\",\n  }\n);\ncluster.set(\"foo\", \"bar\"); // This query will be sent to one of the masters.\ncluster.get(\"foo\", (err, res) => {\n  // This query will be sent to one of the slaves.\n});\n```\n\n**NB** In the code snippet above, the `res` may not be equal to \"bar\" because of the lag of replication between the master and slaves.\n\n### Running Commands to Multiple Nodes\n\nEvery command will be sent to exactly one node. For commands containing keys, (e.g. `GET`, `SET` and `HGETALL`), ioredis sends them to the node that serving the keys, and for other commands not containing keys, (e.g. `INFO`, `KEYS` and `FLUSHDB`), ioredis sends them to a random node.\n\nSometimes you may want to send a command to multiple nodes (masters or slaves) of the cluster, you can get the nodes via `Cluster#nodes()` method.\n\n`Cluster#nodes()` accepts a parameter role, which can be \"master\", \"slave\" and \"all\" (default), and returns an array of `Redis` instance. For example:\n\n```javascript\n// Send `FLUSHDB` command to all slaves:\nconst slaves = cluster.nodes(\"slave\");\nPromise.all(slaves.map((node) => node.flushdb()));\n\n// Get keys of all the masters:\nconst masters = cluster.nodes(\"master\");\nPromise.all(\n  masters\n    .map((node) => node.keys())\n    .then((keys) => {\n      // keys: [['key1', 'key2'], ['key3', 'key4']]\n    })\n);\n```\n\n### NAT Mapping\n\nSometimes the cluster is hosted within a internal network that can only be accessed via a NAT (Network Address Translation) instance. See [Accessing ElastiCache from outside AWS](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/accessing-elasticache.html) as an example.\n\nYou can specify nat mapping rules via `natMap` option:\n\n```javascript\nconst cluster = new Redis.Cluster(\n  [\n    {\n      host: \"203.0.113.73\",\n      port: 30001,\n    },\n  ],\n  {\n    natMap: {\n      \"10.0.1.230:30001\": { host: \"203.0.113.73\", port: 30001 },\n      \"10.0.1.231:30001\": { host: \"203.0.113.73\", port: 30002 },\n      \"10.0.1.232:30001\": { host: \"203.0.113.73\", port: 30003 },\n    },\n  }\n);\n```\n\nThis option is also useful when the cluster is running inside a Docker container.\n\n### Transaction and Pipeline in Cluster Mode\n\nAlmost all features that are supported by `Redis` are also supported by `Redis.Cluster`, e.g. custom commands, transaction and pipeline.\nHowever there are some differences when using transaction and pipeline in Cluster mode:\n\n0. All keys in a pipeline should belong to slots served by the same node, since ioredis sends all commands in a pipeline to the same node.\n1. You can't use `multi` without pipeline (aka `cluster.multi({ pipeline: false })`). This is because when you call `cluster.multi({ pipeline: false })`, ioredis doesn't know which node the `multi` command should be sent to.\n\nWhen any commands in a pipeline receives a `MOVED` or `ASK` error, ioredis will resend the whole pipeline to the specified node automatically if all of the following conditions are satisfied:\n\n0. All errors received in the pipeline are the same. For example, we won't resend the pipeline if we got two `MOVED` errors pointing to different nodes.\n1. All commands executed successfully are readonly commands. This makes sure that resending the pipeline won't have side effects.\n\n### Pub/Sub\n\nPub/Sub in cluster mode works exactly as the same as in standalone mode. Internally, when a node of the cluster receives a message, it will broadcast the message to the other nodes. ioredis makes sure that each message will only be received once by strictly subscribing one node at the same time.\n\n```javascript\nconst nodes = [\n  /* nodes */\n];\nconst pub = new Redis.Cluster(nodes);\nconst sub = new Redis.Cluster(nodes);\nsub.on(\"message\", (channel, message) => {\n  console.log(channel, message);\n});\n\nsub.subscribe(\"news\", () => {\n  pub.publish(\"news\", \"highlights\");\n});\n```\n\n### Events\n\n| Event        | Description                                                                                                                                                                                                |\n| :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| connect      | emits when a connection is established to the Redis server.                                                                                                                                                |\n| ready        | emits when `CLUSTER INFO` reporting the cluster is able to receive commands (if `enableReadyCheck` is `true`) or immediately after `connect` event (if `enableReadyCheck` is false).                       |\n| error        | emits when an error occurs while connecting with a property of `lastNodeError` representing the last node error received. This event is emitted silently (only emitting if there's at least one listener). |\n| close        | emits when an established Redis server connection has closed.                                                                                                                                              |\n| reconnecting | emits after `close` when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting.                                                                                   |\n| end          | emits after `close` when no more reconnections will be made.                                                                                                                                               |\n| +node        | emits when a new node is connected.                                                                                                                                                                        |\n| -node        | emits when a node is disconnected.                                                                                                                                                                         |\n| node error   | emits when an error occurs when connecting to a node. The second argument indicates the address of the node.                                                                                               |\n\n### Password\n\nSetting the `password` option to access password-protected clusters:\n\n```javascript\nconst Redis = require(\"ioredis\");\nconst cluster = new Redis.Cluster(nodes, {\n  redisOptions: {\n    password: \"your-cluster-password\",\n  },\n});\n```\n\nIf some of nodes in the cluster using a different password, you should specify them in the first parameter:\n\n```javascript\nconst Redis = require(\"ioredis\");\nconst cluster = new Redis.Cluster(\n  [\n    // Use password \"password-for-30001\" for 30001\n    { port: 30001, password: \"password-for-30001\" },\n    // Don't use password when accessing 30002\n    { port: 30002, password: null },\n    // Other nodes will use \"fallback-password\"\n  ],\n  {\n    redisOptions: {\n      password: \"fallback-password\",\n    },\n  }\n);\n```\n\n### Special Note: Aws Elasticache Clusters with TLS\n\nAWS ElastiCache for Redis (Clustered Mode) supports TLS encryption. If you use\nthis, you may encounter errors with invalid certificates. To resolve this\nissue, construct the `Cluster` with the `dnsLookup` option as follows:\n\n```javascript\nconst cluster = new Redis.Cluster(\n  [\n    {\n      host: \"clustercfg.myCluster.abcdefg.xyz.cache.amazonaws.com\",\n      port: 6379,\n    },\n  ],\n  {\n    dnsLookup: (address, callback) => callback(null, address),\n    redisOptions: {\n      tls: {},\n    },\n  }\n);\n```\n\n<hr>\n\n## Autopipelining\n\nIn standard mode, when you issue multiple commands, ioredis sends them to the server one by one. As described in Redis pipeline documentation, this is a suboptimal use of the network link, especially when such link is not very performant.\n\nThe TCP and network overhead negatively affects performance. Commands are stuck in the send queue until the previous ones are correctly delivered to the server. This is a problem known as Head-Of-Line blocking (HOL).\n\nioredis supports a feature called ‚Äúauto pipelining‚Äù. It can be enabled by setting the option `enableAutoPipelining` to `true`. No other code change is necessary.\n\nIn auto pipelining mode, all commands issued during an event loop are enqueued in a pipeline automatically managed by ioredis. At the end of the iteration, the pipeline is executed and thus all commands are sent to the server at the same time.\n\nThis feature can dramatically improve throughput and avoids HOL blocking. In our benchmarks, the improvement was between 35% and 50%.\n\nWhile an automatic pipeline is executing, all new commands will be enqueued in a new pipeline which will be executed as soon as the previous finishes.\n\nWhen using Redis Cluster, one pipeline per node is created. Commands are assigned to pipelines according to which node serves the slot.\n\nA pipeline will thus contain commands using different slots but that ultimately are assigned to the same node.\n\nNote that the same slot limitation within a single command still holds, as it is a Redis limitation.\n\n### Example of Automatic Pipeline Enqueuing\n\nThis sample code uses ioredis with automatic pipeline enabled.\n\n```javascript\nconst Redis = require(\"./built\");\nconst http = require(\"http\");\n\nconst db = new Redis({ enableAutoPipelining: true });\n\nconst server = http.createServer((request, response) => {\n  const key = new URL(request.url, \"https://localhost:3000/\").searchParams.get(\n    \"key\"\n  );\n\n  db.get(key, (err, value) => {\n    response.writeHead(200, { \"Content-Type\": \"text/plain\" });\n    response.end(value);\n  });\n});\n\nserver.listen(3000);\n```\n\nWhen Node receives requests, it schedules them to be processed in one or more iterations of the events loop.\n\nAll commands issued by requests processing during one iteration of the loop will be wrapped in a pipeline automatically created by ioredis.\n\nIn the example above, the pipeline will have the following contents:\n\n```\nGET key1\nGET key2\nGET key3\n...\nGET keyN\n```\n\nWhen all events in the current loop have been processed, the pipeline is executed and thus all commands are sent to the server at the same time.\n\nWhile waiting for pipeline response from Redis, Node will still be able to process requests. All commands issued by request handler will be enqueued in a new automatically created pipeline. This pipeline will not be sent to the server yet.\n\nAs soon as a previous automatic pipeline has received all responses from the server, the new pipeline is immediately sent without waiting for the events loop iteration to finish.\n\nThis approach increases the utilization of the network link, reduces the TCP overhead and idle times and therefore improves throughput.\n\n### Benchmarks\n\nHere's some of the results of our tests for a single node.\n\nEach iteration of the test runs 1000 random commands on the server.\n\n|                           | Samples | Result        | Tolerance |\n| ------------------------- | ------- | ------------- | --------- |\n| default                   | 1000    | 174.62 op/sec | ¬± 0.45 %  |\n| enableAutoPipelining=true | 1500    | 233.33 op/sec | ¬± 0.88 %  |\n\nAnd here's the same test for a cluster of 3 masters and 3 replicas:\n\n|                           | Samples | Result        | Tolerance |\n| ------------------------- | ------- | ------------- | --------- |\n| default                   | 1000    | 164.05 op/sec | ¬± 0.42 %  |\n| enableAutoPipelining=true | 3000    | 235.31 op/sec | ¬± 0.94 %  |\n\n# Error Handling\n\nAll the errors returned by the Redis server are instances of `ReplyError`, which can be accessed via `Redis`:\n\n```javascript\nconst Redis = require(\"ioredis\");\nconst redis = new Redis();\n// This command causes a reply error since the SET command requires two arguments.\nredis.set(\"foo\", (err) => {\n  err instanceof Redis.ReplyError;\n});\n```\n\nThis is the error stack of the `ReplyError`:\n\n```\nReplyError: ERR wrong number of arguments for 'set' command\n    at ReplyParser._parseResult (/app/node_modules/ioredis/lib/parsers/javascript.js:60:14)\n    at ReplyParser.execute (/app/node_modules/ioredis/lib/parsers/javascript.js:178:20)\n    at Socket.<anonymous> (/app/node_modules/ioredis/lib/redis/event_handler.js:99:22)\n    at Socket.emit (events.js:97:17)\n    at readableAddChunk (_stream_readable.js:143:16)\n    at Socket.Readable.push (_stream_readable.js:106:10)\n    at TCP.onread (net.js:509:20)\n```\n\nBy default, the error stack doesn't make any sense because the whole stack happens in the ioredis\nmodule itself, not in your code. So it's not easy to find out where the error happens in your code.\nioredis provides an option `showFriendlyErrorStack` to solve the problem. When you enable\n`showFriendlyErrorStack`, ioredis will optimize the error stack for you:\n\n```javascript\nconst Redis = require(\"ioredis\");\nconst redis = new Redis({ showFriendlyErrorStack: true });\nredis.set(\"foo\");\n```\n\nAnd the output will be:\n\n```\nReplyError: ERR wrong number of arguments for 'set' command\n    at Object.<anonymous> (/app/index.js:3:7)\n    at Module._compile (module.js:446:26)\n    at Object.Module._extensions..js (module.js:464:10)\n    at Module.load (module.js:341:32)\n    at Function.Module._load (module.js:296:12)\n    at Function.Module.runMain (module.js:487:10)\n    at startup (node.js:111:16)\n    at node.js:799:3\n```\n\nThis time the stack tells you that the error happens on the third line in your code. Pretty sweet!\nHowever, it would decrease the performance significantly to optimize the error stack. So by\ndefault, this option is disabled and can only be used for debugging purposes. You **shouldn't** use this feature in a production environment.\n\n# Running tests\n\nStart a Redis server on 127.0.0.1:6379, and then:\n\n```shell\nnpm test\n```\n\n`FLUSH ALL` will be invoked after each test, so make sure there's no valuable data in it before running tests.\n\nIf your testing environment does not let you spin up a Redis server [ioredis-mock](https://github.com/stipsan/ioredis-mock) is a drop-in replacement you can use in your tests. It aims to behave identically to ioredis connected to a Redis server so that your integration tests is easier to write and of better quality.\n\n# Debug\n\nYou can set the `DEBUG` env to `ioredis:*` to print debug info:\n\n```shell\n$ DEBUG=ioredis:* node app.js\n```\n\n# Join in!\n\nI'm happy to receive bug reports, fixes, documentation enhancements, and any other improvements.\n\nAnd since I'm not a native English speaker, if you find any grammar mistakes in the documentation, please also let me know. :)\n\n# Become a Sponsor\n\nOpen source is hard and time-consuming. If you want to invest in ioredis's future you can become a sponsor and make us spend more time on this library's improvements and new features.\n\n<a href=\"https://opencollective.com/ioredis\"><img src=\"https://opencollective.com/ioredis/tiers/sponsor.svg?avatarHeight=36\"></a>\n\nThank you for using ioredis :-)\n\n# Contributors\n\nThis project exists thanks to all the people who contribute:\n\n<a href=\"https://github.com/luin/ioredis/graphs/contributors\"><img src=\"https://opencollective.com/ioredis/contributors.svg?width=890&showBtn=false\" /></a>\n\n# License\n\nMIT\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fluin%2Fioredis.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fluin%2Fioredis?ref=badge_large)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015-2022 Zihua Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ioredis/-/ioredis-5.3.2.tgz#9139f596f62fc9c72d873353ac5395bcf05709f7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ioredis/-/ioredis-5.3.2.tgz",
    "hash": "9139f596f62fc9c72d873353ac5395bcf05709f7",
    "integrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA==",
    "registry": "npm",
    "packageName": "ioredis",
    "cacheIntegrity": "sha512-1DKMMzlIHM02eBBVOFQ1+AolGjs6+xEcM4PDL7NqOS6szq7H9jSaEkIUH6/a5Hl241LzW6JLSiAbNvTQjUupUA== sha1-kTn1lvYvyccthzNTrFOVvPBXCfc="
  },
  "registry": "npm",
  "hash": "9139f596f62fc9c72d873353ac5395bcf05709f7"
}