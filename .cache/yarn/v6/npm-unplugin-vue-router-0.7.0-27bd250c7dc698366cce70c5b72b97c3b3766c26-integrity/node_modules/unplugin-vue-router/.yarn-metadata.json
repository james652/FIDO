{
  "manifest": {
    "name": "unplugin-vue-router",
    "version": "0.7.0",
    "packageManager": "pnpm@8.7.6",
    "description": "File based typed routing for Vue Router",
    "keywords": [
      "vue-router",
      "pages",
      "filesystem",
      "types",
      "typed",
      "router",
      "unplugin",
      "vite",
      "webpack",
      "rollup"
    ],
    "homepage": "https://github.com/posva/unplugin-vue-router#readme",
    "bugs": {
      "url": "https://github.com/posva/unplugin-vue-router/issues"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/posva/unplugin-vue-router.git"
    },
    "main": "dist/index.js",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "require": "./dist/index.js",
        "import": "./dist/index.mjs"
      },
      "./vite": {
        "types": "./dist/vite.d.ts",
        "require": "./dist/vite.js",
        "import": "./dist/vite.mjs"
      },
      "./webpack": {
        "types": "./dist/webpack.d.ts",
        "require": "./dist/webpack.js",
        "import": "./dist/webpack.mjs"
      },
      "./rollup": {
        "types": "./dist/rollup.d.ts",
        "require": "./dist/rollup.js",
        "import": "./dist/rollup.mjs"
      },
      "./esbuild": {
        "types": "./dist/esbuild.d.ts",
        "require": "./dist/esbuild.js",
        "import": "./dist/esbuild.mjs"
      },
      "./options": {
        "types": "./dist/options.d.ts",
        "require": "./dist/options.js",
        "import": "./dist/options.mjs"
      },
      "./runtime": {
        "types": "./dist/runtime.d.ts",
        "require": "./dist/runtime.js",
        "import": "./dist/runtime.mjs"
      },
      "./types": {
        "types": "./dist/types.d.ts",
        "require": "./dist/types.js",
        "import": "./dist/types.mjs"
      },
      "./client": {
        "types": "./client.d.ts"
      },
      "./*": "./*"
    },
    "files": [
      "dist",
      "./route.schema.json",
      "*.d.ts"
    ],
    "gitHooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "node scripts/verifyCommit.mjs"
    },
    "lint-staged": {
      "*.js": [
        "prettier --write"
      ],
      "*.ts?(x)": [
        "prettier --parser=typescript --write"
      ]
    },
    "dependencies": {
      "@babel/types": "^7.22.19",
      "@rollup/pluginutils": "^5.0.4",
      "@vue-macros/common": "^1.8.0",
      "ast-walker-scope": "^0.5.0",
      "chokidar": "^3.5.3",
      "fast-glob": "^3.3.1",
      "json5": "^2.2.3",
      "local-pkg": "^0.4.3",
      "mlly": "^1.4.2",
      "pathe": "^1.1.1",
      "scule": "^1.0.0",
      "unplugin": "^1.5.0",
      "yaml": "^2.3.2"
    },
    "peerDependencies": {
      "vue-router": "^4.1.0"
    },
    "peerDependenciesMeta": {
      "vue-router": {
        "optional": true
      }
    },
    "devDependencies": {
      "@vitest/coverage-v8": "^0.34.4",
      "@volar/vue-language-core": "^1.6.5",
      "@vue/test-utils": "^2.4.1",
      "chalk": "^5.3.0",
      "conventional-changelog-cli": "^2.2.2",
      "enquirer": "^2.4.1",
      "esno": "^0.17.0",
      "execa": "^7.2.0",
      "happy-dom": "^12.1.2",
      "lint-staged": "^13.3.0",
      "minimist": "^1.2.8",
      "nodemon": "^2.0.22",
      "p-series": "^3.0.0",
      "prettier": "^2.8.8",
      "rimraf": "^5.0.1",
      "rollup": "^3.29.2",
      "semver": "^7.5.4",
      "ts-expect": "^1.3.0",
      "tsup": "^7.2.0",
      "typescript": "^5.2.2",
      "unplugin-auto-import": "^0.16.6",
      "vite": "^4.4.9",
      "vite-plugin-vue-markdown": "^0.23.8",
      "vitest": "^0.34.4",
      "vue": "^3.3.4",
      "vue-router": "^4.2.4",
      "vue-router-mock": "^1.0.0",
      "webpack": "^5.88.2",
      "yorkie": "^2.0.0"
    },
    "scripts": {
      "build": "tsup",
      "dev": "tsup --watch src",
      "build:fix": "esno scripts/postbuild.ts",
      "lint": "prettier -c '{src,examples,playground}/**/*.{ts,vue}'",
      "play": "npm -C playground run dev",
      "play:build": "npm -C playground run build",
      "release": "node scripts/release.mjs",
      "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 1",
      "start": "esno src/index.ts",
      "test": "vitest"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-unplugin-vue-router-0.7.0-27bd250c7dc698366cce70c5b72b97c3b3766c26-integrity/node_modules/unplugin-vue-router/package.json",
    "readmeFilename": "README.md",
    "readme": "# unplugin-vue-router\n\n[![NPM version](https://img.shields.io/npm/v/unplugin-vue-router?color=black&label=)](https://www.npmjs.com/package/unplugin-vue-router) [![ci status](https://github.com/posva/unplugin-vue-router/actions/workflows/ci.yml/badge.svg)](https://github.com/posva/unplugin-vue-router/actions/workflows/ci.yml)\n\n> Automatic file based Routing in Vue with TS support ‚ú®\n\n<!-- https://user-images.githubusercontent.com/664177/176622756-3d10acc6-caac-40ff-a41f-9bdccadf7f1d.mp4 -->\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/664177/176623167-0153f9fb-79cd-49a7-8575-429ce323dd11.gif\" >\n</p>\n\nThis build-time plugin simplifies your routing setup **and** makes it safer and easier to use thanks to TypeScript. Requires Vue Router at least 4.1.0.\n\n‚ö†Ô∏è This package is still experimental. If you found any issue, design flaw, or have ideas to improve it, please, open an [issue](https://github.com/posva/unplugin-vue-router/issues/new/choose) or a [Discussion](https://github.com/posva/unplugin-vue-router/discussions).\n\n## Install\n\n```bash\nnpm i -D unplugin-vue-router\n```\n\nAdd VueRouter plugin **before** Vue plugin:\n\n<details>\n<summary>Vite</summary><br>\n\n```ts\n// vite.config.ts\nimport VueRouter from 'unplugin-vue-router/vite'\n\nexport default defineConfig({\n  plugins: [\n    VueRouter({\n      /* options */\n    }),\n    // ‚ö†Ô∏è Vue must be placed after VueRouter()\n    Vue(),\n  ],\n})\n```\n\nExample: [`playground/`](./playground/)\n\n<br></details>\n\n<details>\n<summary>Rollup</summary><br>\n\n```ts\n// rollup.config.js\nimport VueRouter from 'unplugin-vue-router/rollup'\n\nexport default {\n  plugins: [\n    VueRouter({\n      /* options */\n    }),\n    // ‚ö†Ô∏è Vue must be placed after VueRouter()\n    Vue(),\n  ],\n}\n```\n\n<br></details>\n\n<details>\n<summary>Webpack</summary><br>\n\n```ts\n// webpack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-vue-router/webpack')({\n      /* options */\n    }),\n  ],\n}\n```\n\n<br></details>\n\n<details>\n<summary>Vue CLI</summary><br>\n\n```ts\n// vue.config.js\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      require('unplugin-vue-router/webpack')({\n        /* options */\n      }),\n    ],\n  },\n}\n```\n\n<br></details>\n\n<details>\n<summary>esbuild</summary><br>\n\n```ts\n// esbuild.config.js\nimport { build } from 'esbuild'\nimport VueRouter from 'unplugin-vue-router/esbuild'\n\nbuild({\n  plugins: [VueRouter()],\n})\n```\n\n<br></details>\n\n## Setup\n\nAfter installing, **you should run your dev server** (usually `npm run dev`) **to generate the first version of the types**. Then, you should replace your imports from `vue-router` to `vue-router/auto`:\n\n```diff\n-import { createRouter, createWebHistory } from 'vue-router'\n+import { createRouter, createWebHistory } from 'vue-router/auto'\n\ncreateRouter({\n  history: createWebHistory(),\n  // You don't need to pass the routes anymore,\n  // the plugin writes it for you ü§ñ\n})\n```\n\n> **Note**\n> You can exclude `vue-router` from VSCode import suggestions by adding this setting to your `.vscode/settings.json`:\n\n```json\n{\n  \"typescript.preferences.autoImportFileExcludePatterns\": [\"vue-router\"]\n}\n```\n\nThis will ensure VSCode only suggests `vue-router/auto` for imports. Alternatively, you can also configure [auto imports](#auto-imports).\n\nAlternatively, **you can also import the `routes` array** and create the router manually or pass it to some plugin. Here is an example with [Vitesse starter](https://github.com/antfu/vitesse/blob/main/src/main.ts):\n\n<!-- TODO: add notes for data fetching guards -->\n\n```diff\n import { ViteSSG } from 'vite-ssg'\n import { setupLayouts } from 'virtual:generated-layouts'\n import App from './App.vue'\n import type { UserModule } from './types'\n-import generatedRoutes from '~pages'\n+import { routes } from 'vue-router/auto/routes'\n\n import '@unocss/reset/tailwind.css'\n import './styles/main.css'\n import 'uno.css'\n\n-const routes = setupLayouts(generatedRoutes)\n\n // https://github.com/antfu/vite-ssg\n export const createApp = ViteSSG(\n   App,\n   {\n-   routes,\n+   routes: setupLayouts(routes),\n    base: import.meta.env.BASE_URL\n  },\n   (ctx) => {\n     // install all modules under `modules/`\n     Object.values(import.meta.glob<{ install: UserModule }>('./modules/*.ts', { eager: true }))\n       .forEach(i => i.install?.(ctx))\n   },\n )\n```\n\n### Auto Imports\n\nIf you are using [unplugin-auto-import](https://github.com/antfu/unplugin-auto-import), make sure to remove the `vue-router` preset and use the one exported by `unplugin-vue-router`:\n\n```diff\n import { defineConfig } from 'vite'\n import AutoImport from 'unplugin-auto-import/vite'\n+import { VueRouterAutoImports } from 'unplugin-vue-router'\n\n export default defineConfig({\n   plugins: [\n     // other plugins\n     AutoImport({\n       imports: [\n-        'vue-router',\n+        VueRouterAutoImports,\n       ],\n     }),\n   ],\n })\n```\n\nNote that the `vue-router` preset might export less things than the one exported by `unplugin-vue-router` so you might need to add any other imports you were relying on manually:\n\n```diff\n     AutoImport({\n       imports: [\n-        'vue-router',\n+        VueRouterAutoImports,\n+        {\n+           // add any other imports you were relying on\n+           'vue-router/auto': ['useLink']\n+        },\n       ],\n     }),\n```\n\nMake sure to also check and follow [the TypeScript section](#typescript) below **if you are using TypeScript or have a `jsconfig.json` file**.\n\n## Configuration\n\nHave a glimpse of all the existing configuration options with their corresponding **default values**:\n\n```ts\nVueRouter({\n  // Folder(s) to scan for vue components and generate routes. Can be a string, or\n  // an object, or an array of those. Each option allows to override global options.\n  // like exclude, extensions, etc.\n  routesFolder: 'src/pages',\n\n  // allowed extensions for components to be considered as pages\n  // can also be a suffix: e.g. `.page.vue` will match `home.page.vue`\n  // but remove it from the route path\n  extensions: ['.vue'],\n\n  // list of glob files to exclude from the routes generation\n  // e.g. ['**/__*'] will exclude all files and folders starting with `__`\n  // e.g. ['**/__*/**/*'] will exclude all files within folders starting with `__`\n  // e.g. ['**/*.component.vue'] will exclude components ending with `.component.vue`\n  exclude: [],\n\n  // Path for the generated types. Defaults to `./typed-router.d.ts` if typescript\n  // is installed. Can be disabled by passing `false`.\n  dts: './typed-router.d.ts',\n\n  // Override the name generation of routes. unplugin-vue-router exports two versions:\n  // `getFileBasedRouteName()` (the default) and `getPascalCaseRouteName()`. Import any\n  // of them within your `vite.config.ts` file.\n  getRouteName: (routeNode) => myOwnGenerateRouteName(routeNode),\n\n  // Customizes the default langage for `<route>` blocks\n  // json5 is just a more permissive version of json\n  routeBlockLang: 'json5',\n\n  // Change the import mode of page components. Can be 'async', 'sync', or a function with the following signature:\n  // (filepath: string) => 'async' | 'sync'\n  importMode: 'async',\n})\n```\n\n## Routes folder structure\n\nBy default, this plugins checks the folder at `src/pages` for any `.vue` files and generates the corresponding routing structure basing itself in the file name. This way, you no longer need to maintain a `routes` array when adding routes to your application, **instead just add the new `.vue` component to the routes folder and let this plugin do the rest!**\n\nLet's take a look at a simple example:\n\n```text\nsrc/pages/\n‚îú‚îÄ‚îÄ index.vue\n‚îú‚îÄ‚îÄ about.vue\n‚îî‚îÄ‚îÄ users/\n    ‚îú‚îÄ‚îÄ index.vue\n    ‚îî‚îÄ‚îÄ [id].vue\n```\n\nThis will generate the following routes:\n\n- `/`: -> renders the `index.vue` component\n- `/about`: -> renders the `about.vue` component\n- `/users`: -> renders the `users/index.vue` component\n- `/users/:id`: -> renders the `users/[id].vue` component. `id` becomes a route param.\n\n### Index Routes\n\nAny `index.vue` file will generate an empty path (similar to `index.html` files):\n\n- `src/pages/index.vue`: generates a `/` route\n- `src/pages/users/index.vue`: generates a `/users` route\n\n### Nested Routes\n\nNested routes are automatically defined by defining a `.vue` file alongside a folder **with the same name**. If you create both a `src/pages/users/index.vue` and a `src/pages/users.vue` components, the `src/pages/users/index.vue` will be rendered within the `src/pages/users.vue`'s `<RouterView>`.\n\nIn other words, given this folder structure:\n\n```text\nsrc/pages/\n‚îú‚îÄ‚îÄ users/\n‚îÇ   ‚îî‚îÄ‚îÄ index.vue\n‚îî‚îÄ‚îÄ users.vue\n```\n\nYou will get this `routes` array:\n\n```js\nconst routes = [\n  {\n    path: '/users',\n    component: () => import('src/pages/users.vue'),\n    children: [\n      { path: '', component: () => import('src/pages/users/index.vue') },\n    ],\n  },\n]\n```\n\nWhile omitting the `src/pages/users.vue` component will generate the following routes:\n\n```js\nconst routes = [\n  {\n    path: '/users',\n    // notice how there is no component here\n    children: [\n      { path: '', component: () => import('src/pages/users/index.vue') },\n    ],\n  },\n]\n```\n\nNote the folder and file's name `users/` could be any valid naming like `my-[id]-param/`.\n\n#### Nested routes without nesting layouts\n\nSometimes you might want to add _nesting to the URL_ in the form of slashes but you don't want it to impact your UI hierarchy. Consider the following folder structure:\n\n```text\nsrc/pages/\n‚îú‚îÄ‚îÄ users/\n‚îÇ   ‚îú‚îÄ‚îÄ [id].vue\n‚îÇ   ‚îî‚îÄ‚îÄ index.vue\n‚îî‚îÄ‚îÄ users.vue\n```\n\nIf you want to add a new route `/users/create` you could add a new file `src/pages/users/create.vue` but that would nest the `create.vue` component within the `users.vue` component. To avoid this you can instead create a file `src/pages/users.create.vue`. The `.` will become a `/` when generating the routes:\n\n```js\nconst routes = [\n  {\n    path: '/users',\n    component: () => import('src/pages/users.vue'),\n    children: [\n      { path: '', component: () => import('src/pages/users/index.vue') },\n      { path: ':id', component: () => import('src/pages/users/[id].vue') },\n    ],\n  },\n  {\n    path: '/users/create',\n    component: () => import('src/pages/users.create.vue'),\n  },\n]\n```\n\n### Named routes\n\nAll generated routes that have a `component` property will have a `name` property. This avoid accidentally directing your users to a parent route. By default, names are generated using the file path, but you can override this behavior by passing a custom `getRouteName()` function. You will get TypeScript validation almost everywhere, so changing this should be easy.\n\n### Dynamic Routes\n\nYou can add [route params](https://router.vuejs.org/guide/essentials/dynamic-matching.html) by wrapping the _param name_ with brackets, e.g. `src/pages/users/[id].vue` will create a route with the following path: `/users/:id`. Note you can add a param in the middle in between static segments: `src/pages/users_[id].vue` -> `/users_:id`. You can even add multiple params: `src/pages/product_[skuId]_[seoDescription].vue`.\n\nYou can create [**optional params**](https://router.vuejs.org/guide/essentials/route-matching-syntax.html#optional-parameters) by wrapping the _param name_ with an extra pair of brackets, e.g. `src/pages/users/[[id]].vue` will create a route with the following path: `/users/:id?`.\n\nYou can create [**repeatable params**](https://router.vuejs.org/guide/essentials/route-matching-syntax.html#repeatable-params) by adding a plus character (`+`) after the closing bracket, e.g. `src/pages/articles/[slugs]+.vue` will create a route with the following path: `/articles/:slugs+`.\n\nAnd you can combine both to create optional repeatable params, e.g. `src/pages/articles/[[slugs]]+.vue` will create a route with the following path: `/articles/:slugs*`.\n\n### Catch all / 404 Not found route\n\nTo create a catch all route prepend 3 dots (`...`) to the param name, e.g. `src/pages/[...path].vue` will create a route with the following path: `/:path(.*)`. This will match any route. Note this can be done inside a folder too, e.g. `src/pages/articles/[...path].vue` will create a route with the following path: `/articles/:path(.*)`.\n\n### Multiple routes folders\n\nIt's possible to provide multiple routes folders by passing an array to `routesFolder`:\n\n```js\nVueRouter({\n  routesFolder: ['src/pages', 'src/admin/routes'],\n})\n```\n\nYou can also provide a path prefix for each of these folders, it will be used _as is_, and **cannot start with a `/`** but can contain any params you want or even **not finish with a `/`**:\n\n```js\nVueRouter({\n  routesFolder: [\n    'src/pages',\n    {\n      src: 'src/admin/routes',\n      // note there is always a trailing slash and never a leading one\n      path: 'admin/',\n      // src/admin/routes/dashboard.vue -> /admin/dashboard\n    },\n    {\n      src: 'src/docs',\n      // you can add parameters\n      path: 'docs/:lang/',\n      // src/docs/introduction.vue -> /docs/:lang/introduction\n    },\n    {\n      src: 'src/promos',\n      // you can omit the trailing slash\n      path: 'promos-',\n      // src/promos/black-friday.vue -> /promos-black-friday\n    },\n  ],\n})\n```\n\nNote that the provided folders must be separate and one _route folder_ cannot contain another specified _route folder_. If you need further customization, give [definePage()](#definepage-in-script) a try.\n\n## TypeScript\n\nThis plugin generates a `d.ts` file with all the typing overrides when the dev or build server is ran. Make sure to include it in your `tsconfig.json`'s (or `jsconfig.json`'s) `include` or `files` property:\n\n```js\n{\n  // ...\n  \"include\": [/* ... */ \"typed-router.d.ts\"]\n  // ...\n}\n```\n\nThen, you will be able to import from `vue-router/auto` (instead of `vue-router`) to get access to the typed APIs. You can commit the `typed-router.d.ts` file to your repository to make your life easier.\n\n### Extra types\n\nYou can always take a look at the generated `typed-router.d.ts` file to inspect what are the generated types. `unplugin-vue-router` improves upon many of the existing types in `vue-router` and adds a few ones as well:\n\n#### `RouteNamedMap`\n\nThe `RouteNamedMap` interface gives you access to all the metadata associated with a route. It can also be extended to enable types for **dynamic routes** that are added during runtime.\n\n```ts\nimport type { RouteNamedMap } from 'vue-router/auto/routes'\n```\n\nExtending types with dynamically added routes:\n\n```ts\ndeclare module 'vue-router/auto/routes' {\n  import type {\n    RouteRecordInfo,\n    ParamValue,\n    // these are other param helper types\n    ParamValueOneOrMore,\n    ParamValueZeroOrMore,\n    ParamValueZeroOrOne,\n  } from 'unplugin-vue-router'\n  export interface RouteNamedMap {\n    // the key is the name and should match the first generic of RouteRecordInfo\n    'custom-dynamic-name': RouteRecordInfo<\n      'custom-dynamic-name',\n      '/added-during-runtime/[...path]',\n      // these are the raw param types (accept numbers, strings, booleans, etc)\n      { path: ParamValue<true> },\n      // these are the normalized params as found in useRoute().params\n      { path: ParamValue<false> }\n    >\n  }\n}\n```\n\n#### `RouterTyped`\n\nThe `RouterTyped` type gives you access to the typed version of the router instance. It's also the _ReturnType_ of the `useRouter()` function.\n\n```ts\nimport type { RouterTyped } from 'vue-router/auto'\n```\n\n#### `RouteLocationResolved`\n\nThe `RouteLocationResolved` type exposed by `vue-router/auto` allows passing a generic (which autocomplete) to type a route **whenever checking the name doesn't makes sense because you know the type**. This is useful for cases like `<RouterLink v-slot=\"{ route }\">`:\n\n```vue\n<RouterLink v-slot=\"{ route }\">\n  User {{ (route as RouteLocationResolved<'/users/[id]'>).params.id }}\n</RouterLink>\n```\n\nThis type is also the return type of `router.resolve()`.\n\nYou have the same equivalents for `RouteLocation`, `RouteLocationNormalized`, and `RouteLocationNormalizedLoaded`. All of them exist in `vue-router` but `vue-router/auto` override them to provide a type safe version of them. In addition to that, you can pass the name of the route as a generic:\n\n```ts\n// these are all valid\nlet userWithId: RouteLocationNormalizedLoaded<'/users/[id]'> = useRoute()\nuserWithId = useRoute<'/users/[id]'>()\n// üëá this one is the easiest to write because it autocomplete\nuserWithId = useRoute('/users/[id]')\n```\n\n## Named views\n\nIt is possible to define [named views](https://router.vuejs.org/guide/essentials/named-views.html#named-views) by appending an `@` + a name to their filename, e.g. a file named `src/pages/index@aux.vue` will generate a route of:\n\n```js\n{\n  path: '/',\n  component: {\n    aux: () => import('src/pages/index@aux.vue')\n  }\n}\n```\n\nNote that by default a non named route is named `default` and that you don't need to name your file `index@default.vue` even if there are other named views (e.g. having `index@aux.vue` and `index.vue` is the same as having `index@aux.vue` and `index@default.vue`).\n\n## Extending existing routes\n\n### `definePage()` in `<script>`\n\nThe macro `definePage()` allows you to define any extra properties related to the route. It is useful when you need to customize the `path`, the `name`, `meta`, etc\n\n```vue\n<script setup>\nimport { definePage } from 'vue-router/auto'\n\ndefinePage({\n  name: 'my-own-name',\n  path: '/absolute-with-:param',\n  alias: ['/a/:param'],\n  meta: {\n    custom: 'data',\n  },\n})\n</script>\n```\n\nNote you cannot use variables in `definePage()` as its passed parameter gets extracted at build time and is removed from `<script setup>`. You can also use [the `<route>` block](#sfc-route-custom-block) which allows other formats like yaml.\n\n### SFC `<route>` custom block\n\nThe `<route>` custom block is a way to extend existing routes. It can be used to add new `meta` fields, override the `path`, the `name`, or anything else in a route. **It has to be added to a `.vue` component inside of the [routes folder](#routes-folder-structure)**. It is similar to [the same feature in vite-plugin-pages](https://github.com/hannoeru/vite-plugin-pages#sfc-custom-block-for-route-data) to facilitate migration.\n\n```vue\n<route lang=\"json\">\n{\n  \"name\": \"name-override\",\n  \"meta\": {\n    \"requiresAuth\": false\n  }\n}\n</route>\n```\n\nNote you can specify the language to use with `<route lang=\"yaml\">`. By default, the language is JSON5 (more flexible version of JSON) but yaml and JSON are also supported. **This will also add Syntax Highlighting**.\n\n### `extendRoutes()`\n\nYou can extend existing routes by passing an `extendRoutes` function to `createRouter()`. **This should be used as a last resort** (or until a feature is natively available here):\n\n```js\nimport { createWebHistory, createRouter } from 'vue-router/auto'\n\nconst router = createRouter({\n  extendRoutes: (routes) => {\n    const adminRoute = routes.find((r) => r.name === '/admin')\n    if (adminRoute) {\n      adminRoute.meta ??= {}\n      adminRoute.meta.requiresAuth = true\n    }\n    // completely optional since we are modifying the routes in place\n    return routes\n  },\n  history: createWebHistory(),\n})\n```\n\nAs this plugin evolves, this function should be used less and less and only become necessary in unique edge cases.\n\nOne example of this is using [vite-plugin-vue-layouts](https://github.com/JohnCampionJr/vite-plugin-vue-layouts) which can only be used alongside `extendRoutes()`:\n\n```ts\nimport { createRouter } from 'vue-router/auto'\nimport { setupLayouts } from 'virtual:generated-layouts'\n\nconst router = createRouter({\n  // ...\n  extendRoutes: (routes) => setupLayouts(routes),\n})\n```\n\n## Rationale\n\nThis project idea came from trying [to type the router directly using Typescript](https://github.com/vuejs/router/pull/1397/commits/a7c591b6fd5d8478ba3f87e833514bc0e30f93a9), finding out it's not fast enough to be pleasant to use and, ending up using build-based tools, taking some inspiration from other projects like:\n\n- [Nuxt](https://nuxtjs.org/) - The Vue.js Framework\n- [vite-plugin-pages](https://github.com/hannoeru/vite-plugin-pages) - Framework agnostic file based routing\n- [Typed Router for Nuxt](https://github.com/victorgarciaesgi/nuxt-typed-router) - A module to add typed routing to Nuxt\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2022 Eduardo San Martin Morote\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unplugin-vue-router/-/unplugin-vue-router-0.7.0.tgz#27bd250c7dc698366cce70c5b72b97c3b3766c26",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unplugin-vue-router/-/unplugin-vue-router-0.7.0.tgz",
    "hash": "27bd250c7dc698366cce70c5b72b97c3b3766c26",
    "integrity": "sha512-ddRreGq0t5vlSB7OMy4e4cfU1w2AwBQCwmvW3oP/0IHQiokzbx4hd3TpwBu3eIAFVuhX2cwNQwp1U32UybTVCw==",
    "registry": "npm",
    "packageName": "unplugin-vue-router",
    "cacheIntegrity": "sha512-ddRreGq0t5vlSB7OMy4e4cfU1w2AwBQCwmvW3oP/0IHQiokzbx4hd3TpwBu3eIAFVuhX2cwNQwp1U32UybTVCw== sha1-J70lDH3GmDZsznDFtyuXw7N2bCY="
  },
  "registry": "npm",
  "hash": "27bd250c7dc698366cce70c5b72b97c3b3766c26"
}