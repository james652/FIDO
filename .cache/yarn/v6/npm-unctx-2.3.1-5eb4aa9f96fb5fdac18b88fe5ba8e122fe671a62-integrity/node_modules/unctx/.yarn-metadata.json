{
  "manifest": {
    "name": "unctx",
    "version": "2.3.1",
    "description": "Composition-api in Vanilla js",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/unctx.git"
    },
    "license": "MIT",
    "sideEffects": false,
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      },
      "./transform": {
        "types": "./dist/transform.d.ts",
        "import": "./dist/transform.mjs"
      },
      "./plugin": {
        "types": "./dist/plugin.d.ts",
        "import": "./dist/plugin.mjs"
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "./dist/*",
          "./dist/index.d.ts"
        ]
      }
    },
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "unbuild",
      "dev": "vitest",
      "lint": "eslint --ext .ts,.js . && prettier -c src test",
      "lint:fix": "eslint --fix --ext .ts,.js . && prettier -w src test",
      "prepack": "unbuild",
      "release": "pnpm test && changelogen --release && npm publish && git push --follow-tags",
      "test": "pnpm lint && vitest run --coverage"
    },
    "dependencies": {
      "acorn": "^8.8.2",
      "estree-walker": "^3.0.3",
      "magic-string": "^0.30.0",
      "unplugin": "^1.3.1"
    },
    "devDependencies": {
      "@types/estree": "^1.0.1",
      "@types/node": "^20.2.3",
      "@vitest/coverage-c8": "^0.31.1",
      "changelogen": "^0.5.3",
      "eslint": "^8.41.0",
      "eslint-config-unjs": "^0.2.0",
      "jiti": "^1.18.2",
      "prettier": "^2.8.8",
      "typescript": "^5.0.4",
      "unbuild": "^1.2.1",
      "vitest": "^0.31.1"
    },
    "packageManager": "pnpm@8.5.1",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-unctx-2.3.1-5eb4aa9f96fb5fdac18b88fe5ba8e122fe671a62-integrity/node_modules/unctx/package.json",
    "readmeFilename": "README.md",
    "readme": "# 🍦 unctx\n\n> Composition-API in Vanilla js\n\n[![npm version][npm-v-src]][npm-v-href]\n[![npm downloads][npm-dm-src]][npm-dm-href]\n[![package phobia][packagephobia-src]][packagephobia-href]\n[![bundle phobia][bundlephobia-src]][bundlephobia-href]\n[![codecov][codecov-src]][codecov-href]\n\n## What is unctx?\n\n[Vue.js](https://vuejs.org) introduced an amazing pattern called [Composition API](https://v3.vuejs.org/guide/composition-api-introduction.html) that allows organizing complex logic by splitting it into reusable functions and grouping in logical order. `unctx` allows easily implementing composition API pattern in your javascript libraries without hassle.\n\n## Usage\n\nIn your **awesome** library:\n\n```bash\nyarn add unctx\n# or\nnpm install unctx\n```\n\n```js\nimport { createContext } from \"unctx\";\n\nconst ctx = createContext();\n\nexport const useAwesome = ctx.use;\n\n// ...\nctx.call({ test: 1 }, () => {\n  // This is similar to the vue setup function\n  // Any function called here can use `useAwesome` to get { test: 1 }\n});\n```\n\nUser code:\n\n```js\nimport { useAwesome } from \"awesome-lib\";\n\n// ...\nfunction setup() {\n  const ctx = useAwesome();\n}\n```\n\n**Note:** When no context is presented `ctx.use` will throw an error. Use `ctx.tryUse` for tolerant usages (return nullable context).\n\n### Using Namespaces\n\nTo avoid issues with multiple version of the library, `unctx` provides a safe global namespace to access context by key (kept in [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis)). **Important:** Please use a verbose name for the key to avoid conflict with other js libraries. Using the npm package name is recommended. Using symbols has no effect since it still causes multiple context issues.\n\n```js\nimport { useContext, getContext } from \"unctx\";\n\nconst useAwesome = useContext(\"awesome-lib\");\n\n// or\n// const awesomeContext = getContext('awesome-lib')\n```\n\nYou can also create your internal namespace with `createNamespace` utility for more advanced use cases.\n\n## Async Context\n\nUsing context is only possible in non-async usages and only before the first await statement. This is to make sure context is not shared between concurrent calls.\n\n```js\nasync function setup() {\n  console.log(useAwesome()); // Returns context\n  setTimeout(() => {\n    console.log(useAwesome());\n  }, 1); // Returns null\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  console.log(useAwesome()); // Returns null\n}\n```\n\nA simple workaround is caching context into a local variable:\n\n```js\nasync function setup() {\n  const ctx = useAwesome(); // We can directly access cached version of ctx\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  console.log(ctx);\n}\n```\n\nThis is not always an elegant and easy way by making a variable and passing it around. After all, this is the purpose of unctx to make sure context is magically available everywhere in composables!\n\n### Native Async Context\n\nUnctx supports Node.js [`AsyncLocalStorage`](https://nodejs.org/api/async_context.html#class-asynclocalstorage) as a native way to preserve and track async contexts. To enable this mode, you need to set `asyncContext: true` option and also provides an implementation for `AsyncLocalStorage` (or provide `globalThis.AsyncLocalStorage` polyfill).\n\nSee [tc39 proposal for async context](https://github.com/tc39/proposal-async-context) and [cloudflare docs](https://developers.cloudflare.com/workers/runtime-apis/nodejs/asynclocalstorage/) for relevant platform specific docs.\n\n```ts\nimport { createContext } from \"unctx\";\nimport { AsyncLocalStorage } from \"node:async_hooks\";\n\nconst ctx = createContext({\n  asyncContext: true,\n  AsyncLocalStorage,\n});\n\nctx.call(\"123\", () => {\n  setTimeout(() => {\n    // Prints 123\n    console.log(ctx.use());\n  }, 100);\n});\n```\n\n### Async Transform\n\nSince native async context is not supported in all platforms yet, unctx provides a build-time solution that transforms async syntax to automatically restore context after each async/await statement. This requires using a bundler such as Rollup, Vite, or Webpack.\n\nImport and register transform plugin:\n\n```js\nimport { unctxPlugin } from \"unctx/plugin\";\n\n// Rollup\n// TODO: Add to rollup configuration\nunctxPlugin.rollup();\n\n// Vite\n// TODO: Add to vite configuration\nunctxPlugin.vite();\n\n// Webpack\n// TODO: Add to webpack configuration\nunctxPlugin.webpack();\n```\n\nUse `ctx.callAsync` instead of `ctx.call`:\n\n```js\nawait ctx.callAsync(\"test\", setup);\n```\n\nAny async function that requires context, should be wrapped with `withAsyncContext`:\n\n```js\nimport { withAsyncContext } from \"unctx\";\n\nconst setup = withAsyncContext(async () => {\n  console.log(useAwesome()); // Returns context\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  console.log(useAwesome()); // Still returns context with dark magic!\n});\n```\n\n## Singleton Pattern\n\nIf you are sure it is safe to use a shared instance (not depending to request), you can also use `ctx.set` and `ctx.unset` for a [singleton pattern](https://en.wikipedia.org/wiki/Singleton_pattern).\n\n**Note:** You cannot combine `set` with `call`. Always use `unset` before replacing the instance otherwise you will get `Context conflict` error.\n\n```js\nimport { createContext } from \"unctx\";\n\nconst ctx = createContext();\nctx.set(new Awesome());\n\n// Replacing instance without unset\n// ctx.set(new Awesome(), true)\n\nexport const useAwesome = ctx.use;\n```\n\n## Typed Context\n\nA generic type exists on all utilities to be set for instance/context type for typescript support.\n\n```ts\n// Return type of useAwesome is Awesome | null\nconst { use: useAwesome } = createContext<Awesome>();\n```\n\n## Under the hood\n\nThe composition of functions is possible using temporary context injection. When calling `ctx.call(instance, cb)`, `instance` argument will be stored in a temporary variable then `cb` is called. Any function inside `cb`, can then implicitly access the instance by using `ctx.use` (or `useAwesome`)\n\n## Pitfalls\n\n**context can be only used before first await**:\n\nPlease check [Async Context](#async-context) section.\n\n**`Context conflict` error**:\n\nIn your library, you should only keep one `call()` running at a time (unless calling with the same reference for the first argument)\n\nFor instance, this makes an error:\n\n```js\nctx.call({ test: 1 }, () => {\n  ctx.call({ test: 2 }, () => {\n    // Throws error!\n  });\n});\n```\n\n## License\n\nMIT. Made with 💖\n\n<!-- Refs -->\n\n[npm-v-src]: https://flat.badgen.net/npm/v/unctx/latest\n[npm-v-href]: https://npmjs.com/package/unctx\n[npm-dm-src]: https://flat.badgen.net/npm/dm/unctx\n[npm-dm-href]: https://npmjs.com/package/unctx\n[packagephobia-src]: https://flat.badgen.net/packagephobia/install/unctx\n[packagephobia-href]: https://packagephobia.now.sh/result?p=unctx\n[bundlephobia-src]: https://flat.badgen.net/bundlephobia/min/unctx\n[bundlephobia-href]: https://bundlephobia.com/result?p=unctx\n[codecov-src]: https://flat.badgen.net/codecov/c/github/unjs/unctx/master\n[codecov-href]: https://codecov.io/gh/unjs/unctx\n",
    "licenseText": "MIT License\n\nCopyright (c) 2022 - Pooya Parsa <pooya@pi0.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unctx/-/unctx-2.3.1.tgz#5eb4aa9f96fb5fdac18b88fe5ba8e122fe671a62",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unctx/-/unctx-2.3.1.tgz",
    "hash": "5eb4aa9f96fb5fdac18b88fe5ba8e122fe671a62",
    "integrity": "sha512-PhKke8ZYauiqh3FEMVNm7ljvzQiph0Mt3GBRve03IJm7ukfaON2OBK795tLwhbyfzknuRRkW0+Ze+CQUmzOZ+A==",
    "registry": "npm",
    "packageName": "unctx",
    "cacheIntegrity": "sha512-PhKke8ZYauiqh3FEMVNm7ljvzQiph0Mt3GBRve03IJm7ukfaON2OBK795tLwhbyfzknuRRkW0+Ze+CQUmzOZ+A== sha1-XrSqn5b7X9rBi4j+W6jhIv5nGmI="
  },
  "registry": "npm",
  "hash": "5eb4aa9f96fb5fdac18b88fe5ba8e122fe671a62"
}