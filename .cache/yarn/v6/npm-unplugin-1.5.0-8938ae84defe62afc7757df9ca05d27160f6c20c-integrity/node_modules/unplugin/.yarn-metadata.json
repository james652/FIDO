{
  "manifest": {
    "name": "unplugin",
    "version": "1.5.0",
    "packageManager": "pnpm@8.7.5",
    "description": "Unified plugin system for build tools",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/unjs/unplugin.git"
    },
    "sideEffects": false,
    "exports": {
      ".": {
        "types": {
          "import": "./dist/index.d.mts",
          "require": "./dist/index.d.ts"
        },
        "import": "./dist/index.mjs",
        "require": "./dist/index.js"
      },
      "./dist/webpack/loaders/*": "./dist/webpack/loaders/*.js",
      "./dist/rspack/loaders/*": "./dist/rspack/loaders/*.js"
    },
    "main": "dist/index.js",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "tsup",
      "dev": "tsup --watch src",
      "lint": "eslint --cache .",
      "lint:fix": "nr lint --fix",
      "prepublishOnly": "nr build",
      "release": "bumpp --all -x 'npx conventional-changelog -p angular -i CHANGELOG.md -s' && npm publish",
      "test": "nr lint && nr test:build && vitest run",
      "test:build": "jiti scripts/buildFixtures.ts"
    },
    "dependencies": {
      "acorn": "^8.10.0",
      "chokidar": "^3.5.3",
      "webpack-sources": "^3.2.3",
      "webpack-virtual-modules": "^0.5.0"
    },
    "devDependencies": {
      "@ampproject/remapping": "^2.2.1",
      "@antfu/eslint-config": "^0.42.0",
      "@antfu/ni": "^0.21.8",
      "@rspack/cli": "^0.3.4",
      "@rspack/core": "^0.3.4",
      "@types/fs-extra": "^11.0.2",
      "@types/node": "^20.6.2",
      "@types/webpack-sources": "^3.2.0",
      "bumpp": "^9.2.0",
      "conventional-changelog-cli": "^3.0.0",
      "esbuild": "^0.19.3",
      "eslint": "^8.49.0",
      "fast-glob": "^3.3.1",
      "fs-extra": "^11.1.1",
      "jiti": "^1.20.0",
      "lint-staged": "^14.0.1",
      "magic-string": "^0.30.3",
      "picocolors": "^1.0.0",
      "rollup": "^3.29.2",
      "simple-git-hooks": "^2.9.0",
      "tsup": "^7.2.0",
      "typescript": "^5.2.2",
      "vite": "^4.4.9",
      "vitest": "^0.34.4",
      "webpack": "^5.88.2",
      "webpack-cli": "4.10.0"
    },
    "simple-git-hooks": {
      "pre-commit": "pnpm lint-staged"
    },
    "lint-staged": {
      "*": "eslint --fix"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-unplugin-1.5.0-8938ae84defe62afc7757df9ca05d27160f6c20c-integrity/node_modules/unplugin/package.json",
    "readmeFilename": "README.md",
    "readme": "# unplugin\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![License][license-src]][license-href]\n\nUnified plugin system for build tools.\n\nCurrently supports:\n\n- [Vite](https://vitejs.dev/)\n- [Rollup](https://rollupjs.org/)\n- [Webpack](https://webpack.js.org/)\n- [esbuild](https://esbuild.github.io/)\n- [Rspack](https://www.rspack.dev/) (⚠️ experimental)\n\n## Hooks\n\n`unplugin` extends the excellent [Rollup plugin API](https://rollupjs.org/guide/en/#plugins-overview) as the unified plugin interface and provides a compatible layer base on the build tools used with.\n\n###### Supported\n\n| Hook                                                                    |     Rollup      | Vite | Webpack 4 | Webpack 5 |     esbuild     | Rspack |\n| ----------------------------------------------------------------------- | :-------------: | :--: | :-------: | :-------: | :-------------: | :----: |\n| [`enforce`](https://rollupjs.org/guide/en/#enforce)                     | ❌ <sup>1</sup> |  ✅  |    ✅     |    ✅     | ❌ <sup>1</sup> |   ✅   |\n| [`buildStart`](https://rollupjs.org/guide/en/#buildstart)               |       ✅        |  ✅  |    ✅     |    ✅     |       ✅        |   ✅   |\n| [`resolveId`](https://rollupjs.org/guide/en/#resolveid)                 |       ✅        |  ✅  |    ✅     |    ✅     |       ✅        |   ❌   |\n| `loadInclude`<sup>2</sup>                                               |       ✅        |  ✅  |    ✅     |    ✅     |       ✅        |   ✅   |\n| [`load`](https://rollupjs.org/guide/en/#load)                           |       ✅        |  ✅  |    ✅     |    ✅     | ✅ <sup>3</sup> |   ✅   |\n| `transformInclude`<sup>2</sup>                                          |       ✅        |  ✅  |    ✅     |    ✅     |       ✅        |   ✅   |\n| [`transform`](https://rollupjs.org/guide/en/#transformers)              |       ✅        |  ✅  |    ✅     |    ✅     | ✅ <sup>3</sup> |   ✅   |\n| [`watchChange`](https://rollupjs.org/guide/en/#watchchange)             |       ✅        |  ✅  |    ✅     |    ✅     |       ❌        |   ❌   |\n| [`buildEnd`](https://rollupjs.org/guide/en/#buildend)                   |       ✅        |  ✅  |    ✅     |    ✅     |       ✅        |   ✅   |\n| [`writeBundle`](https://rollupjs.org/guide/en/#writebundle)<sup>4</sup> |       ✅        |  ✅  |    ✅     |    ✅     |       ✅        |   ✅   |\n\n1. Rollup and esbuild do not support using `enforce` to control the order of plugins. Users need to maintain the order manually.\n2. Webpack's id filter is outside of loader logic; an additional hook is needed for better perf on Webpack. In Rollup and Vite, this hook has been polyfilled to match the behaviors. See for the following usage examples.\n3. Although esbuild can handle both JavaScript and CSS and many other file formats, you can only return JavaScript in `load` and `transform` results.\n4. Currently, `writeBundle` is only serves as a hook for the timing. It doesn't pass any arguments.\n\n> **Warning**: The [Rspack](https://www.rspack.dev/) support is experimental. Future changes to Rspack integrations might not follow semver, please pin `unplugin` in your dependency when using. It's not recommended to use in production.\n\n### Hook Context\n\n###### Supported\n\n| Hook                                                                       | Rollup | Vite | Webpack 4 | Webpack 5 | esbuild | Rspack |\n| -------------------------------------------------------------------------- | :----: | :--: | :-------: | :-------: | :-----: | :----: |\n| [`this.parse`](https://rollupjs.org/guide/en/#thisparse)                   |   ✅   |  ✅  |    ✅     |    ✅     |   ✅    |   ✅   |\n| [`this.addWatchFile`](https://rollupjs.org/guide/en/#thisaddwatchfile)     |   ✅   |  ✅  |    ✅     |    ✅     |   ❌    |   ❌   |\n| [`this.emitFile`](https://rollupjs.org/guide/en/#thisemitfile)<sup>5</sup> |   ✅   |  ✅  |    ✅     |    ✅     |   ✅    |   ✅   |\n| [`this.getWatchFiles`](https://rollupjs.org/guide/en/#thisgetwatchfiles)   |   ✅   |  ✅  |    ✅     |    ✅     |   ❌    |   ❌   |\n| [`this.warn`](https://rollupjs.org/guide/en/#thiswarn)                     |   ✅   |  ✅  |    ✅     |    ✅     |   ✅    |   ✅   |\n| [`this.error`](https://rollupjs.org/guide/en/#thiserror)                   |   ✅   |  ✅  |    ✅     |    ✅     |   ✅    |   ✅   |\n\n5. Currently, [`this.emitFile`](https://rollupjs.org/guide/en/#thisemitfile) only supports the `EmittedAsset` variant.\n\n## Usage\n\n```ts\nimport { createUnplugin } from 'unplugin'\n\nexport const unplugin = createUnplugin((options: UserOptions) => {\n  return {\n    name: 'unplugin-prefixed-name',\n    // webpack's id filter is outside of loader logic,\n    // an additional hook is needed for better perf on webpack\n    transformInclude(id) {\n      return id.endsWith('.vue')\n    },\n    // just like rollup transform\n    transform(code) {\n      return code.replace(/<template>/, '<template><div>Injected</div>')\n    },\n    // more hooks coming\n  }\n})\n\nexport const vitePlugin = unplugin.vite\nexport const rollupPlugin = unplugin.rollup\nexport const webpackPlugin = unplugin.webpack\nexport const rspackPlugin = unplugin.rspack\nexport const esbuildPlugin = unplugin.esbuild\n```\n\n## Nested Plugins\n\nSince `v0.10.0`, unplugin supports constructing multiple nested plugins to behave like a single one. For example:\n\n###### Supported\n\n|         Rollup         | Vite | Webpack 4 | Webpack 5 | Rspack |    esbuild     |\n| :--------------------: | :--: | :-------: | :-------: | :----: | :------------: |\n| ✅ `>=3.1`<sup>6</sup> |  ✅  |    ✅     |    ✅     |   ✅   | ⚠️<sup>7</sup> |\n\n6. Rollup supports nested plugins since [v3.1.0](https://github.com/rollup/rollup/releases/tag/v3.1.0). Plugin author should ask users to have a Rollup version of `>=3.1.0` when using nested plugins. For single plugin format, unplugin works for any version of Rollup.\n7. Since esbuild does not have a built-in transform phase, the `transform` hook of the nested plugin will not work on esbuild yet. Other hooks like `load` or `resolveId` work fine. We will try to find a way to support it in the future.\n\n###### Usage\n\n```ts\nimport { createUnplugin } from 'unplugin'\n\nexport const unplugin = createUnplugin((options: UserOptions) => {\n  return [\n    {\n      name: 'plugin-a',\n      transform(code) {\n        // ...\n      },\n    },\n    {\n      name: 'plugin-b',\n      resolveId(id) {\n        // ...\n      },\n    },\n  ]\n})\n```\n\n## Plugin Installation\n\n###### Vite\n\n```ts\n// vite.config.ts\nimport UnpluginFeature from './unplugin-feature'\n\nexport default {\n  plugins: [\n    UnpluginFeature.vite({ /* options */ }),\n  ],\n}\n```\n\n###### Rollup\n\n```ts\n// rollup.config.js\nimport UnpluginFeature from './unplugin-feature'\n\nexport default {\n  plugins: [\n    UnpluginFeature.rollup({ /* options */ }),\n  ],\n}\n```\n\n###### Webpack\n\n```ts\n// webpack.config.js\nmodule.exports = {\n  plugins: [\n    require('./unplugin-feature').webpack({ /* options */ }),\n  ],\n}\n```\n\n###### esbuild\n\n```ts\n// esbuild.config.js\nimport { build } from 'esbuild'\n\nbuild({\n  plugins: [\n    require('./unplugin-feature').esbuild({ /* options */ }),\n  ],\n})\n```\n\n\n###### Rspack\n\n```ts\n// rspack.config.js\nmodule.exports = {\n  plugins: [\n    require('./unplugin-feature').rspack({ /* options */ }),\n  ],\n}\n```\n\n### Framework-specific Logic\n\nWhile `unplugin` provides compatible layers for some hooks, the functionality of it is limited to the common subset of the build's plugins capability. For more advanced framework-specific usages, `unplugin` provides an escape hatch for that.\n\n```ts\nexport const unplugin = createUnplugin((options: UserOptions, meta) => {\n  console.log(meta.framework) // 'vite' | 'rollup' | 'webpack' | 'rspack' | 'esbuild'\n\n  return {\n    // Common unplugin hooks\n    name: 'unplugin-prefixed-name',\n    transformInclude(id) { /* ... */ },\n    transform(code) { /* ... */ },\n\n    // Framework specific hooks\n    vite: {\n      // Vite plugin\n      configureServer(server) {\n        // configure Vite server\n      },\n      // ...\n    },\n    rollup: {\n      // Rollup plugin\n    },\n    webpack(compiler) {\n      // Configure Webpack compiler\n    },\n    rspack(compiler) {\n      // Configure Rspack compiler\n    },\n    esbuild: {\n      // Change the filter of onResolve and onLoad\n      // onResolveFilter?: RegExp,\n      // onLoadFilter?: RegExp,\n\n      // Tell esbuild how to interpret the contents. By default unplugin tries to guess the loader\n      // from file extension (eg: .js -> \"js\", .jsx -> 'jsx')\n      // loader?: (Loader | (code: string, id: string) => Loader)\n\n      // Or you can completely replace the setup logic\n      // setup?: EsbuildPlugin.setup,\n    },\n  }\n})\n```\n\n### Creating platform specific plugins\n\nThe package exports a set of functions in place of `createUnplugin` that allow for the creation of plugins for specific bundlers.\nEach of the function takes the same generic factory argument as `createUnplugin`.\n\n```ts\nimport {\n  createEsbuildPlugin,\n  createRollupPlugin,\n  createRspackPlugin,\n  createVitePlugin,\n  createWebpackPlugin\n} from 'unplugin'\n\nconst vitePlugin = createVitePlugin({ /* options */ })\nconst rollupPlugin = createRollupPlugin({ /* options */ })\nconst esbuildPlugin = createEsbuildPlugin({ /* options */ })\nconst webpackPlugin = createWebpackPlugin({ /* options */ })\nconst rspackPlugin = createRspackPlugin({ /* options */ })\n```\n\n## Conventions\n\n- Plugins powered by unplugin should have a clear name with `unplugin-` prefix.\n- Include `unplugin` keyword in `package.json`.\n- To provide better DX, packages could export 2 kinds of entry points:\n\n  - Default export: the returned value of `createUnplugin` function\n\n    ```ts\n    import UnpluginFeature from 'unplugin-feature'\n    ```\n\n  - Subpath exports: properties of the returned value of `createUnplugin` function for each framework users\n\n    ```ts\n    import VitePlugin from 'unplugin-feature/vite'\n    ```\n\n  - Refer to [unplugin-starter](https://github.com/unplugin/unplugin-starter) for more details about this setup.\n\n## Starter Templates\n\n- [unplugin/unplugin-starter](https://github.com/unplugin/unplugin-starter)\n- [jwr12135/create-unplugin](https://github.com/jwr12135/create-unplugin)\n- [sxzz/unplugin-starter](https://github.com/sxzz/unplugin-starter)\n\n## Community Showcases\n\n> We have started a GitHub organization to host and collaborate on popular unplugin plugins: [github.com/unplugin](https://github.com/unplugin). You can go there to find more plugins or even join us with your own plugins!\n\n- [unplugin-auto-import](https://github.com/antfu/unplugin-auto-import)\n- [unplugin-vue2-script-setup](https://github.com/antfu/unplugin-vue2-script-setup)\n- [unplugin-icons](https://github.com/antfu/unplugin-icons)\n- [unplugin-vue-components](https://github.com/antfu/unplugin-vue-components)\n- [unplugin-upload-cdn](https://github.com/zenotsai/unplugin-upload-cdn)\n- [unplugin-web-ext](https://github.com/jwr12135/unplugin-web-ext)\n- [unplugin-properties](https://github.com/pd4d10/unplugin-properties)\n- [unplugin-moment-to-dayjs](https://github.com/1247748612/unplugin-moment-to-dayjs)\n- [unplugin-object-3d](https://github.com/m0ksem/unplugin-object-3d)\n- [unplugin-parcel-css](https://github.com/ssssota/unplugin-parcel-css)\n- [unplugin-vue](https://github.com/sxzz/unplugin-vue)\n- [unplugin-vue-macros](https://github.com/sxzz/unplugin-vue-macros)\n- [unplugin-vue-define-options](https://github.com/sxzz/unplugin-vue-macros/tree/main/packages/define-options)\n- [unplugin-jsx-string](https://github.com/sxzz/unplugin-jsx-string)\n- [unplugin-ast](https://github.com/sxzz/unplugin-ast)\n- [unplugin-element-plus](https://github.com/element-plus/unplugin-element-plus)\n- [unplugin-glob](https://github.com/sxzz/unplugin-glob)\n- [unplugin-sentry](https://github.com/kricsleo/unplugin-sentry)\n- [unplugin-imagemin](https://github.com/ErKeLost/unplugin-imagemin)\n- [unplugin-typedotenv](https://github.com/ssssota/typedotenv)\n- [unplugin-fonts](https://github.com/cssninjaStudio/unplugin-fonts)\n- [sentry-javascript-bundler-plugins](https://github.com/getsentry/sentry-javascript-bundler-plugins)\n- [unplugin-svg-component](https://github.com/Jevon617/unplugin-svg-component)\n- [unplugin-vue-cssvars](https://github.com/baiwusanyu-c/unplugin-vue-cssvars)\n\n## License\n\n[MIT](./LICENSE) License © 2021-PRESENT Nuxt Contrib\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/unplugin?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-version-href]: https://npmjs.com/package/unplugin\n[npm-downloads-src]: https://img.shields.io/npm/dm/unplugin?style=flat&colorA=18181B&colorB=F0DB4F\n[npm-downloads-href]: https://npmjs.com/package/unplugin\n[license-src]: https://img.shields.io/github/license/unjs/unplugin.svg?style=flat&colorA=18181B&colorB=F0DB4F\n[license-href]: https://github.com/unjs/unplugin/blob/main/LICENSE\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021-PRESENT Nuxt Contrib\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unplugin/-/unplugin-1.5.0.tgz#8938ae84defe62afc7757df9ca05d27160f6c20c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unplugin/-/unplugin-1.5.0.tgz",
    "hash": "8938ae84defe62afc7757df9ca05d27160f6c20c",
    "integrity": "sha512-9ZdRwbh/4gcm1JTOkp9lAkIDrtOyOxgHmY7cjuwI8L/2RTikMcVG25GsZwNAgRuap3iDw2jeq7eoqtAsz5rW3A==",
    "registry": "npm",
    "packageName": "unplugin",
    "cacheIntegrity": "sha512-9ZdRwbh/4gcm1JTOkp9lAkIDrtOyOxgHmY7cjuwI8L/2RTikMcVG25GsZwNAgRuap3iDw2jeq7eoqtAsz5rW3A== sha1-iTiuhN7+Yq/HdX35ygXScWD2wgw="
  },
  "registry": "npm",
  "hash": "8938ae84defe62afc7757df9ca05d27160f6c20c"
}